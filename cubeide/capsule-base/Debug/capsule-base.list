
capsule-base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fb8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002190  08002190  00003190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a0  080021a0  000031a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021a4  080021a4  000031a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080021a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080021b4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080021b4  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac25  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b40  00000000  00000000  0000ec61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  000107a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a2  00000000  00000000  000112f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e68e  00000000  00000000  00011b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d517  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c177d  00000000  00000000  0003d737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feeb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de4  00000000  00000000  000feef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00101cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002178 	.word	0x08002178

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002178 	.word	0x08002178

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa99 	bl	8000752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f81c 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8d8 	bl	80003d8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000228:	f000 f858 	bl	80002dc <MX_I2C2_Init>
  MX_SPI1_Init();
 800022c:	f000 f896 	bl	800035c <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2140      	movs	r1, #64	@ 0x40
 8000234:	4808      	ldr	r0, [pc, #32]	@ (8000258 <main+0x40>)
 8000236:	f000 fd85 	bl	8000d44 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800023a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800023e:	f000 faf9 	bl	8000834 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2140      	movs	r1, #64	@ 0x40
 8000246:	4804      	ldr	r0, [pc, #16]	@ (8000258 <main+0x40>)
 8000248:	f000 fd7c 	bl	8000d44 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800024c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000250:	f000 faf0 	bl	8000834 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000254:	bf00      	nop
 8000256:	e7eb      	b.n	8000230 <main+0x18>
 8000258:	48000400 	.word	0x48000400

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	@ 0x50
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2238      	movs	r2, #56	@ 0x38
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 ff57 	bl	800211e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800027e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000282:	f000 fea9 	bl	8000fd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800028e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	2340      	movs	r3, #64	@ 0x40
 8000292:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000294:	2300      	movs	r3, #0
 8000296:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f000 ff4f 	bl	8001140 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a8:	f000 f924 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b0:	2301      	movs	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fa4d 	bl	8001764 <HAL_RCC_ClockConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002d0:	f000 f910 	bl	80004f4 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	@ 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <MX_I2C2_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <MX_I2C2_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_I2C2_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <MX_I2C2_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_I2C2_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_I2C2_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000316:	480e      	ldr	r0, [pc, #56]	@ (8000350 <MX_I2C2_Init+0x74>)
 8000318:	f000 fd2c 	bl	8000d74 <HAL_I2C_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f8e7 	bl	80004f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	2100      	movs	r1, #0
 8000328:	4809      	ldr	r0, [pc, #36]	@ (8000350 <MX_I2C2_Init+0x74>)
 800032a:	f000 fdbe 	bl	8000eaa <HAL_I2CEx_ConfigAnalogFilter>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f8de 	bl	80004f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000338:	2100      	movs	r1, #0
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_I2C2_Init+0x74>)
 800033c:	f000 fe00 	bl	8000f40 <HAL_I2CEx_ConfigDigitalFilter>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f8d5 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000028 	.word	0x20000028
 8000354:	40005800 	.word	0x40005800
 8000358:	00503d58 	.word	0x00503d58

0800035c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	@ (80003d4 <MX_SPI1_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000368:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000374:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000376:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800037a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037c:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000382:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800038a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800038e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003aa:	2207      	movs	r2, #7
 80003ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003bc:	f001 fe04 	bl	8001fc8 <HAL_SPI_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f895 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000007c 	.word	0x2000007c
 80003d4:	40013000 	.word	0x40013000

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	@ 0x28
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ee:	4b3e      	ldr	r3, [pc, #248]	@ (80004e8 <MX_GPIO_Init+0x110>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f2:	4a3d      	ldr	r2, [pc, #244]	@ (80004e8 <MX_GPIO_Init+0x110>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003fa:	4b3b      	ldr	r3, [pc, #236]	@ (80004e8 <MX_GPIO_Init+0x110>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	f003 0304 	and.w	r3, r3, #4
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b38      	ldr	r3, [pc, #224]	@ (80004e8 <MX_GPIO_Init+0x110>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040a:	4a37      	ldr	r2, [pc, #220]	@ (80004e8 <MX_GPIO_Init+0x110>)
 800040c:	f043 0320 	orr.w	r3, r3, #32
 8000410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000412:	4b35      	ldr	r3, [pc, #212]	@ (80004e8 <MX_GPIO_Init+0x110>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000416:	f003 0320 	and.w	r3, r3, #32
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b32      	ldr	r3, [pc, #200]	@ (80004e8 <MX_GPIO_Init+0x110>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4a31      	ldr	r2, [pc, #196]	@ (80004e8 <MX_GPIO_Init+0x110>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042a:	4b2f      	ldr	r3, [pc, #188]	@ (80004e8 <MX_GPIO_Init+0x110>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b2c      	ldr	r3, [pc, #176]	@ (80004e8 <MX_GPIO_Init+0x110>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4a2b      	ldr	r2, [pc, #172]	@ (80004e8 <MX_GPIO_Init+0x110>)
 800043c:	f043 0302 	orr.w	r3, r3, #2
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000442:	4b29      	ldr	r3, [pc, #164]	@ (80004e8 <MX_GPIO_Init+0x110>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_CS_GPIO_Port, RF_SPI_CS_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2110      	movs	r1, #16
 8000452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000456:	f000 fc75 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_SPI_CS_GPIO_Port, MEM_SPI_CS_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2110      	movs	r1, #16
 800045e:	4823      	ldr	r0, [pc, #140]	@ (80004ec <MX_GPIO_Init+0x114>)
 8000460:	f000 fc70 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2140      	movs	r1, #64	@ 0x40
 8000468:	4821      	ldr	r0, [pc, #132]	@ (80004f0 <MX_GPIO_Init+0x118>)
 800046a:	f000 fc6b 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_IRQ_IN_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_IN_Pin;
 800046e:	2308      	movs	r3, #8
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_IN_GPIO_Port, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000484:	f000 fadc 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_SPI_CS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_CS_Pin;
 8000488:	2310      	movs	r3, #16
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4619      	mov	r1, r3
 800049e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a2:	f000 facd 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEM_SPI_CS_Pin */
  GPIO_InitStruct.Pin = MEM_SPI_CS_Pin;
 80004a6:	2310      	movs	r3, #16
 80004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2300      	movs	r3, #0
 80004b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	4619      	mov	r1, r3
 80004bc:	480b      	ldr	r0, [pc, #44]	@ (80004ec <MX_GPIO_Init+0x114>)
 80004be:	f000 fabf 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OUT_Pin */
  GPIO_InitStruct.Pin = LED_OUT_Pin;
 80004c2:	2340      	movs	r3, #64	@ 0x40
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OUT_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_GPIO_Init+0x118>)
 80004da:	f000 fab1 	bl	8000a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004de:	bf00      	nop
 80004e0:	3728      	adds	r7, #40	@ 0x28
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000
 80004ec:	48000800 	.word	0x48000800
 80004f0:	48000400 	.word	0x48000400

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <HAL_MspInit+0x44>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800050a:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <HAL_MspInit+0x44>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6613      	str	r3, [r2, #96]	@ 0x60
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <HAL_MspInit+0x44>)
 8000514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <HAL_MspInit+0x44>)
 8000520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000522:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <HAL_MspInit+0x44>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	6593      	str	r3, [r2, #88]	@ 0x58
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <HAL_MspInit+0x44>)
 800052c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000536:	f000 fdf3 	bl	8001120 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b09e      	sub	sp, #120	@ 0x78
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2254      	movs	r2, #84	@ 0x54
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fdd8 	bl	800211e <memset>
  if(hi2c->Instance==I2C2)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1f      	ldr	r2, [pc, #124]	@ (80005f0 <HAL_I2C_MspInit+0xa8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d137      	bne.n	80005e8 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800057c:	2300      	movs	r3, #0
 800057e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fad1 	bl	8001b2c <HAL_RCCEx_PeriphCLKConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000590:	f7ff ffb0 	bl	80004f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <HAL_I2C_MspInit+0xac>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000598:	4a16      	ldr	r2, [pc, #88]	@ (80005f4 <HAL_I2C_MspInit+0xac>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a0:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <HAL_I2C_MspInit+0xac>)
 80005a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b2:	2312      	movs	r3, #18
 80005b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80005be:	2304      	movs	r3, #4
 80005c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005cc:	f000 fa38 	bl	8000a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <HAL_I2C_MspInit+0xac>)
 80005d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <HAL_I2C_MspInit+0xac>)
 80005d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005da:	6593      	str	r3, [r2, #88]	@ 0x58
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <HAL_I2C_MspInit+0xac>)
 80005de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80005e8:	bf00      	nop
 80005ea:	3778      	adds	r7, #120	@ 0x78
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40005800 	.word	0x40005800
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	@ 0x28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <HAL_SPI_MspInit+0x7c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d128      	bne.n	800066c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <HAL_SPI_MspInit+0x80>)
 800061c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800061e:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <HAL_SPI_MspInit+0x80>)
 8000620:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000624:	6613      	str	r3, [r2, #96]	@ 0x60
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <HAL_SPI_MspInit+0x80>)
 8000628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800062a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <HAL_SPI_MspInit+0x80>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a10      	ldr	r2, [pc, #64]	@ (8000678 <HAL_SPI_MspInit+0x80>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <HAL_SPI_MspInit+0x80>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800064a:	23e0      	movs	r3, #224	@ 0xe0
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800065a:	2305      	movs	r3, #5
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f000 f9ea 	bl	8000a40 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	@ 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40013000 	.word	0x40013000
 8000678:	40021000 	.word	0x40021000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <NMI_Handler+0x4>

08000684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <MemManage_Handler+0x4>

08000694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d2:	f000 f891 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <SystemInit+0x20>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006e6:	4a05      	ldr	r2, [pc, #20]	@ (80006fc <SystemInit+0x20>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	@ (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000704:	f7ff ffea 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	@ (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	@ (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072e:	f001 fcff 	bl	8002130 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000732:	f7ff fd71 	bl	8000218 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000744:	080021a8 	.word	0x080021a8
  ldr r2, =_sbss
 8000748:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800074c:	200000e4 	.word	0x200000e4

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>

08000752 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000758:	2300      	movs	r3, #0
 800075a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f93d 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000762:	200f      	movs	r0, #15
 8000764:	f000 f80e 	bl	8000784 <HAL_InitTick>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d002      	beq.n	8000774 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	e001      	b.n	8000778 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000774:	f7ff fec4 	bl	8000500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000778:	79fb      	ldrb	r3, [r7, #7]

}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <HAL_InitTick+0x68>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d022      	beq.n	80007de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_InitTick+0x6c>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <HAL_InitTick+0x68>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80007a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f93a 	bl	8000a26 <HAL_SYSTICK_Config>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10f      	bne.n	80007d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	d809      	bhi.n	80007d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007be:	2200      	movs	r2, #0
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	f000 f914 	bl	80009f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <HAL_InitTick+0x70>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	e007      	b.n	80007e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e004      	b.n	80007e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e001      	b.n	80007e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_IncTick+0x1c>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <HAL_IncTick+0x20>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4413      	add	r3, r2
 8000806:	4a03      	ldr	r2, [pc, #12]	@ (8000814 <HAL_IncTick+0x1c>)
 8000808:	6013      	str	r3, [r2, #0]
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	200000e0 	.word	0x200000e0
 8000818:	20000008 	.word	0x20000008

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	200000e0 	.word	0x200000e0

08000834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff ffee 	bl	800081c <HAL_GetTick>
 8000840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800084c:	d004      	beq.n	8000858 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_Delay+0x40>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4413      	add	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000858:	bf00      	nop
 800085a:	f7ff ffdf 	bl	800081c <HAL_GetTick>
 800085e:	4602      	mov	r2, r0
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	d8f7      	bhi.n	800085a <HAL_Delay+0x26>
  {
  }
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000008 	.word	0x20000008

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db0a      	blt.n	8000906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	490c      	ldr	r1, [pc, #48]	@ (8000928 <__NVIC_SetPriority+0x4c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000904:	e00a      	b.n	800091c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4908      	ldr	r1, [pc, #32]	@ (800092c <__NVIC_SetPriority+0x50>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	3b04      	subs	r3, #4
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	440b      	add	r3, r1
 800091a:	761a      	strb	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	@ 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f1c3 0307 	rsb	r3, r3, #7
 800094a:	2b04      	cmp	r3, #4
 800094c:	bf28      	it	cs
 800094e:	2304      	movcs	r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3304      	adds	r3, #4
 8000956:	2b06      	cmp	r3, #6
 8000958:	d902      	bls.n	8000960 <NVIC_EncodePriority+0x30>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3b03      	subs	r3, #3
 800095e:	e000      	b.n	8000962 <NVIC_EncodePriority+0x32>
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43d9      	mvns	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	4313      	orrs	r3, r2
         );
}
 800098a:	4618      	mov	r0, r3
 800098c:	3724      	adds	r7, #36	@ 0x24
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff8e 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff47 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff5e 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff90 	bl	8000930 <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5f 	bl	80008dc <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffb2 	bl	8000998 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a4e:	e15a      	b.n	8000d06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 814c 	beq.w	8000d00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d005      	beq.n	8000a80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 0201 	and.w	r2, r3, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d017      	beq.n	8000b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d123      	bne.n	8000b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	08da      	lsrs	r2, r3, #3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3208      	adds	r2, #8
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	220f      	movs	r2, #15
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	08da      	lsrs	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	6939      	ldr	r1, [r7, #16]
 8000b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0203 	and.w	r2, r3, #3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80a6 	beq.w	8000d00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d24 <HAL_GPIO_Init+0x2e4>)
 8000bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8000d24 <HAL_GPIO_Init+0x2e4>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc0:	4b58      	ldr	r3, [pc, #352]	@ (8000d24 <HAL_GPIO_Init+0x2e4>)
 8000bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bcc:	4a56      	ldr	r2, [pc, #344]	@ (8000d28 <HAL_GPIO_Init+0x2e8>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bf6:	d01f      	beq.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8000d2c <HAL_GPIO_Init+0x2ec>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d019      	beq.n	8000c34 <HAL_GPIO_Init+0x1f4>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4b      	ldr	r2, [pc, #300]	@ (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d013      	beq.n	8000c30 <HAL_GPIO_Init+0x1f0>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d34 <HAL_GPIO_Init+0x2f4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d00d      	beq.n	8000c2c <HAL_GPIO_Init+0x1ec>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a49      	ldr	r2, [pc, #292]	@ (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d007      	beq.n	8000c28 <HAL_GPIO_Init+0x1e8>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a48      	ldr	r2, [pc, #288]	@ (8000d3c <HAL_GPIO_Init+0x2fc>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d101      	bne.n	8000c24 <HAL_GPIO_Init+0x1e4>
 8000c20:	2305      	movs	r3, #5
 8000c22:	e00a      	b.n	8000c3a <HAL_GPIO_Init+0x1fa>
 8000c24:	2306      	movs	r3, #6
 8000c26:	e008      	b.n	8000c3a <HAL_GPIO_Init+0x1fa>
 8000c28:	2304      	movs	r3, #4
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x1fa>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e004      	b.n	8000c3a <HAL_GPIO_Init+0x1fa>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x1fa>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <HAL_GPIO_Init+0x1fa>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	f002 0203 	and.w	r2, r2, #3
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	4093      	lsls	r3, r2
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c4a:	4937      	ldr	r1, [pc, #220]	@ (8000d28 <HAL_GPIO_Init+0x2e8>)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c58:	4b39      	ldr	r3, [pc, #228]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c7c:	4a30      	ldr	r2, [pc, #192]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c82:	4b2f      	ldr	r3, [pc, #188]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ca6:	4a26      	ldr	r2, [pc, #152]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cac:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cfa:	4a11      	ldr	r2, [pc, #68]	@ (8000d40 <HAL_GPIO_Init+0x300>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f47f ae9d 	bne.w	8000a50 <HAL_GPIO_Init+0x10>
  }
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000c00 	.word	0x48000c00
 8000d38:	48001000 	.word	0x48001000
 8000d3c:	48001400 	.word	0x48001400
 8000d40:	40010400 	.word	0x40010400

08000d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d54:	787b      	ldrb	r3, [r7, #1]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d60:	e002      	b.n	8000d68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d62:	887a      	ldrh	r2, [r7, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e08d      	b.n	8000ea2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d106      	bne.n	8000da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fbd4 	bl	8000548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2224      	movs	r2, #36	@ 0x24
 8000da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0201 	bic.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000dc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000dd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d107      	bne.n	8000dee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	e006      	b.n	8000dfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000dfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d108      	bne.n	8000e16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	e007      	b.n	8000e26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69d9      	ldr	r1, [r3, #28]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1a      	ldr	r2, [r3, #32]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0201 	orr.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	d138      	bne.n	8000f32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d101      	bne.n	8000ece <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e032      	b.n	8000f34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2224      	movs	r2, #36	@ 0x24
 8000eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0201 	bic.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000efc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6819      	ldr	r1, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0201 	orr.w	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2220      	movs	r2, #32
 8000f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f32:	2302      	movs	r3, #2
  }
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b20      	cmp	r3, #32
 8000f54:	d139      	bne.n	8000fca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d101      	bne.n	8000f64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e033      	b.n	8000fcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2224      	movs	r2, #36	@ 0x24
 8000f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0201 	orr.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2220      	movs	r2, #32
 8000fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000fca:	2302      	movs	r3, #2
  }
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d141      	bne.n	800106a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ff2:	d131      	bne.n	8001058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ff4:	4b47      	ldr	r3, [pc, #284]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffa:	4a46      	ldr	r2, [pc, #280]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	4b43      	ldr	r3, [pc, #268]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800100c:	4a41      	ldr	r2, [pc, #260]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001014:	4b40      	ldr	r3, [pc, #256]	@ (8001118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2232      	movs	r2, #50	@ 0x32
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4a3f      	ldr	r2, [pc, #252]	@ (800111c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9b      	lsrs	r3, r3, #18
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102a:	e002      	b.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3b01      	subs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001032:	4b38      	ldr	r3, [pc, #224]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800103e:	d102      	bne.n	8001046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f2      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001046:	4b33      	ldr	r3, [pc, #204]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001052:	d158      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e057      	b.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800105e:	4a2d      	ldr	r2, [pc, #180]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001068:	e04d      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001070:	d141      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800107a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800107e:	d131      	bne.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001086:	4a23      	ldr	r2, [pc, #140]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001098:	4a1e      	ldr	r2, [pc, #120]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800109e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2232      	movs	r2, #50	@ 0x32
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9b      	lsrs	r3, r3, #18
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b6:	e002      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ca:	d102      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f2      	bne.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010de:	d112      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e011      	b.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80010f4:	e007      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001104:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40007000 	.word	0x40007000
 8001118:	20000000 	.word	0x20000000
 800111c:	431bde83 	.word	0x431bde83

08001120 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112e:	6093      	str	r3, [r2, #8]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e2fe      	b.n	8001750 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4b97      	ldr	r3, [pc, #604]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001168:	4b94      	ldr	r3, [pc, #592]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0x3e>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d002      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b08      	cmp	r3, #8
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b8d      	ldr	r3, [pc, #564]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e2d9      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b85      	ldr	r3, [pc, #532]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a84      	ldr	r2, [pc, #528]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b7f      	ldr	r3, [pc, #508]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a7e      	ldr	r2, [pc, #504]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b7c      	ldr	r3, [pc, #496]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7b      	ldr	r2, [pc, #492]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b78      	ldr	r3, [pc, #480]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a77      	ldr	r2, [pc, #476]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b75      	ldr	r3, [pc, #468]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a74      	ldr	r2, [pc, #464]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb10 	bl	800081c <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fb0c 	bl	800081c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	@ 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e29e      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001212:	4b6a      	ldr	r3, [pc, #424]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fafc 	bl	800081c <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff faf8 	bl	800081c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	@ 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e28a      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123a:	4b60      	ldr	r3, [pc, #384]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001256:	4b59      	ldr	r3, [pc, #356]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001260:	4b56      	ldr	r3, [pc, #344]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d102      	bne.n	8001276 <HAL_RCC_OscConfig+0x136>
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d002      	beq.n	800127c <HAL_RCC_OscConfig+0x13c>
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d11f      	bne.n	80012bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127c:	4b4f      	ldr	r3, [pc, #316]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x154>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e25d      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001294:	4b49      	ldr	r3, [pc, #292]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	4946      	ldr	r1, [pc, #280]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012a8:	4b45      	ldr	r3, [pc, #276]	@ (80013c0 <HAL_RCC_OscConfig+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fa69 	bl	8000784 <HAL_InitTick>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d043      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e249      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d023      	beq.n	800130c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	4b3d      	ldr	r3, [pc, #244]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a3c      	ldr	r2, [pc, #240]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff faa4 	bl	800081c <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff faa0 	bl	800081c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e232      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ea:	4b34      	ldr	r3, [pc, #208]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	061b      	lsls	r3, r3, #24
 8001304:	492d      	ldr	r1, [pc, #180]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e01a      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130c:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2a      	ldr	r2, [pc, #168]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001312:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fa80 	bl	800081c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fa7c 	bl	800081c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e20e      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x1e0>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d041      	beq.n	80013d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800135c:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fa59 	bl	800081c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fa55 	bl	800081c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1e7      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001380:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ef      	beq.n	800136e <HAL_RCC_OscConfig+0x22e>
 800138e:	e020      	b.n	80013d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff fa3c 	bl	800081c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a6:	e00d      	b.n	80013c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fa38 	bl	800081c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d906      	bls.n	80013c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1ca      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c4:	4b8c      	ldr	r3, [pc, #560]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1ea      	bne.n	80013a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80a6 	beq.w	800152c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013e4:	4b84      	ldr	r3, [pc, #528]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_OscConfig+0x2b4>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x2b6>
 80013f4:	2300      	movs	r3, #0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00d      	beq.n	8001416 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b7f      	ldr	r3, [pc, #508]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	4a7e      	ldr	r2, [pc, #504]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001404:	6593      	str	r3, [r2, #88]	@ 0x58
 8001406:	4b7c      	ldr	r3, [pc, #496]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001416:	4b79      	ldr	r3, [pc, #484]	@ (80015fc <HAL_RCC_OscConfig+0x4bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d118      	bne.n	8001454 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001422:	4b76      	ldr	r3, [pc, #472]	@ (80015fc <HAL_RCC_OscConfig+0x4bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a75      	ldr	r2, [pc, #468]	@ (80015fc <HAL_RCC_OscConfig+0x4bc>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff f9f5 	bl	800081c <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001436:	f7ff f9f1 	bl	800081c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e183      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001448:	4b6c      	ldr	r3, [pc, #432]	@ (80015fc <HAL_RCC_OscConfig+0x4bc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <HAL_RCC_OscConfig+0x32e>
 800145c:	4b66      	ldr	r3, [pc, #408]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001462:	4a65      	ldr	r2, [pc, #404]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800146c:	e024      	b.n	80014b8 <HAL_RCC_OscConfig+0x378>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d110      	bne.n	8001498 <HAL_RCC_OscConfig+0x358>
 8001476:	4b60      	ldr	r3, [pc, #384]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800147c:	4a5e      	ldr	r2, [pc, #376]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001486:	4b5c      	ldr	r3, [pc, #368]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800148c:	4a5a      	ldr	r2, [pc, #360]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001496:	e00f      	b.n	80014b8 <HAL_RCC_OscConfig+0x378>
 8001498:	4b57      	ldr	r3, [pc, #348]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800149e:	4a56      	ldr	r2, [pc, #344]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014a8:	4b53      	ldr	r3, [pc, #332]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ae:	4a52      	ldr	r2, [pc, #328]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d016      	beq.n	80014ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff f9ac 	bl	800081c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff f9a8 	bl	800081c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e138      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014de:	4b46      	ldr	r3, [pc, #280]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80014e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ed      	beq.n	80014c8 <HAL_RCC_OscConfig+0x388>
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff f995 	bl	800081c <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff f991 	bl	800081c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e121      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800150c:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ed      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4b35      	ldr	r3, [pc, #212]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	4a34      	ldr	r2, [pc, #208]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800152a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d03c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01c      	beq.n	800157a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001546:	4a2c      	ldr	r2, [pc, #176]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff f964 	bl	800081c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001558:	f7ff f960 	bl	800081c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0f2      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800156c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ef      	beq.n	8001558 <HAL_RCC_OscConfig+0x418>
 8001578:	e01b      	b.n	80015b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800157c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001580:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff f947 	bl	800081c <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001592:	f7ff f943 	bl	800081c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0d5      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ef      	bne.n	8001592 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80c9 	beq.w	800174e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015bc:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	f000 8083 	beq.w	80016d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d15e      	bne.n	8001690 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff f91d 	bl	800081c <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	e00c      	b.n	8001600 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff f919 	bl	800081c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d905      	bls.n	8001600 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0ab      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001600:	4b55      	ldr	r3, [pc, #340]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ec      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800160c:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	4b52      	ldr	r3, [pc, #328]	@ (800175c <HAL_RCC_OscConfig+0x61c>)
 8001612:	4013      	ands	r3, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6a11      	ldr	r1, [r2, #32]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800161c:	3a01      	subs	r2, #1
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	4311      	orrs	r1, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001626:	0212      	lsls	r2, r2, #8
 8001628:	4311      	orrs	r1, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800162e:	0852      	lsrs	r2, r2, #1
 8001630:	3a01      	subs	r2, #1
 8001632:	0552      	lsls	r2, r2, #21
 8001634:	4311      	orrs	r1, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800163a:	0852      	lsrs	r2, r2, #1
 800163c:	3a01      	subs	r2, #1
 800163e:	0652      	lsls	r2, r2, #25
 8001640:	4311      	orrs	r1, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001646:	06d2      	lsls	r2, r2, #27
 8001648:	430a      	orrs	r2, r1
 800164a:	4943      	ldr	r1, [pc, #268]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001650:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a40      	ldr	r2, [pc, #256]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 8001656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800165a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800165c:	4b3e      	ldr	r3, [pc, #248]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a3d      	ldr	r2, [pc, #244]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f8d8 	bl	800081c <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff f8d4 	bl	800081c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e066      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001682:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x530>
 800168e:	e05e      	b.n	800174e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a30      	ldr	r2, [pc, #192]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 8001696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800169a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff f8be 	bl	800081c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff f8ba 	bl	800081c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e04c      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b6:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80016c2:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	4924      	ldr	r1, [pc, #144]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 80016c8:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <HAL_RCC_OscConfig+0x620>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	60cb      	str	r3, [r1, #12]
 80016ce:	e03e      	b.n	800174e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e039      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d12c      	bne.n	800174a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	3b01      	subs	r3, #1
 80016fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d123      	bne.n	800174a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d11b      	bne.n	800174a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d113      	bne.n	800174a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	3b01      	subs	r3, #1
 8001730:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d109      	bne.n	800174a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	019f800c 	.word	0x019f800c
 8001760:	feeefffc 	.word	0xfeeefffc

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e11e      	b.n	80019ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b91      	ldr	r3, [pc, #580]	@ (80019c4 <HAL_RCC_ClockConfig+0x260>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d910      	bls.n	80017ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b8e      	ldr	r3, [pc, #568]	@ (80019c4 <HAL_RCC_ClockConfig+0x260>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 020f 	bic.w	r2, r3, #15
 8001792:	498c      	ldr	r1, [pc, #560]	@ (80019c4 <HAL_RCC_ClockConfig+0x260>)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b8a      	ldr	r3, [pc, #552]	@ (80019c4 <HAL_RCC_ClockConfig+0x260>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e106      	b.n	80019ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d073      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d129      	bne.n	8001814 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c0:	4b81      	ldr	r3, [pc, #516]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0f4      	b.n	80019ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017d0:	f000 f966 	bl	8001aa0 <RCC_GetSysClockFreqFromPLLSource>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4a7c      	ldr	r2, [pc, #496]	@ (80019cc <HAL_RCC_ClockConfig+0x268>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d93f      	bls.n	800185e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017de:	4b7a      	ldr	r3, [pc, #488]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d033      	beq.n	800185e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d12f      	bne.n	800185e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017fe:	4b72      	ldr	r3, [pc, #456]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001806:	4a70      	ldr	r2, [pc, #448]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 8001808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800180c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800180e:	2380      	movs	r3, #128	@ 0x80
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e024      	b.n	800185e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d107      	bne.n	800182c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181c:	4b6a      	ldr	r3, [pc, #424]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0c6      	b.n	80019ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	4b66      	ldr	r3, [pc, #408]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0be      	b.n	80019ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800183c:	f000 f8ce 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 8001840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4a61      	ldr	r2, [pc, #388]	@ (80019cc <HAL_RCC_ClockConfig+0x268>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d909      	bls.n	800185e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800184a:	4b5f      	ldr	r3, [pc, #380]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001852:	4a5d      	ldr	r2, [pc, #372]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001858:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b5a      	ldr	r3, [pc, #360]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4957      	ldr	r1, [pc, #348]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001870:	f7fe ffd4 	bl	800081c <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7fe ffd0 	bl	800081c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e095      	b.n	80019ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d023      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b43      	ldr	r3, [pc, #268]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a42      	ldr	r2, [pc, #264]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80018be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018d0:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80018d8:	4a3b      	ldr	r2, [pc, #236]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80018da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4936      	ldr	r1, [pc, #216]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
 80018f2:	e008      	b.n	8001906 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b80      	cmp	r3, #128	@ 0x80
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018fa:	4b33      	ldr	r3, [pc, #204]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4a32      	ldr	r2, [pc, #200]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 8001900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001904:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001906:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <HAL_RCC_ClockConfig+0x260>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d21d      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001914:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <HAL_RCC_ClockConfig+0x260>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 020f 	bic.w	r2, r3, #15
 800191c:	4929      	ldr	r1, [pc, #164]	@ (80019c4 <HAL_RCC_ClockConfig+0x260>)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001924:	f7fe ff7a 	bl	800081c <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7fe ff76 	bl	800081c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e03b      	b.n	80019ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <HAL_RCC_ClockConfig+0x260>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d1ed      	bne.n	800192c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4917      	ldr	r1, [pc, #92]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490f      	ldr	r1, [pc, #60]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800198e:	f000 f825 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <HAL_RCC_ClockConfig+0x264>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	490c      	ldr	r1, [pc, #48]	@ (80019d0 <HAL_RCC_ClockConfig+0x26c>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_RCC_ClockConfig+0x270>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_RCC_ClockConfig+0x274>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fee6 	bl	8000784 <HAL_InitTick>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	04c4b400 	.word	0x04c4b400
 80019d0:	08002190 	.word	0x08002190
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e047      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019f4:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a00:	4b26      	ldr	r3, [pc, #152]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	e03e      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a06:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d136      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3301      	adds	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a30:	4a1a      	ldr	r2, [pc, #104]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	4a16      	ldr	r2, [pc, #88]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a3a:	68d2      	ldr	r2, [r2, #12]
 8001a3c:	0a12      	lsrs	r2, r2, #8
 8001a3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
      break;
 8001a48:	e00c      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a4a:	4a13      	ldr	r2, [pc, #76]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4a10      	ldr	r2, [pc, #64]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a54:	68d2      	ldr	r2, [r2, #12]
 8001a56:	0a12      	lsrs	r2, r2, #8
 8001a58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
      break;
 8001a62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0e5b      	lsrs	r3, r3, #25
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e001      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a84:	693b      	ldr	r3, [r7, #16]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	00f42400 	.word	0x00f42400
 8001a9c:	007a1200 	.word	0x007a1200

08001aa0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d10c      	bne.n	8001ade <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ac4:	4a17      	ldr	r2, [pc, #92]	@ (8001b24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ace:	68d2      	ldr	r2, [r2, #12]
 8001ad0:	0a12      	lsrs	r2, r2, #8
 8001ad2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
    break;
 8001adc:	e00c      	b.n	8001af8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ae8:	68d2      	ldr	r2, [r2, #12]
 8001aea:	0a12      	lsrs	r2, r2, #8
 8001aec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
    break;
 8001af6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0e5b      	lsrs	r3, r3, #25
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b12:	687b      	ldr	r3, [r7, #4]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000
 8001b24:	007a1200 	.word	0x007a1200
 8001b28:	00f42400 	.word	0x00f42400

08001b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b34:	2300      	movs	r3, #0
 8001b36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b38:	2300      	movs	r3, #0
 8001b3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8098 	beq.w	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b40      	ldr	r3, [pc, #256]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b3d      	ldr	r3, [pc, #244]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b76:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a39      	ldr	r2, [pc, #228]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b82:	f7fe fe4b 	bl	800081c <HAL_GetTick>
 8001b86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b88:	e009      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8a:	f7fe fe47 	bl	800081c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d902      	bls.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	74fb      	strb	r3, [r7, #19]
        break;
 8001b9c:	e005      	b.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b9e:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0ef      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001baa:	7cfb      	ldrb	r3, [r7, #19]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d159      	bne.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01e      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d019      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bcc:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bd8:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bde:	4a1f      	ldr	r2, [pc, #124]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001be8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bee:	4a1b      	ldr	r2, [pc, #108]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bf8:	4a18      	ldr	r2, [pc, #96]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d016      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fe07 	bl	800081c <HAL_GetTick>
 8001c0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c10:	e00b      	b.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7fe fe03 	bl	800081c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d902      	bls.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	74fb      	strb	r3, [r7, #19]
            break;
 8001c28:	e006      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ec      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001c38:	7cfb      	ldrb	r3, [r7, #19]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10b      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c4c:	4903      	ldr	r1, [pc, #12]	@ (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001c54:	e008      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c56:	7cfb      	ldrb	r3, [r7, #19]
 8001c58:	74bb      	strb	r3, [r7, #18]
 8001c5a:	e005      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c64:	7cfb      	ldrb	r3, [r7, #19]
 8001c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c68:	7c7b      	ldrb	r3, [r7, #17]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d105      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6e:	4ba7      	ldr	r3, [pc, #668]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	4aa6      	ldr	r2, [pc, #664]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c86:	4ba1      	ldr	r3, [pc, #644]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8c:	f023 0203 	bic.w	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	499d      	ldr	r1, [pc, #628]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ca8:	4b98      	ldr	r3, [pc, #608]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cae:	f023 020c 	bic.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4995      	ldr	r1, [pc, #596]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cca:	4b90      	ldr	r3, [pc, #576]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	498c      	ldr	r1, [pc, #560]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cec:	4b87      	ldr	r3, [pc, #540]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	4984      	ldr	r1, [pc, #528]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	497b      	ldr	r1, [pc, #492]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d30:	4b76      	ldr	r3, [pc, #472]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4973      	ldr	r1, [pc, #460]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d52:	4b6e      	ldr	r3, [pc, #440]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	496a      	ldr	r1, [pc, #424]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d74:	4b65      	ldr	r3, [pc, #404]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4962      	ldr	r1, [pc, #392]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d96:	4b5d      	ldr	r3, [pc, #372]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	4959      	ldr	r1, [pc, #356]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001db8:	4b54      	ldr	r3, [pc, #336]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc6:	4951      	ldr	r1, [pc, #324]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dda:	4b4c      	ldr	r3, [pc, #304]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	4948      	ldr	r1, [pc, #288]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dfc:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4940      	ldr	r1, [pc, #256]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e1a:	d105      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4a3a      	ldr	r2, [pc, #232]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e26:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d015      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e34:	4b35      	ldr	r3, [pc, #212]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e42:	4932      	ldr	r1, [pc, #200]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e52:	d105      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e54:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a2c      	ldr	r2, [pc, #176]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e5e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e6c:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e7a:	4924      	ldr	r1, [pc, #144]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e8a:	d105      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eaa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb2:	4916      	ldr	r1, [pc, #88]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ece:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d019      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001efa:	d109      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a02      	ldr	r2, [pc, #8]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f06:	60d3      	str	r3, [r2, #12]
 8001f08:	e002      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f1c:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	4926      	ldr	r1, [pc, #152]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f3c:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f62:	4918      	ldr	r1, [pc, #96]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f72:	d105      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	490a      	ldr	r1, [pc, #40]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001fb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e09d      	b.n	8002116 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fea:	d009      	beq.n	8002000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
 8001ff2:	e005      	b.n	8002000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe faec 	bl	80005f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002036:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002040:	d902      	bls.n	8002048 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e002      	b.n	800204e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002056:	d007      	beq.n	8002068 <HAL_SPI_Init+0xa0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002060:	d002      	beq.n	8002068 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	ea42 0103 	orr.w	r1, r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	0c1b      	lsrs	r3, r3, #16
 80020c4:	f003 0204 	and.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002104:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <memset>:
 800211e:	4402      	add	r2, r0
 8002120:	4603      	mov	r3, r0
 8002122:	4293      	cmp	r3, r2
 8002124:	d100      	bne.n	8002128 <memset+0xa>
 8002126:	4770      	bx	lr
 8002128:	f803 1b01 	strb.w	r1, [r3], #1
 800212c:	e7f9      	b.n	8002122 <memset+0x4>
	...

08002130 <__libc_init_array>:
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	4d0d      	ldr	r5, [pc, #52]	@ (8002168 <__libc_init_array+0x38>)
 8002134:	4c0d      	ldr	r4, [pc, #52]	@ (800216c <__libc_init_array+0x3c>)
 8002136:	1b64      	subs	r4, r4, r5
 8002138:	10a4      	asrs	r4, r4, #2
 800213a:	2600      	movs	r6, #0
 800213c:	42a6      	cmp	r6, r4
 800213e:	d109      	bne.n	8002154 <__libc_init_array+0x24>
 8002140:	4d0b      	ldr	r5, [pc, #44]	@ (8002170 <__libc_init_array+0x40>)
 8002142:	4c0c      	ldr	r4, [pc, #48]	@ (8002174 <__libc_init_array+0x44>)
 8002144:	f000 f818 	bl	8002178 <_init>
 8002148:	1b64      	subs	r4, r4, r5
 800214a:	10a4      	asrs	r4, r4, #2
 800214c:	2600      	movs	r6, #0
 800214e:	42a6      	cmp	r6, r4
 8002150:	d105      	bne.n	800215e <__libc_init_array+0x2e>
 8002152:	bd70      	pop	{r4, r5, r6, pc}
 8002154:	f855 3b04 	ldr.w	r3, [r5], #4
 8002158:	4798      	blx	r3
 800215a:	3601      	adds	r6, #1
 800215c:	e7ee      	b.n	800213c <__libc_init_array+0xc>
 800215e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002162:	4798      	blx	r3
 8002164:	3601      	adds	r6, #1
 8002166:	e7f2      	b.n	800214e <__libc_init_array+0x1e>
 8002168:	080021a0 	.word	0x080021a0
 800216c:	080021a0 	.word	0x080021a0
 8002170:	080021a0 	.word	0x080021a0
 8002174:	080021a4 	.word	0x080021a4

08002178 <_init>:
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217a:	bf00      	nop
 800217c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217e:	bc08      	pop	{r3}
 8002180:	469e      	mov	lr, r3
 8002182:	4770      	bx	lr

08002184 <_fini>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	bf00      	nop
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr
