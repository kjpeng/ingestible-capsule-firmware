
capsule-base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007918  08007918  00008918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007968  08007968  0000905c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007968  08007968  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007968  08007968  00008968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800796c  0800796c  0000896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007970  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  2000005c  080079cc  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  080079cc  00009b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9dc  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e9  00000000  00000000  00016a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00018c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f0  00000000  00000000  00019950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fab9  00000000  00000000  0001a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105c6  00000000  00000000  00039df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6552  00000000  00000000  0004a3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  00110954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00114500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007900 	.word	0x08007900

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08007900 	.word	0x08007900

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <ADXL343_Write>:
#include "adxl343.h"

int ADXL343_Write(uint8_t reg, uint8_t val) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	4603      	mov	r3, r0
 8000c28:	460a      	mov	r2, r1
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[2] = {reg, val};
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	733b      	strb	r3, [r7, #12]
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	737b      	strb	r3, [r7, #13]
  if (HAL_I2C_Master_Transmit(adxl_handle,
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <ADXL343_Write+0x44>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2302      	movs	r3, #2
 8000c48:	21a6      	movs	r1, #166	@ 0xa6
 8000c4a:	f003 ff57 	bl	8004afc <HAL_I2C_Master_Transmit>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <ADXL343_Write+0x3a>
                              ADXL_ADDR << 1,
                              buf,
                              2,
                              HAL_MAX_DELAY) != HAL_OK) {
    return -1;
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	e000      	b.n	8000c5c <ADXL343_Write+0x3c>
  }
  return 0;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000130 	.word	0x20000130

08000c68 <ADXL343_Read>:

int ADXL343_Read(uint8_t reg, uint8_t *buf, uint16_t buf_size) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af04      	add	r7, sp, #16
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Mem_Read(adxl_handle,
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <ADXL343_Read+0x44>)
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	21a6      	movs	r1, #166	@ 0xa6
 8000c92:	f004 f95f 	bl	8004f54 <HAL_I2C_Mem_Read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <ADXL343_Read+0x3a>
                       reg,
                       I2C_MEMADD_SIZE_8BIT,
                       buf,
                       buf_size,
                       HAL_MAX_DELAY) != HAL_OK) {
    return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	e000      	b.n	8000ca4 <ADXL343_Read+0x3c>
  }
  return 0;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000130 	.word	0x20000130

08000cb0 <ADXL343_Init>:

int ADXL343_Init(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  uint8_t adxl_chipid;

  ADXL343_Read(ADXL343_REG_DEVID, &adxl_chipid, 1);
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4619      	mov	r1, r3
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ffd3 	bl	8000c68 <ADXL343_Read>
  if (adxl_chipid != 0xE5) {
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2be5      	cmp	r3, #229	@ 0xe5
 8000cc6:	d002      	beq.n	8000cce <ADXL343_Init+0x1e>
    return -1;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	e008      	b.n	8000ce0 <ADXL343_Init+0x30>
  }

  ADXL343_Write(ADXL343_REG_POWER_CTL, 0x08); // enable measurements
 8000cce:	2108      	movs	r1, #8
 8000cd0:	202d      	movs	r0, #45	@ 0x2d
 8000cd2:	f7ff ffa5 	bl	8000c20 <ADXL343_Write>
  ADXL343_Write(ADXL343_REG_DATA_FORMAT, 0x08); // data_format range +- 4g
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	2031      	movs	r0, #49	@ 0x31
 8000cda:	f7ff ffa1 	bl	8000c20 <ADXL343_Write>
  return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	f5ad 5d94 	sub.w	sp, sp, #4736	@ 0x1280
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f003 fb56 	bl	80043a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f8a9 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 f965 	bl	8000fc8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000cfe:	f000 f8e5 	bl	8000ecc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000d02:	f000 f923 	bl	8000f4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  adxl_handle = &hi2c2;
 8000d06:	4b49      	ldr	r3, [pc, #292]	@ (8000e2c <main+0x144>)
 8000d08:	4a49      	ldr	r2, [pc, #292]	@ (8000e30 <main+0x148>)
 8000d0a:	601a      	str	r2, [r3, #0]
  mlx_handle = &hi2c2;
 8000d0c:	4b49      	ldr	r3, [pc, #292]	@ (8000e34 <main+0x14c>)
 8000d0e:	4a48      	ldr	r2, [pc, #288]	@ (8000e30 <main+0x148>)
 8000d10:	601a      	str	r2, [r3, #0]

  static uint16_t eeMLX90640[832];
  paramsMLX90640 mlx90640;
  static uint16_t mlx90640Frame[834];
  float mlx_ta;
  float mlx_emissivity = 0.95;
 8000d12:	4b49      	ldr	r3, [pc, #292]	@ (8000e38 <main+0x150>)
 8000d14:	f507 5294 	add.w	r2, r7, #4736	@ 0x1280
 8000d18:	f102 0214 	add.w	r2, r2, #20
 8000d1c:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int adxl_init = ADXL343_Init();
 8000d1e:	f7ff ffc7 	bl	8000cb0 <ADXL343_Init>
 8000d22:	f507 5394 	add.w	r3, r7, #4736	@ 0x1280
 8000d26:	f103 0310 	add.w	r3, r3, #16
 8000d2a:	6018      	str	r0, [r3, #0]

	  // expected value of adxl_chipid: 0xE5
	  uint8_t adxl_chipid;
	  ADXL343_Read(ADXL343_REG_DEVID, &adxl_chipid, 1);
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	3b11      	subs	r3, #17
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff96 	bl	8000c68 <ADXL343_Read>

	  MLX90640_SetResolution(MLX_ADDR, 0x00);		// 16-bit resolution
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2033      	movs	r0, #51	@ 0x33
 8000d40:	f000 fbdb 	bl	80014fa <MLX90640_SetResolution>
	  MLX90640_SetRefreshRate(MLX_ADDR, 0x00);		// 0.5 Hz
 8000d44:	2100      	movs	r1, #0
 8000d46:	2033      	movs	r0, #51	@ 0x33
 8000d48:	f000 fc07 	bl	800155a <MLX90640_SetRefreshRate>
	  MLX90640_SetChessMode(MLX_ADDR);				// chess mode
 8000d4c:	2033      	movs	r0, #51	@ 0x33
 8000d4e:	f000 fc34 	bl	80015ba <MLX90640_SetChessMode>
	  MLX90640_DumpEE(MLX_ADDR, eeMLX90640);
 8000d52:	493a      	ldr	r1, [pc, #232]	@ (8000e3c <main+0x154>)
 8000d54:	2033      	movs	r0, #51	@ 0x33
 8000d56:	f000 f9cb 	bl	80010f0 <MLX90640_DumpEE>
	  MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	3b10      	subs	r3, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	4836      	ldr	r0, [pc, #216]	@ (8000e3c <main+0x154>)
 8000d64:	f000 fb84 	bl	8001470 <MLX90640_ExtractParameters>
	  uint16_t mlx_serialno[3];
	  MLX90640_I2CRead(MLX_ADDR, MLX90640_DEVID1, 3, mlx_serialno);
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	3b18      	subs	r3, #24
 8000d6e:	2203      	movs	r2, #3
 8000d70:	f242 4107 	movw	r1, #9223	@ 0x2407
 8000d74:	2033      	movs	r0, #51	@ 0x33
 8000d76:	f003 f965 	bl	8004044 <MLX90640_I2CRead>

	  int mlx_status = MLX90640_SynchFrame(MLX_ADDR);
 8000d7a:	2033      	movs	r0, #51	@ 0x33
 8000d7c:	f000 f9cb 	bl	8001116 <MLX90640_SynchFrame>
 8000d80:	f507 5394 	add.w	r3, r7, #4736	@ 0x1280
 8000d84:	f103 030c 	add.w	r3, r3, #12
 8000d88:	6018      	str	r0, [r3, #0]
	  if (mlx_status == 0) {
 8000d8a:	f507 5394 	add.w	r3, r7, #4736	@ 0x1280
 8000d8e:	f103 030c 	add.w	r3, r3, #12
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d134      	bne.n	8000e02 <main+0x11a>
		  MLX90640_GetFrameData(MLX_ADDR, mlx90640Frame);
 8000d98:	4929      	ldr	r1, [pc, #164]	@ (8000e40 <main+0x158>)
 8000d9a:	2033      	movs	r0, #51	@ 0x33
 8000d9c:	f000 f9ec 	bl	8001178 <MLX90640_GetFrameData>
		  mlx_ta = MLX90640_GetTa(mlx90640Frame, &mlx90640);
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	3b10      	subs	r3, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4825      	ldr	r0, [pc, #148]	@ (8000e40 <main+0x158>)
 8000daa:	f001 f9b9 	bl	8002120 <MLX90640_GetTa>
 8000dae:	f507 5394 	add.w	r3, r7, #4736	@ 0x1280
 8000db2:	f103 0308 	add.w	r3, r3, #8
 8000db6:	ed83 0a00 	vstr	s0, [r3]
		  mlx_tr = mlx_ta - MLX_TA_SHIFT;
 8000dba:	f507 5394 	add.w	r3, r7, #4736	@ 0x1280
 8000dbe:	f103 0308 	add.w	r3, r3, #8
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000dca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dce:	f507 5394 	add.w	r3, r7, #4736	@ 0x1280
 8000dd2:	f103 0304 	add.w	r3, r3, #4
 8000dd6:	edc3 7a00 	vstr	s15, [r3]
		  MLX90640_CalculateTo(mlx90640Frame, &mlx90640, mlx_emissivity, mlx_tr, mlx90640To);
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	3b10      	subs	r3, #16
 8000de0:	4a18      	ldr	r2, [pc, #96]	@ (8000e44 <main+0x15c>)
 8000de2:	f507 5194 	add.w	r1, r7, #4736	@ 0x1280
 8000de6:	f101 0104 	add.w	r1, r1, #4
 8000dea:	edd1 0a00 	vldr	s1, [r1]
 8000dee:	f507 5194 	add.w	r1, r7, #4736	@ 0x1280
 8000df2:	f101 0114 	add.w	r1, r1, #20
 8000df6:	ed91 0a00 	vldr	s0, [r1]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4810      	ldr	r0, [pc, #64]	@ (8000e40 <main+0x158>)
 8000dfe:	f000 fbff 	bl	8001600 <MLX90640_CalculateTo>
	  }

	  while (1) {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2140      	movs	r1, #64	@ 0x40
 8000e06:	4810      	ldr	r0, [pc, #64]	@ (8000e48 <main+0x160>)
 8000e08:	f003 fdc4 	bl	8004994 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000e0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e10:	f003 fb38 	bl	8004484 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2140      	movs	r1, #64	@ 0x40
 8000e18:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <main+0x160>)
 8000e1a:	f003 fdbb 	bl	8004994 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000e1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e22:	f003 fb2f 	bl	8004484 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e26:	bf00      	nop
 8000e28:	e7eb      	b.n	8000e02 <main+0x11a>
 8000e2a:	bf00      	nop
 8000e2c:	20000130 	.word	0x20000130
 8000e30:	20000078 	.word	0x20000078
 8000e34:	20000134 	.word	0x20000134
 8000e38:	3f733333 	.word	0x3f733333
 8000e3c:	20000138 	.word	0x20000138
 8000e40:	200007b8 	.word	0x200007b8
 8000e44:	20000e3c 	.word	0x20000e3c
 8000e48:	48000400 	.word	0x48000400

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	@ 0x50
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0318 	add.w	r3, r7, #24
 8000e56:	2238      	movs	r2, #56	@ 0x38
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 fd91 	bl	8006982 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e72:	f004 fce3 	bl	800583c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e80:	2340      	movs	r3, #64	@ 0x40
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0318 	add.w	r3, r7, #24
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fd89 	bl	80059a4 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e98:	f000 f924 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f005 f887 	bl	8005fc8 <HAL_RCC_ClockConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ec0:	f000 f910 	bl	80010e4 <Error_Handler>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3750      	adds	r7, #80	@ 0x50
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f44 <MX_I2C2_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f48 <MX_I2C2_Init+0x7c>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f06:	480e      	ldr	r0, [pc, #56]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000f08:	f003 fd5c 	bl	80049c4 <HAL_I2C_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f12:	f000 f8e7 	bl	80010e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000f1a:	f004 fbf7 	bl	800570c <HAL_I2CEx_ConfigAnalogFilter>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f24:	f000 f8de 	bl	80010e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <MX_I2C2_Init+0x74>)
 8000f2c:	f004 fc39 	bl	80057a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f000 f8d5 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000078 	.word	0x20000078
 8000f44:	40005800 	.word	0x40005800
 8000f48:	00503d58 	.word	0x00503d58

08000f4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f52:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc4 <MX_SPI1_Init+0x78>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f66:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f98:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_SPI1_Init+0x74>)
 8000fac:	f005 fc3e 	bl	800682c <HAL_SPI_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 f895 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000cc 	.word	0x200000cc
 8000fc4:	40013000 	.word	0x40013000

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b3e      	ldr	r3, [pc, #248]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b3b      	ldr	r3, [pc, #236]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff6:	4b38      	ldr	r3, [pc, #224]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a37      	ldr	r2, [pc, #220]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a31      	ldr	r2, [pc, #196]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <MX_GPIO_Init+0x110>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102a:	4a2b      	ldr	r2, [pc, #172]	@ (80010d8 <MX_GPIO_Init+0x110>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001032:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <MX_GPIO_Init+0x110>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_CS_GPIO_Port, RF_SPI_CS_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2110      	movs	r1, #16
 8001042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001046:	f003 fca5 	bl	8004994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_SPI_CS_GPIO_Port, MEM_SPI_CS_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4823      	ldr	r0, [pc, #140]	@ (80010dc <MX_GPIO_Init+0x114>)
 8001050:	f003 fca0 	bl	8004994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2140      	movs	r1, #64	@ 0x40
 8001058:	4821      	ldr	r0, [pc, #132]	@ (80010e0 <MX_GPIO_Init+0x118>)
 800105a:	f003 fc9b 	bl	8004994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_IRQ_IN_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_IN_Pin;
 800105e:	2308      	movs	r3, #8
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ_IN_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f003 fb0c 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_SPI_CS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_CS_Pin;
 8001078:	2310      	movs	r3, #16
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001092:	f003 fafd 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEM_SPI_CS_Pin */
  GPIO_InitStruct.Pin = MEM_SPI_CS_Pin;
 8001096:	2310      	movs	r3, #16
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	480b      	ldr	r0, [pc, #44]	@ (80010dc <MX_GPIO_Init+0x114>)
 80010ae:	f003 faef 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OUT_Pin */
  GPIO_InitStruct.Pin = LED_OUT_Pin;
 80010b2:	2340      	movs	r3, #64	@ 0x40
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OUT_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_GPIO_Init+0x118>)
 80010ca:	f003 fae1 	bl	8004690 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000400 	.word	0x48000400

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <Error_Handler+0x8>

080010f0 <MLX90640_DumpEE>:
static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
static int ValidateFrameData(uint16_t *frameData);
static int ValidateAuxData(uint16_t *auxData);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
 80010fc:	79f8      	ldrb	r0, [r7, #7]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8001104:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8001108:	f002 ff9c 	bl	8004044 <MLX90640_I2CRead>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <MLX90640_SynchFrame>:

int MLX90640_SynchFrame(uint8_t slaveAddr)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	82fb      	strh	r3, [r7, #22]
    uint16_t statusRegister;
    int error = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2230      	movs	r2, #48	@ 0x30
 800112c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001130:	4618      	mov	r0, r3
 8001132:	f002 ffc7 	bl	80040c4 <MLX90640_I2CWrite>
 8001136:	6138      	str	r0, [r7, #16]
    if(error == -MLX90640_I2C_NACK_ERROR)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113e:	d113      	bne.n	8001168 <MLX90640_SynchFrame+0x52>
    {
        return error;
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	e015      	b.n	8001170 <MLX90640_SynchFrame+0x5a>
    }
    
    while(dataReady == 0)
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 8001144:	f107 030e 	add.w	r3, r7, #14
 8001148:	79f8      	ldrb	r0, [r7, #7]
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001150:	f002 ff78 	bl	8004044 <MLX90640_I2CRead>
 8001154:	6138      	str	r0, [r7, #16]
        if(error != MLX90640_NO_ERROR)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MLX90640_SynchFrame+0x4a>
        {
            return error;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	e007      	b.n	8001170 <MLX90640_SynchFrame+0x5a>
        }    
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister); 
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	82fb      	strh	r3, [r7, #22]
    while(dataReady == 0)
 8001168:	8afb      	ldrh	r3, [r7, #22]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0ea      	beq.n	8001144 <MLX90640_SynchFrame+0x2e>
    }     
    
   return MLX90640_NO_ERROR;   
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <MLX90640_GetFrameData>:
    
    return MLX90640_NO_ERROR;    
}
    
int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0a6      	sub	sp, #152	@ 0x98
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    
    while(dataReady == 0)
 8001196:	e016      	b.n	80011c6 <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 8001198:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800119c:	79f8      	ldrb	r0, [r7, #7]
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011a4:	f002 ff4e 	bl	8004044 <MLX90640_I2CRead>
 80011a8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        if(error != MLX90640_NO_ERROR)
 80011ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <MLX90640_GetFrameData+0x42>
        {
            return error;
 80011b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011b8:	e093      	b.n	80012e2 <MLX90640_GetFrameData+0x16a>
        }    
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister); 
 80011ba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    while(dataReady == 0)
 80011c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0e4      	beq.n	8001198 <MLX90640_GetFrameData+0x20>
    }      
    
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2230      	movs	r2, #48	@ 0x30
 80011d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 ff74 	bl	80040c4 <MLX90640_I2CWrite>
 80011dc:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 80011e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d102      	bne.n	80011f0 <MLX90640_GetFrameData+0x78>
    {
        return error;
 80011ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011ee:	e078      	b.n	80012e2 <MLX90640_GetFrameData+0x16a>
    }
                     
    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData); 
 80011f0:	79f8      	ldrb	r0, [r7, #7]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011fc:	f002 ff22 	bl	8004044 <MLX90640_I2CRead>
 8001200:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 8001204:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <MLX90640_GetFrameData+0x9a>
    {
        return error;
 800120c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001210:	e067      	b.n	80012e2 <MLX90640_GetFrameData+0x16a>
    }                       
    
    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data); 
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	79f8      	ldrb	r0, [r7, #7]
 8001218:	2240      	movs	r2, #64	@ 0x40
 800121a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800121e:	f002 ff11 	bl	8004044 <MLX90640_I2CRead>
 8001222:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 8001226:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <MLX90640_GetFrameData+0xbc>
    {
        return error;
 800122e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001232:	e056      	b.n	80012e2 <MLX90640_GetFrameData+0x16a>
    }     
        
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8001234:	f107 038e 	add.w	r3, r7, #142	@ 0x8e
 8001238:	79f8      	ldrb	r0, [r7, #7]
 800123a:	2201      	movs	r2, #1
 800123c:	f248 010d 	movw	r1, #32781	@ 0x800d
 8001240:	f002 ff00 	bl	8004044 <MLX90640_I2CRead>
 8001244:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    frameData[832] = controlRegister1;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800124e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8001252:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 8001254:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 800125e:	f002 0201 	and.w	r2, r2, #1
 8001262:	b292      	uxth	r2, r2
 8001264:	801a      	strh	r2, [r3, #0]
    
    if(error != MLX90640_NO_ERROR)
 8001266:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <MLX90640_GetFrameData+0xfc>
    {
        return error;
 800126e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001272:	e036      	b.n	80012e2 <MLX90640_GetFrameData+0x16a>
    }
    
    error = ValidateAuxData(data);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f867 	bl	800134c <ValidateAuxData>
 800127e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == MLX90640_NO_ERROR)
 8001282:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001286:	2b00      	cmp	r3, #0
 8001288:	d11b      	bne.n	80012c2 <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8001290:	e013      	b.n	80012ba <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 8001292:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001296:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 800129a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800129e:	0052      	lsls	r2, r2, #1
 80012a0:	6839      	ldr	r1, [r7, #0]
 80012a2:	440a      	add	r2, r1
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	3398      	adds	r3, #152	@ 0x98
 80012a8:	443b      	add	r3, r7
 80012aa:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 80012ae:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 80012b0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80012b4:	3301      	adds	r3, #1
 80012b6:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80012ba:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80012be:	2b3f      	cmp	r3, #63	@ 0x3f
 80012c0:	d9e7      	bls.n	8001292 <MLX90640_GetFrameData+0x11a>
        }
    }        
    
    error = ValidateFrameData(frameData);
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f000 f811 	bl	80012ea <ValidateFrameData>
 80012c8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if (error != MLX90640_NO_ERROR)
 80012cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <MLX90640_GetFrameData+0x162>
    {
        return error;
 80012d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012d8:	e003      	b.n	80012e2 <MLX90640_GetFrameData+0x16a>
    }
    
    return frameData[833];    
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 80012e0:	881b      	ldrh	r3, [r3, #0]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3798      	adds	r7, #152	@ 0x98
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
    
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	e01c      	b.n	8001336 <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800130a:	4293      	cmp	r3, r2
 800130c:	d10d      	bne.n	800132a <ValidateFrameData+0x40>
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	b29b      	uxth	r3, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d102      	bne.n	800132a <ValidateFrameData+0x40>
 8001324:	f06f 0307 	mvn.w	r3, #7
 8001328:	e00a      	b.n	8001340 <ValidateFrameData+0x56>
        line = line + 1;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	3301      	adds	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	3320      	adds	r3, #32
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800133c:	dbde      	blt.n	80012fc <ValidateFrameData+0x12>
    }    
        
    return MLX90640_NO_ERROR;    
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	@ 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    
    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;    
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800135c:	4293      	cmp	r3, r2
 800135e:	d102      	bne.n	8001366 <ValidateAuxData+0x1a>
 8001360:	f06f 0307 	mvn.w	r3, #7
 8001364:	e07e      	b.n	8001464 <ValidateAuxData+0x118>
    
    for(int i=8; i<19; i++)
 8001366:	2308      	movs	r3, #8
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e00e      	b.n	800138a <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800137a:	4293      	cmp	r3, r2
 800137c:	d102      	bne.n	8001384 <ValidateAuxData+0x38>
 800137e:	f06f 0307 	mvn.w	r3, #7
 8001382:	e06f      	b.n	8001464 <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	3301      	adds	r3, #1
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b12      	cmp	r3, #18
 800138e:	dded      	ble.n	800136c <ValidateAuxData+0x20>
    }
    
    for(int i=20; i<23; i++)
 8001390:	2314      	movs	r3, #20
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e00e      	b.n	80013b4 <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d102      	bne.n	80013ae <ValidateAuxData+0x62>
 80013a8:	f06f 0307 	mvn.w	r3, #7
 80013ac:	e05a      	b.n	8001464 <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b16      	cmp	r3, #22
 80013b8:	dded      	ble.n	8001396 <ValidateAuxData+0x4a>
    }
    
    for(int i=24; i<33; i++)
 80013ba:	2318      	movs	r3, #24
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e00e      	b.n	80013de <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d102      	bne.n	80013d8 <ValidateAuxData+0x8c>
 80013d2:	f06f 0307 	mvn.w	r3, #7
 80013d6:	e045      	b.n	8001464 <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	dded      	ble.n	80013c0 <ValidateAuxData+0x74>
    }
    
    for(int i=40; i<51; i++)
 80013e4:	2328      	movs	r3, #40	@ 0x28
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	e00e      	b.n	8001408 <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d102      	bne.n	8001402 <ValidateAuxData+0xb6>
 80013fc:	f06f 0307 	mvn.w	r3, #7
 8001400:	e030      	b.n	8001464 <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	3301      	adds	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b32      	cmp	r3, #50	@ 0x32
 800140c:	dded      	ble.n	80013ea <ValidateAuxData+0x9e>
    }
    
    for(int i=52; i<55; i++)
 800140e:	2334      	movs	r3, #52	@ 0x34
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e00e      	b.n	8001432 <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001422:	4293      	cmp	r3, r2
 8001424:	d102      	bne.n	800142c <ValidateAuxData+0xe0>
 8001426:	f06f 0307 	mvn.w	r3, #7
 800142a:	e01b      	b.n	8001464 <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b36      	cmp	r3, #54	@ 0x36
 8001436:	dded      	ble.n	8001414 <ValidateAuxData+0xc8>
    }
    
    for(int i=56; i<64; i++)
 8001438:	2338      	movs	r3, #56	@ 0x38
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	e00e      	b.n	800145c <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800144c:	4293      	cmp	r3, r2
 800144e:	d102      	bne.n	8001456 <ValidateAuxData+0x10a>
 8001450:	f06f 0307 	mvn.w	r3, #7
 8001454:	e006      	b.n	8001464 <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001460:	dded      	ble.n	800143e <ValidateAuxData+0xf2>
    }
    
    return MLX90640_NO_ERROR;
 8001462:	2300      	movs	r3, #0
    
}
 8001464:	4618      	mov	r0, r3
 8001466:	3724      	adds	r7, #36	@ 0x24
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <MLX90640_ExtractParameters>:
    
int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    int error = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fee1 	bl	8002248 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 ff09 	bl	80022a0 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 ff91 	bl	80023b8 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 ff9f 	bl	80023dc <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 ffb7 	bl	8002414 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 ffcb 	bl	8002444 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 ffe5 	bl	8002480 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f002 fab1 	bl	8003a20 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f001 f899 	bl	80025f8 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f001 fc1d 	bl	8002d08 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f001 fe55 	bl	8003180 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f002 f899 	bl	8003610 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 80014de:	6839      	ldr	r1, [r7, #0]
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f002 fbd9 	bl	8003c98 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f002 fc75 	bl	8003dd8 <ExtractDeviatingPixels>
 80014ee:	60f8      	str	r0, [r7, #12]
    
    return error;
 80014f0:	68fb      	ldr	r3, [r7, #12]

}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <MLX90640_SetResolution>:

//------------------------------------------------------------------------------

int MLX90640_SetResolution(uint8_t slaveAddr, uint8_t resolution)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	460a      	mov	r2, r1
 8001504:	71fb      	strb	r3, [r7, #7]
 8001506:	4613      	mov	r3, r2
 8001508:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    uint16_t value;
    int error;
    
    //value = (resolution & 0x03) << 10;
    value = ((uint16_t)resolution << MLX90640_CTRL_RESOLUTION_SHIFT);
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	b29b      	uxth	r3, r3
 800150e:	029b      	lsls	r3, r3, #10
 8001510:	817b      	strh	r3, [r7, #10]
    value &= ~MLX90640_CTRL_RESOLUTION_MASK;
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001518:	817b      	strh	r3, [r7, #10]
    
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	79f8      	ldrb	r0, [r7, #7]
 8001520:	2201      	movs	r2, #1
 8001522:	f248 010d 	movw	r1, #32781	@ 0x800d
 8001526:	f002 fd8d 	bl	8004044 <MLX90640_I2CRead>
 800152a:	60f8      	str	r0, [r7, #12]
    
    if(error == MLX90640_NO_ERROR)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10e      	bne.n	8001550 <MLX90640_SetResolution+0x56>
    {
        value = (controlRegister1 & MLX90640_CTRL_RESOLUTION_MASK) | value;
 8001532:	893b      	ldrh	r3, [r7, #8]
 8001534:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001538:	b29a      	uxth	r2, r3
 800153a:	897b      	ldrh	r3, [r7, #10]
 800153c:	4313      	orrs	r3, r2
 800153e:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);        
 8001540:	897a      	ldrh	r2, [r7, #10]
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f248 010d 	movw	r1, #32781	@ 0x800d
 8001548:	4618      	mov	r0, r3
 800154a:	f002 fdbb 	bl	80040c4 <MLX90640_I2CWrite>
 800154e:	60f8      	str	r0, [r7, #12]
    }    
    
    return error;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	460a      	mov	r2, r1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	4613      	mov	r3, r2
 8001568:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    uint16_t value;
    int error;
    
    //value = (refreshRate & 0x07)<<7;
    value = ((uint16_t)refreshRate << MLX90640_CTRL_REFRESH_SHIFT);
 800156a:	79bb      	ldrb	r3, [r7, #6]
 800156c:	b29b      	uxth	r3, r3
 800156e:	01db      	lsls	r3, r3, #7
 8001570:	817b      	strh	r3, [r7, #10]
    value &= ~MLX90640_CTRL_REFRESH_MASK;
 8001572:	897b      	ldrh	r3, [r7, #10]
 8001574:	f403 7360 	and.w	r3, r3, #896	@ 0x380
 8001578:	817b      	strh	r3, [r7, #10]
    
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	79f8      	ldrb	r0, [r7, #7]
 8001580:	2201      	movs	r2, #1
 8001582:	f248 010d 	movw	r1, #32781	@ 0x800d
 8001586:	f002 fd5d 	bl	8004044 <MLX90640_I2CRead>
 800158a:	60f8      	str	r0, [r7, #12]
    if(error == MLX90640_NO_ERROR)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10e      	bne.n	80015b0 <MLX90640_SetRefreshRate+0x56>
    {
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
 8001592:	893b      	ldrh	r3, [r7, #8]
 8001594:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 8001598:	b29a      	uxth	r2, r3
 800159a:	897b      	ldrh	r3, [r7, #10]
 800159c:	4313      	orrs	r3, r2
 800159e:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 80015a0:	897a      	ldrh	r2, [r7, #10]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f248 010d 	movw	r1, #32781	@ 0x800d
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fd8b 	bl	80040c4 <MLX90640_I2CWrite>
 80015ae:	60f8      	str	r0, [r7, #12]
    }    
    
    return error;
 80015b0:	68fb      	ldr	r3, [r7, #12]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    uint16_t value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	79f8      	ldrb	r0, [r7, #7]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f248 010d 	movw	r1, #32781	@ 0x800d
 80015d0:	f002 fd38 	bl	8004044 <MLX90640_I2CRead>
 80015d4:	60f8      	str	r0, [r7, #12]
    
    if(error == 0)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10b      	bne.n	80015f4 <MLX90640_SetChessMode+0x3a>
    {
        value = (controlRegister1 | MLX90640_CTRL_MEAS_MODE_MASK);
 80015dc:	893b      	ldrh	r3, [r7, #8]
 80015de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015e2:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);        
 80015e4:	897a      	ldrh	r2, [r7, #10]
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f248 010d 	movw	r1, #32781	@ 0x800d
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 fd69 	bl	80040c4 <MLX90640_I2CWrite>
 80015f2:	60f8      	str	r0, [r7, #12]
    }    
    
    return error;
 80015f4:	68fb      	ldr	r3, [r7, #12]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 8001600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001604:	b0a0      	sub	sp, #128	@ 0x80
 8001606:	af00      	add	r7, sp, #0
 8001608:	6178      	str	r0, [r7, #20]
 800160a:	6139      	str	r1, [r7, #16]
 800160c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001610:	edc7 0a02 	vstr	s1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;
    
    subPage = frameData[833];
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	@ 0x682
 800161c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 8001620:	6939      	ldr	r1, [r7, #16]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f000 fd04 	bl	8002030 <MLX90640_GetVdd>
 8001628:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
    ta = MLX90640_GetTa(frameData, params);
 800162c:	6939      	ldr	r1, [r7, #16]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f000 fd76 	bl	8002120 <MLX90640_GetTa>
 8001634:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
    
    ta4 = (ta + 273.15);
 8001638:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800163a:	f7fe ff51 	bl	80004e0 <__aeabi_f2d>
 800163e:	a3e6      	add	r3, pc, #920	@ (adr r3, 80019d8 <MLX90640_CalculateTo+0x3d8>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe fdee 	bl	8000224 <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa96 	bl	8000b80 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	667b      	str	r3, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 8001658:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800165c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001660:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 8001664:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001668:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800166c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    tr4 = (tr + 273.15);
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f7fe ff35 	bl	80004e0 <__aeabi_f2d>
 8001676:	a3d8      	add	r3, pc, #864	@ (adr r3, 80019d8 <MLX90640_CalculateTo+0x3d8>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe fdd2 	bl	8000224 <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa7a 	bl	8000b80 <__aeabi_d2f>
 800168c:	4603      	mov	r3, r0
 800168e:	663b      	str	r3, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 8001690:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001694:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001698:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 800169c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80016a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016a4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 80016a8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80016ac:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80016b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016bc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80016c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    
    ktaScale = POW2(params->ktaScale);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	@ 0xf4c
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fee4 	bl	800049c <__aeabi_ui2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	ec43 2b11 	vmov	d1, r2, r3
 80016dc:	ed9f 0bb8 	vldr	d0, [pc, #736]	@ 80019c0 <MLX90640_CalculateTo+0x3c0>
 80016e0:	f005 f982 	bl	80069e8 <pow>
 80016e4:	ec53 2b10 	vmov	r2, r3, d0
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa48 	bl	8000b80 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    kvScale = POW2(params->kvScale);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016fa:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fecc 	bl	800049c <__aeabi_ui2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	ec43 2b11 	vmov	d1, r2, r3
 800170c:	ed9f 0bac 	vldr	d0, [pc, #688]	@ 80019c0 <MLX90640_CalculateTo+0x3c0>
 8001710:	f005 f96a 	bl	80069e8 <pow>
 8001714:	ec53 2b10 	vmov	r2, r3, d0
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa30 	bl	8000b80 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	657b      	str	r3, [r7, #84]	@ 0x54
    alphaScale = POW2(params->alphaScale);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f893 364a 	ldrb.w	r3, [r3, #1610]	@ 0x64a
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe feb6 	bl	800049c <__aeabi_ui2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	ec43 2b11 	vmov	d1, r2, r3
 8001738:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 80019c0 <MLX90640_CalculateTo+0x3c0>
 800173c:	f005 f954 	bl	80069e8 <pow>
 8001740:	ec53 2b10 	vmov	r2, r3, d0
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fa1a 	bl	8000b80 <__aeabi_d2f>
 800174c:	4603      	mov	r3, r0
 800174e:	653b      	str	r3, [r7, #80]	@ 0x50
    
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001756:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80019d0 <MLX90640_CalculateTo+0x3d0>
 800175a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800176a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176e:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 8001772:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001776:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001798:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 800179c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 80017ac:	461a      	mov	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ce:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    
//------------------------- Gain calculation -----------------------------------    
    
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  
//------------------------- To calculation -------------------------------------    
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800180a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    
    irDataCP[0] = (int16_t)frameData[776] * gain;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	b21b      	sxth	r3, r3
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001820:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b21b      	sxth	r3, r3
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 800184a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe47 	bl	80004e0 <__aeabi_f2d>
 8001852:	4604      	mov	r4, r0
 8001854:	460d      	mov	r5, r1
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800185c:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	@ 0x258
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	edd3 6a08 	vldr	s13, [r3, #32]
 800186e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001872:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 8001876:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188a:	ee17 0a90 	vmov	r0, s15
 800188e:	f7fe fe27 	bl	80004e0 <__aeabi_f2d>
 8001892:	4680      	mov	r8, r0
 8001894:	4689      	mov	r9, r1
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe20 	bl	80004e0 <__aeabi_f2d>
 80018a0:	4682      	mov	sl, r0
 80018a2:	468b      	mov	fp, r1
 80018a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80018a6:	f7fe fe1b 	bl	80004e0 <__aeabi_f2d>
 80018aa:	a347      	add	r3, pc, #284	@ (adr r3, 80019c8 <MLX90640_CalculateTo+0x3c8>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fcb6 	bl	8000220 <__aeabi_dsub>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4650      	mov	r0, sl
 80018ba:	4659      	mov	r1, fp
 80018bc:	f7fe fe68 	bl	8000590 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <MLX90640_CalculateTo+0x3d4>)
 80018ce:	f7fe fca9 	bl	8000224 <__adddf3>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4640      	mov	r0, r8
 80018d8:	4649      	mov	r1, r9
 80018da:	f7fe fe59 	bl	8000590 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fc9b 	bl	8000220 <__aeabi_dsub>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f945 	bl	8000b80 <__aeabi_d2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if( mode ==  params->calibrationModeEE)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001900:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001904:	429a      	cmp	r2, r3
 8001906:	d16b      	bne.n	80019e0 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fde8 	bl	80004e0 <__aeabi_f2d>
 8001910:	4604      	mov	r4, r0
 8001912:	460d      	mov	r5, r1
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	edd3 6a08 	vldr	s13, [r3, #32]
 800192c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001930:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 8001934:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001948:	ee17 0a90 	vmov	r0, s15
 800194c:	f7fe fdc8 	bl	80004e0 <__aeabi_f2d>
 8001950:	4680      	mov	r8, r0
 8001952:	4689      	mov	r9, r1
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdc1 	bl	80004e0 <__aeabi_f2d>
 800195e:	4682      	mov	sl, r0
 8001960:	468b      	mov	fp, r1
 8001962:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001964:	f7fe fdbc 	bl	80004e0 <__aeabi_f2d>
 8001968:	a317      	add	r3, pc, #92	@ (adr r3, 80019c8 <MLX90640_CalculateTo+0x3c8>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fc57 	bl	8000220 <__aeabi_dsub>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4650      	mov	r0, sl
 8001978:	4659      	mov	r1, fp
 800197a:	f7fe fe09 	bl	8000590 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <MLX90640_CalculateTo+0x3d4>)
 800198c:	f7fe fc4a 	bl	8000224 <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4640      	mov	r0, r8
 8001996:	4649      	mov	r1, r9
 8001998:	f7fe fdfa 	bl	8000590 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fc3c 	bl	8000220 <__aeabi_dsub>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f8e6 	bl	8000b80 <__aeabi_d2f>
 80019b4:	4603      	mov	r3, r0
 80019b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80019b8:	e071      	b.n	8001a9e <MLX90640_CalculateTo+0x49e>
 80019ba:	bf00      	nop
 80019bc:	f3af 8000 	nop.w
 80019c0:	00000000 	.word	0x00000000
 80019c4:	40000000 	.word	0x40000000
 80019c8:	66666666 	.word	0x66666666
 80019cc:	400a6666 	.word	0x400a6666
 80019d0:	42200000 	.word	0x42200000
 80019d4:	3ff00000 	.word	0x3ff00000
 80019d8:	66666666 	.word	0x66666666
 80019dc:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80019e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd7c 	bl	80004e0 <__aeabi_f2d>
 80019e8:	4604      	mov	r4, r0
 80019ea:	460d      	mov	r5, r1
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019f2:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a04:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 8001a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a12:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001a16:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 8001a1a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2e:	ee17 0a90 	vmov	r0, s15
 8001a32:	f7fe fd55 	bl	80004e0 <__aeabi_f2d>
 8001a36:	4680      	mov	r8, r0
 8001a38:	4689      	mov	r9, r1
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd4e 	bl	80004e0 <__aeabi_f2d>
 8001a44:	4682      	mov	sl, r0
 8001a46:	468b      	mov	fp, r1
 8001a48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001a4a:	f7fe fd49 	bl	80004e0 <__aeabi_f2d>
 8001a4e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001b48 <MLX90640_CalculateTo+0x548>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fbe4 	bl	8000220 <__aeabi_dsub>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4650      	mov	r0, sl
 8001a5e:	4659      	mov	r1, fp
 8001a60:	f7fe fd96 	bl	8000590 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <MLX90640_CalculateTo+0x550>)
 8001a72:	f7fe fbd7 	bl	8000224 <__adddf3>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4640      	mov	r0, r8
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	f7fe fd87 	bl	8000590 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4620      	mov	r0, r4
 8001a88:	4629      	mov	r1, r5
 8001a8a:	f7fe fbc9 	bl	8000220 <__aeabi_dsub>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f873 	bl	8000b80 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001aa2:	e2b5      	b.n	8002010 <MLX90640_CalculateTo+0xa10>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 8001aa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da00      	bge.n	8001aac <MLX90640_CalculateTo+0x4ac>
 8001aaa:	331f      	adds	r3, #31
 8001aac:	115b      	asrs	r3, r3, #5
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da00      	bge.n	8001ab8 <MLX90640_CalculateTo+0x4b8>
 8001ab6:	333f      	adds	r3, #63	@ 0x3f
 8001ab8:	119b      	asrs	r3, r3, #6
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 8001ac8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	bfb8      	it	lt
 8001ad2:	425b      	neglt	r3, r3
 8001ad4:	b25a      	sxtb	r2, r3
 8001ad6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001ada:	4053      	eors	r3, r2
 8001adc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8001ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da00      	bge.n	8001aea <MLX90640_CalculateTo+0x4ea>
 8001ae8:	3303      	adds	r3, #3
 8001aea:	109b      	asrs	r3, r3, #2
 8001aec:	461a      	mov	r2, r3
 8001aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af0:	3303      	adds	r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da00      	bge.n	8001af8 <MLX90640_CalculateTo+0x4f8>
 8001af6:	3303      	adds	r3, #3
 8001af8:	109b      	asrs	r3, r3, #2
 8001afa:	425b      	negs	r3, r3
 8001afc:	441a      	add	r2, r3
 8001afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b00:	3301      	adds	r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da00      	bge.n	8001b08 <MLX90640_CalculateTo+0x508>
 8001b06:	3303      	adds	r3, #3
 8001b08:	109b      	asrs	r3, r3, #2
 8001b0a:	441a      	add	r2, r3
 8001b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da00      	bge.n	8001b14 <MLX90640_CalculateTo+0x514>
 8001b12:	3303      	adds	r3, #3
 8001b14:	109b      	asrs	r3, r3, #2
 8001b16:	425b      	negs	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	f1c3 0301 	rsb	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	fb12 f303 	smulbb	r3, r2, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        
        if(mode == 0)
 8001b32:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern; 
 8001b3a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001b3e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8001b42:	e00b      	b.n	8001b5c <MLX90640_CalculateTo+0x55c>
 8001b44:	f3af 8000 	nop.w
 8001b48:	66666666 	.word	0x66666666
 8001b4c:	400a6666 	.word	0x400a6666
 8001b50:	3ff00000 	.word	0x3ff00000
        }
        else 
        {
          pattern = chessPattern; 
 8001b54:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001b58:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        }               
        
        if(pattern == frameData[833])
 8001b5c:	f997 307b 	ldrsb.w	r3, [r7, #123]	@ 0x7b
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	f202 6282 	addw	r2, r2, #1666	@ 0x682
 8001b66:	8812      	ldrh	r2, [r2, #0]
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	f040 824e 	bne.w	800200a <MLX90640_CalculateTo+0xa0a>
        {    
            irData = (int16_t)frameData[pixelNumber] * gain;
 8001b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4413      	add	r3, r2
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            
            kta = params->kta[pixelNumber]/ktaScale;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b92:	4413      	add	r3, r2
 8001b94:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 8001b98:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ba4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bac:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            kv = params->kv[pixelNumber]/kvScale;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8001bba:	f993 3000 	ldrsb.w	r3, [r3]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bc6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bce:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 8001bd2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001bd4:	f7fe fc84 	bl	80004e0 <__aeabi_f2d>
 8001bd8:	4604      	mov	r4, r0
 8001bda:	460d      	mov	r5, r1
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001be0:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001bf8:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8001bfc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001c00:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	ee17 0a90 	vmov	r0, s15
 8001c18:	f7fe fc62 	bl	80004e0 <__aeabi_f2d>
 8001c1c:	4680      	mov	r8, r0
 8001c1e:	4689      	mov	r9, r1
 8001c20:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c22:	f7fe fc5d 	bl	80004e0 <__aeabi_f2d>
 8001c26:	4682      	mov	sl, r0
 8001c28:	468b      	mov	fp, r1
 8001c2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001c2c:	f7fe fc58 	bl	80004e0 <__aeabi_f2d>
 8001c30:	a3c4      	add	r3, pc, #784	@ (adr r3, 8001f44 <MLX90640_CalculateTo+0x944>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe faf3 	bl	8000220 <__aeabi_dsub>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4650      	mov	r0, sl
 8001c40:	4659      	mov	r1, fp
 8001c42:	f7fe fca5 	bl	8000590 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4bbb      	ldr	r3, [pc, #748]	@ (8001f40 <MLX90640_CalculateTo+0x940>)
 8001c54:	f7fe fae6 	bl	8000224 <__adddf3>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4640      	mov	r0, r8
 8001c5e:	4649      	mov	r1, r9
 8001c60:	f7fe fc96 	bl	8000590 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe fad8 	bl	8000220 <__aeabi_dsub>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7fe ff82 	bl	8000b80 <__aeabi_d2f>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
            
            if(mode !=  params->calibrationModeEE)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c86:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d023      	beq.n	8001cd6 <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c94:	ed93 7a99 	vldr	s14, [r3, #612]	@ 0x264
 8001c98:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cac:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001cb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cba:	edd3 6a98 	vldr	s13, [r3, #608]	@ 0x260
 8001cbe:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            }                       
    
            irData = irData - params->tgc * irDataCP[subPage];
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001cdc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	3380      	adds	r3, #128	@ 0x80
 8001ce4:	443b      	add	r3, r7
 8001ce6:	3b54      	subs	r3, #84	@ 0x54
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf0:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            irData = irData / emissivity;
 8001cfc:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001d00:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d08:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8001d0c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001d0e:	f7fe fbe7 	bl	80004e0 <__aeabi_f2d>
 8001d12:	a387      	add	r3, pc, #540	@ (adr r3, 8001f30 <MLX90640_CalculateTo+0x930>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fc3a 	bl	8000590 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4614      	mov	r4, r2
 8001d22:	461d      	mov	r5, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d28:	3324      	adds	r3, #36	@ 0x24
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	885b      	ldrh	r3, [r3, #2]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fbc3 	bl	80004bc <__aeabi_i2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fd51 	bl	80007e4 <__aeabi_ddiv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff19 	bl	8000b80 <__aeabi_d2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001d58:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001d5c:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8001d60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d70:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d78:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
                        
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8001d7c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001d80:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d84:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001d90:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001d94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d98:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
 8001da8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001daa:	f7fe fb99 	bl	80004e0 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ec43 2b10 	vmov	d0, r2, r3
 8001db6:	f004 fe87 	bl	8006ac8 <sqrt>
 8001dba:	eeb0 7a40 	vmov.f32	s14, s0
 8001dbe:	eef0 7a60 	vmov.f32	s15, s1
 8001dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc6:	eef0 0a67 	vmov.f32	s1, s15
 8001dca:	f004 fe7d 	bl	8006ac8 <sqrt>
 8001dce:	ec55 4b10 	vmov	r4, r5, d0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fb82 	bl	80004e0 <__aeabi_f2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f7fe fbd4 	bl	8000590 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe fec6 	bl	8000b80 <__aeabi_d2f>
 8001df4:	4603      	mov	r3, r0
 8001df6:	63bb      	str	r3, [r7, #56]	@ 0x38
            
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
 8001df8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001dfa:	f7fe fb71 	bl	80004e0 <__aeabi_f2d>
 8001dfe:	4604      	mov	r4, r0
 8001e00:	460d      	mov	r5, r1
 8001e02:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e04:	f7fe fb6c 	bl	80004e0 <__aeabi_f2d>
 8001e08:	4680      	mov	r8, r0
 8001e0a:	4689      	mov	r9, r1
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb65 	bl	80004e0 <__aeabi_f2d>
 8001e16:	a348      	add	r3, pc, #288	@ (adr r3, 8001f38 <MLX90640_CalculateTo+0x938>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fbb8 	bl	8000590 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	4945      	ldr	r1, [pc, #276]	@ (8001f40 <MLX90640_CalculateTo+0x940>)
 8001e2a:	f7fe f9f9 	bl	8000220 <__aeabi_dsub>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4640      	mov	r0, r8
 8001e34:	4649      	mov	r1, r9
 8001e36:	f7fe fbab 	bl	8000590 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4690      	mov	r8, r2
 8001e40:	4699      	mov	r9, r3
 8001e42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e44:	f7fe fb4c 	bl	80004e0 <__aeabi_f2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4640      	mov	r0, r8
 8001e4e:	4649      	mov	r1, r9
 8001e50:	f7fe f9e8 	bl	8000224 <__adddf3>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4620      	mov	r0, r4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7fe fcc2 	bl	80007e4 <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4614      	mov	r4, r2
 8001e66:	461d      	mov	r5, r3
 8001e68:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001e6a:	f7fe fb39 	bl	80004e0 <__aeabi_f2d>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe f9d5 	bl	8000224 <__adddf3>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	ec43 2b17 	vmov	d7, r2, r3
 8001e82:	eeb0 0a47 	vmov.f32	s0, s14
 8001e86:	eef0 0a67 	vmov.f32	s1, s15
 8001e8a:	f004 fe1d 	bl	8006ac8 <sqrt>
 8001e8e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e92:	eef0 7a60 	vmov.f32	s15, s1
 8001e96:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9a:	eef0 0a67 	vmov.f32	s1, s15
 8001e9e:	f004 fe13 	bl	8006ac8 <sqrt>
 8001ea2:	ec51 0b10 	vmov	r0, r1, d0
 8001ea6:	a324      	add	r3, pc, #144	@ (adr r3, 8001f38 <MLX90640_CalculateTo+0x938>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe f9b8 	bl	8000220 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe62 	bl	8000b80 <__aeabi_d2f>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	637b      	str	r3, [r7, #52]	@ 0x34
                    
            if(To < params->ct[1])
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ece:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	d503      	bpl.n	8001ee4 <MLX90640_CalculateTo+0x8e4>
            {
                range = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001ee2:	e036      	b.n	8001f52 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[2])   
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	d503      	bpl.n	8001f08 <MLX90640_CalculateTo+0x908>
            {
                range = 1;            
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001f06:	e024      	b.n	8001f52 <MLX90640_CalculateTo+0x952>
            }   
            else if(To < params->ct[3])
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001f1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f22:	d513      	bpl.n	8001f4c <MLX90640_CalculateTo+0x94c>
            {
                range = 2;            
 8001f24:	2302      	movs	r3, #2
 8001f26:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001f2a:	e012      	b.n	8001f52 <MLX90640_CalculateTo+0x952>
 8001f2c:	f3af 8000 	nop.w
 8001f30:	a0b5ed8d 	.word	0xa0b5ed8d
 8001f34:	3eb0c6f7 	.word	0x3eb0c6f7
 8001f38:	66666666 	.word	0x66666666
 8001f3c:	40711266 	.word	0x40711266
 8001f40:	3ff00000 	.word	0x3ff00000
 8001f44:	66666666 	.word	0x66666666
 8001f48:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;            
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
            }      
            
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 8001f52:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3380      	adds	r3, #128	@ 0x80
 8001f5a:	443b      	add	r3, r7
 8001f5c:	3b64      	subs	r3, #100	@ 0x64
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6a:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	330a      	adds	r3, #10
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	edd3 6a00 	vldr	s13, [r3]
 8001f7c:	f997 207a 	ldrsb.w	r2, [r7, #122]	@ 0x7a
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	3220      	adds	r2, #32
 8001f84:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f90:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8001f94:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb8:	ee17 0a90 	vmov	r0, s15
 8001fbc:	f7fe fa90 	bl	80004e0 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	ec43 2b10 	vmov	d0, r2, r3
 8001fc8:	f004 fd7e 	bl	8006ac8 <sqrt>
 8001fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd0:	eef0 7a60 	vmov.f32	s15, s1
 8001fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd8:	eef0 0a67 	vmov.f32	s1, s15
 8001fdc:	f004 fd74 	bl	8006ac8 <sqrt>
 8001fe0:	ec51 0b10 	vmov	r0, r1, d0
 8001fe4:	a310      	add	r3, pc, #64	@ (adr r3, 8002028 <MLX90640_CalculateTo+0xa28>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe f919 	bl	8000220 <__aeabi_dsub>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fdc3 	bl	8000b80 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
                        
            result[pixelNumber] = To;
 8001ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002008:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 800200a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800200c:	3301      	adds	r3, #1
 800200e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002010:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002012:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002016:	f6ff ad45 	blt.w	8001aa4 <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	3780      	adds	r7, #128	@ 0x80
 8002020:	46bd      	mov	sp, r7
 8002022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002026:	bf00      	nop
 8002028:	66666666 	.word	0x66666666
 800202c:	40711266 	.word	0x40711266

08002030 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;  
    
    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;   
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	0a9b      	lsrs	r3, r3, #10
 8002044:	b29b      	uxth	r3, r3
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa22 	bl	800049c <__aeabi_ui2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	ec43 2b11 	vmov	d1, r2, r3
 8002060:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002110 <MLX90640_GetVdd+0xe0>
 8002064:	f004 fcc0 	bl	80069e8 <pow>
 8002068:	ec55 4b10 	vmov	r4, r5, d0
 800206c:	8afb      	ldrh	r3, [r7, #22]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa14 	bl	800049c <__aeabi_ui2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	ec43 2b11 	vmov	d1, r2, r3
 800207c:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8002110 <MLX90640_GetVdd+0xe0>
 8002080:	f004 fcb2 	bl	80069e8 <pow>
 8002084:	ec53 2b10 	vmov	r2, r3, d0
 8002088:	4620      	mov	r0, r4
 800208a:	4629      	mov	r1, r5
 800208c:	f7fe fbaa 	bl	80007e4 <__aeabi_ddiv>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd72 	bl	8000b80 <__aeabi_d2f>
 800209c:	4603      	mov	r3, r0
 800209e:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f203 6354 	addw	r3, r3, #1620	@ 0x654
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020de:	ee16 0a90 	vmov	r0, s13
 80020e2:	f7fe f9fd 	bl	80004e0 <__aeabi_f2d>
 80020e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8002118 <MLX90640_GetVdd+0xe8>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe f89a 	bl	8000224 <__adddf3>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fd42 	bl	8000b80 <__aeabi_d2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	60fb      	str	r3, [r7, #12]
    
    return vdd;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	ee07 3a90 	vmov	s15, r3
}
 8002106:	eeb0 0a67 	vmov.f32	s0, s15
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bdb0      	pop	{r4, r5, r7, pc}
 8002110:	00000000 	.word	0x00000000
 8002114:	40000000 	.word	0x40000000
 8002118:	66666666 	.word	0x66666666
 800211c:	400a6666 	.word	0x400a6666

08002120 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8002120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ff7e 	bl	8002030 <MLX90640_GetVdd>
 8002134:	ed87 0a05 	vstr	s0, [r7, #20]
    
    ptat = (int16_t)frameData[800];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	827b      	strh	r3, [r7, #18]
    
    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 8002142:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800214e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b21b      	sxth	r3, r3
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002176:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800217e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002240 <MLX90640_GetTa+0x120>
 8002182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002186:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7fe f9a8 	bl	80004e0 <__aeabi_f2d>
 8002190:	4604      	mov	r4, r0
 8002192:	460d      	mov	r5, r1
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f9a1 	bl	80004e0 <__aeabi_f2d>
 800219e:	4680      	mov	r8, r0
 80021a0:	4689      	mov	r9, r1
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7fe f99c 	bl	80004e0 <__aeabi_f2d>
 80021a8:	a323      	add	r3, pc, #140	@ (adr r3, 8002238 <MLX90640_GetTa+0x118>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f837 	bl	8000220 <__aeabi_dsub>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4640      	mov	r0, r8
 80021b8:	4649      	mov	r1, r9
 80021ba:	f7fe f9e9 	bl	8000590 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <MLX90640_GetTa+0x124>)
 80021cc:	f7fe f82a 	bl	8000224 <__adddf3>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe fb04 	bl	80007e4 <__aeabi_ddiv>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4614      	mov	r4, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	899b      	ldrh	r3, [r3, #12]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f967 	bl	80004bc <__aeabi_i2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4620      	mov	r0, r4
 80021f4:	4629      	mov	r1, r5
 80021f6:	f7fe f813 	bl	8000220 <__aeabi_dsub>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fcbd 	bl	8000b80 <__aeabi_d2f>
 8002206:	4603      	mov	r3, r0
 8002208:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002210:	edd7 6a02 	vldr	s13, [r7, #8]
 8002214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002218:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800221c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002220:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	ee07 3a90 	vmov	s15, r3
}
 800222a:	eeb0 0a67 	vmov.f32	s0, s15
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002236:	bf00      	nop
 8002238:	66666666 	.word	0x66666666
 800223c:	400a6666 	.word	0x400a6666
 8002240:	48800000 	.word	0x48800000
 8002244:	3ff00000 	.word	0x3ff00000

08002248 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
    int8_t kVdd;
    int16_t vdd25;
    
    kVdd = MLX90640_MS_BYTE(eeData[51]);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3366      	adds	r3, #102	@ 0x66
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	b29b      	uxth	r3, r3
 800225c:	73fb      	strb	r3, [r7, #15]

    vdd25 = MLX90640_LS_BYTE(eeData[51]);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3366      	adds	r3, #102	@ 0x66
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b21b      	sxth	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 800226a:	89bb      	ldrh	r3, [r7, #12]
 800226c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002270:	b29b      	uxth	r3, r3
 8002272:	015b      	lsls	r3, r3, #5
 8002274:	b29b      	uxth	r3, r3
 8002276:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800227a:	b29b      	uxth	r3, r3
 800227c:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = 32 * kVdd;
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	b29b      	uxth	r3, r3
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	b29b      	uxth	r3, r3
 8002288:	b21a      	sxth	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	89ba      	ldrh	r2, [r7, #12]
 8002292:	805a      	strh	r2, [r3, #2]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3364      	adds	r3, #100	@ 0x64
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	0a9b      	lsrs	r3, r3, #10
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022bc:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 80022c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80022c4:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	dd07      	ble.n	80022e2 <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 80022d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80023a0 <ExtractPTATParameters+0x100>
 80022da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022de:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 80022e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80022e6:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80023a4 <ExtractPTATParameters+0x104>
 80022ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ee:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3364      	adds	r3, #100	@ 0x64
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002304:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8002308:	edd7 7a04 	vldr	s15, [r7, #16]
 800230c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80023a8 <ExtractPTATParameters+0x108>
 8002310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	dd07      	ble.n	800232a <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 800231a:	edd7 7a04 	vldr	s15, [r7, #16]
 800231e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80023ac <ExtractPTATParameters+0x10c>
 8002322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002326:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 800232a:	ed97 7a04 	vldr	s14, [r7, #16]
 800232e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002336:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3362      	adds	r3, #98	@ 0x62
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3320      	adds	r3, #32
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f8b5 	bl	80004bc <__aeabi_i2d>
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <ExtractPTATParameters+0x110>)
 8002358:	f7fe fa44 	bl	80007e4 <__aeabi_ddiv>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <ExtractPTATParameters+0x114>)
 800236a:	f7fd ff5b 	bl	8000224 <__adddf3>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	f7fe fc03 	bl	8000b80 <__aeabi_d2f>
 800237a:	4603      	mov	r3, r0
 800237c:	60bb      	str	r3, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 800238a:	89fa      	ldrh	r2, [r7, #14]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	611a      	str	r2, [r3, #16]
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	42800000 	.word	0x42800000
 80023a4:	45800000 	.word	0x45800000
 80023a8:	43ff8000 	.word	0x43ff8000
 80023ac:	44800000 	.word	0x44800000
 80023b0:	40d00000 	.word	0x40d00000
 80023b4:	40200000 	.word	0x40200000

080023b8 <ExtractGainParameters>:

//------------------------------------------------------------------------------

static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
    mlx90640->gainEE = (int16_t)eeData[48];;    
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3360      	adds	r3, #96	@ 0x60
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	829a      	strh	r2, [r3, #20]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <ExtractTgcParameters>:

//------------------------------------------------------------------------------

static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3378      	adds	r3, #120	@ 0x78
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b25b      	sxtb	r3, r3
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f6:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002410 <ExtractTgcParameters+0x34>
 80023fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	42000000 	.word	0x42000000

08002414 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3370      	adds	r3, #112	@ 0x70
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	131b      	asrs	r3, r3, #12
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{   
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3378      	adds	r3, #120	@ 0x78
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	b29b      	uxth	r3, r3
 8002458:	b25b      	sxtb	r3, r3
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800247c <ExtractKsTaParameters+0x38>
 8002466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	46000000 	.word	0x46000000

08002480 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
    int32_t KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	337e      	adds	r3, #126	@ 0x7e
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	131b      	asrs	r3, r3, #12
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	4413      	add	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->ct[0] = -40;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f64f 72d8 	movw	r2, #65496	@ 0xffd8
 80024ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    mlx90640->ct[1] = 0;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	337e      	adds	r3, #126	@ 0x7e
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	111b      	asrs	r3, r3, #4
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	337e      	adds	r3, #126	@ 0x7e
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	121b      	asrs	r3, r3, #8
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	b21a      	sxth	r2, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	fb12 f303 	smulbb	r3, r2, r3
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8002506:	b29a      	uxth	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800250e:	b299      	uxth	r1, r3
 8002510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002514:	b29b      	uxth	r3, r3
 8002516:	fb11 f303 	smulbb	r3, r1, r3
 800251a:	b29b      	uxth	r3, r3
 800251c:	4413      	add	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	b21a      	sxth	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    mlx90640->ct[4] = 400;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800252e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    
    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	337e      	adds	r3, #126	@ 0x7e
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	3308      	adds	r3, #8
 800253e:	60bb      	str	r3, [r7, #8]
    KsToScale = 1UL << KsToScale;
 8002540:	2201      	movs	r2, #1
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	60bb      	str	r3, [r7, #8]
    
    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	337a      	adds	r3, #122	@ 0x7a
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b25b      	sxtb	r3, r3
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	337a      	adds	r3, #122	@ 0x7a
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b29b      	uxth	r3, r3
 8002578:	b25b      	sxtb	r3, r3
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	337c      	adds	r3, #124	@ 0x7c
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b25b      	sxtb	r3, r3
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	337c      	adds	r3, #124	@ 0x7c
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	b25b      	sxtb	r3, r3
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    mlx90640->ksTo[4] = -0.0002;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4a03      	ldr	r2, [pc, #12]	@ (80025f4 <ExtractKsToParameters+0x174>)
 80025e6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	b951b717 	.word	0xb951b717

080025f8 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	f5ad 6d52 	sub.w	sp, sp, #3360	@ 0xd20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002604:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002608:	6018      	str	r0, [r3, #0]
 800260a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800260e:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002612:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = MLX90640_NIBBLE1(eeData[32]);
 800261a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800261e:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3340      	adds	r3, #64	@ 0x40
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	f887 3cf3 	strb.w	r3, [r7, #3315]	@ 0xcf3
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
 8002632:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002636:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3340      	adds	r3, #64	@ 0x40
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	111b      	asrs	r3, r3, #4
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	f887 3cf2 	strb.w	r3, [r7, #3314]	@ 0xcf2
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
 800264c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002650:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3340      	adds	r3, #64	@ 0x40
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	121b      	asrs	r3, r3, #8
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f887 3cf1 	strb.w	r3, [r7, #3313]	@ 0xcf1
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
 8002666:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800266a:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3340      	adds	r3, #64	@ 0x40
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	0b1b      	lsrs	r3, r3, #12
 8002676:	b29b      	uxth	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	331e      	adds	r3, #30
 800267c:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    alphaRef = eeData[33];
 8002680:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002684:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3342      	adds	r3, #66	@ 0x42
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	f8c7 3cec 	str.w	r3, [r7, #3308]	@ 0xcec
    
    for(int i = 0; i < 6; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 3d14 	str.w	r3, [r7, #3348]	@ 0xd14
 8002698:	e062      	b.n	8002760 <ExtractAlphaParameters+0x168>
    {
        p = i * 4;
 800269a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
 80026a4:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80026a8:	3322      	adds	r3, #34	@ 0x22
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80026b0:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	f003 020f 	and.w	r2, r3, #15
 80026be:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80026c8:	443b      	add	r3, r7
 80026ca:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
 80026ce:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80026d2:	3322      	adds	r3, #34	@ 0x22
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80026da:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	111a      	asrs	r2, r3, #4
 80026e6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80026ea:	3301      	adds	r3, #1
 80026ec:	f002 020f 	and.w	r2, r2, #15
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80026f6:	443b      	add	r3, r7
 80026f8:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
 80026fc:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002700:	3322      	adds	r3, #34	@ 0x22
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002708:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	4413      	add	r3, r2
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	121a      	asrs	r2, r3, #8
 8002714:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002718:	3302      	adds	r3, #2
 800271a:	f002 020f 	and.w	r2, r2, #15
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002724:	443b      	add	r3, r7
 8002726:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
 800272a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800272e:	3322      	adds	r3, #34	@ 0x22
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002736:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	0b1b      	lsrs	r3, r3, #12
 8002742:	b29a      	uxth	r2, r3
 8002744:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002748:	3303      	adds	r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002750:	443b      	add	r3, r7
 8002752:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8002756:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800275a:	3301      	adds	r3, #1
 800275c:	f8c7 3d14 	str.w	r3, [r7, #3348]	@ 0xd14
 8002760:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002764:	2b05      	cmp	r3, #5
 8002766:	dd98      	ble.n	800269a <ExtractAlphaParameters+0xa2>
    }
    
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
 800276e:	e020      	b.n	80027b2 <ExtractAlphaParameters+0x1ba>
    {
        if (accRow[i] > 7)
 8002770:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800277a:	443b      	add	r3, r7
 800277c:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002780:	2b07      	cmp	r3, #7
 8002782:	dd11      	ble.n	80027a8 <ExtractAlphaParameters+0x1b0>
        {
            accRow[i] = accRow[i] - 16;
 8002784:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800278e:	443b      	add	r3, r7
 8002790:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002794:	f1a3 0210 	sub.w	r2, r3, #16
 8002798:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80027a2:	443b      	add	r3, r7
 80027a4:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80027a8:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 80027ac:	3301      	adds	r3, #1
 80027ae:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
 80027b2:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 80027b6:	2b17      	cmp	r3, #23
 80027b8:	ddda      	ble.n	8002770 <ExtractAlphaParameters+0x178>
        }
    }
    
    for(int i = 0; i < 8; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 3d0c 	str.w	r3, [r7, #3340]	@ 0xd0c
 80027c0:	e062      	b.n	8002888 <ExtractAlphaParameters+0x290>
    {
        p = i * 4;
 80027c2:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
 80027cc:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80027d0:	3328      	adds	r3, #40	@ 0x28
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80027d8:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	f003 010f 	and.w	r1, r3, #15
 80027e6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80027ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027ee:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 80027f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
 80027f6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80027fa:	3328      	adds	r3, #40	@ 0x28
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002802:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	4413      	add	r3, r2
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	111b      	asrs	r3, r3, #4
 800280e:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8002812:	3201      	adds	r2, #1
 8002814:	f003 010f 	and.w	r1, r3, #15
 8002818:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800281c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
 8002824:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002828:	3328      	adds	r3, #40	@ 0x28
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002830:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	4413      	add	r3, r2
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	121b      	asrs	r3, r3, #8
 800283c:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8002840:	3202      	adds	r2, #2
 8002842:	f003 010f 	and.w	r1, r3, #15
 8002846:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800284a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
 8002852:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002856:	3328      	adds	r3, #40	@ 0x28
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800285e:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	0b1b      	lsrs	r3, r3, #12
 800286a:	b299      	uxth	r1, r3
 800286c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002870:	1cda      	adds	r2, r3, #3
 8002872:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002876:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800287e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002882:	3301      	adds	r3, #1
 8002884:	f8c7 3d0c 	str.w	r3, [r7, #3340]	@ 0xd0c
 8002888:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 800288c:	2b07      	cmp	r3, #7
 800288e:	dd98      	ble.n	80027c2 <ExtractAlphaParameters+0x1ca>
    }
    
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 3d08 	str.w	r3, [r7, #3336]	@ 0xd08
 8002896:	e020      	b.n	80028da <ExtractAlphaParameters+0x2e2>
    {
        if (accColumn[i] > 7)
 8002898:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800289c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028a0:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	2b07      	cmp	r3, #7
 80028aa:	dd11      	ble.n	80028d0 <ExtractAlphaParameters+0x2d8>
        {
            accColumn[i] = accColumn[i] - 16;
 80028ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80028b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028b4:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	f1a3 0110 	sub.w	r1, r3, #16
 80028c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80028c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028c8:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 80028d0:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 80028d4:	3301      	adds	r3, #1
 80028d6:	f8c7 3d08 	str.w	r3, [r7, #3336]	@ 0xd08
 80028da:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 80028de:	2b1f      	cmp	r3, #31
 80028e0:	ddda      	ble.n	8002898 <ExtractAlphaParameters+0x2a0>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 80028e8:	e13e      	b.n	8002b68 <ExtractAlphaParameters+0x570>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 80028f0:	e130      	b.n	8002b54 <ExtractAlphaParameters+0x55c>
        {
            p = 32 * i +j;
 80028f2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	@ 0xd00
 80028fc:	4413      	add	r3, r2
 80028fe:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8002902:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002906:	3340      	adds	r3, #64	@ 0x40
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800290e:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	111b      	asrs	r3, r3, #4
 800291a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002926:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800292a:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800292e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 800293a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800293e:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002942:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8002952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	dd17      	ble.n	800298c <ExtractAlphaParameters+0x394>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 800295c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002960:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002964:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ed9f 7ae3 	vldr	s14, [pc, #908]	@ 8002d00 <ExtractAlphaParameters+0x708>
 8002974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002978:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800297c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002980:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 800298c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002990:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002994:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	ed93 7a00 	vldr	s14, [r3]
 80029a0:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	@ 0xcf3
 80029a4:	2201      	movs	r2, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	ee07 3a90 	vmov	s15, r3
 80029ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80029ba:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80029be:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 80029ca:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80029d4:	443b      	add	r3, r7
 80029d6:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80029da:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	@ 0xcf1
 80029de:	409a      	lsls	r2, r3
 80029e0:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	@ 0xcec
 80029e4:	441a      	add	r2, r3
 80029e6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80029ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029ee:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	@ 0xd00
 80029f2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80029f6:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	@ 0xcf2
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a08:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002a0c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002a10:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002a24:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002a28:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
 8002a34:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002a38:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002a3c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd4a 	bl	80004e0 <__aeabi_f2d>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	460d      	mov	r5, r1
 8002a50:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd21 	bl	800049c <__aeabi_ui2d>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	ec43 2b11 	vmov	d1, r2, r3
 8002a62:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 8002ce8 <ExtractAlphaParameters+0x6f0>
 8002a66:	f003 ffbf 	bl	80069e8 <pow>
 8002a6a:	ec53 2b10 	vmov	r2, r3, d0
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f7fd feb7 	bl	80007e4 <__aeabi_ddiv>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7fe f87f 	bl	8000b80 <__aeabi_d2f>
 8002a82:	4601      	mov	r1, r0
 8002a84:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002a88:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002a8c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	6019      	str	r1, [r3, #0]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8002a96:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002a9a:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002a9e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	ed93 7a00 	vldr	s14, [r3]
 8002aaa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002aae:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ab8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002abc:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac6:	ed93 6a94 	vldr	s12, [r3, #592]	@ 0x250
 8002aca:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002ace:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad8:	edd3 7a95 	vldr	s15, [r3, #596]	@ 0x254
 8002adc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002ae0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ae4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002ae8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002af4:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002af8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 8002b04:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002b08:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002b0c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fce2 	bl	80004e0 <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	a173      	add	r1, pc, #460	@ (adr r1, 8002cf0 <ExtractAlphaParameters+0x6f8>)
 8002b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b26:	f7fd fe5d 	bl	80007e4 <__aeabi_ddiv>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f7fe f825 	bl	8000b80 <__aeabi_d2f>
 8002b36:	4601      	mov	r1, r0
 8002b38:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002b3c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002b40:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002b4a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 8002b54:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 8002b58:	2b1f      	cmp	r3, #31
 8002b5a:	f77f aeca 	ble.w	80028f2 <ExtractAlphaParameters+0x2fa>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002b5e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8002b62:	3301      	adds	r3, #1
 8002b64:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 8002b68:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8002b6c:	2b17      	cmp	r3, #23
 8002b6e:	f77f aebc 	ble.w	80028ea <ExtractAlphaParameters+0x2f2>
        }
    }
    
    temp = alphaTemp[0];
 8002b72:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002b76:	f6a3 5314 	subw	r3, r3, #3348	@ 0xd14
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 8002b80:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8002b82:	2301      	movs	r3, #1
 8002b84:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 8002b88:	e023      	b.n	8002bd2 <ExtractAlphaParameters+0x5da>
    {
        if (alphaTemp[i] > temp)
 8002b8a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002b8e:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002b92:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 8002ba2:	ed93 7a00 	vldr	s14, [r3]
 8002ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bae:	d50b      	bpl.n	8002bc8 <ExtractAlphaParameters+0x5d0>
        {
            temp = alphaTemp[i];
 8002bb0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002bb4:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002bb8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 8002bc6:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8002bc8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 8002bd2:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bda:	dbd6      	blt.n	8002b8a <ExtractAlphaParameters+0x592>
        }
    }
    
    alphaScale = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    while(temp < 32767.4)
 8002be2:	e00e      	b.n	8002c02 <ExtractAlphaParameters+0x60a>
    {
        temp = temp*2;
 8002be4:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bf0:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 8002bf8:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    while(temp < 32767.4)
 8002c02:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	f7fd fc6a 	bl	80004e0 <__aeabi_f2d>
 8002c0c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002cf8 <ExtractAlphaParameters+0x700>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	f7fd ff2f 	bl	8000a74 <__aeabi_dcmplt>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e3      	bne.n	8002be4 <ExtractAlphaParameters+0x5ec>
    } 
    
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
 8002c22:	e04d      	b.n	8002cc0 <ExtractAlphaParameters+0x6c8>
    {
        temp = alphaTemp[i] * POW2(alphaScale);        
 8002c24:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002c28:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002c2c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fc52 	bl	80004e0 <__aeabi_f2d>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	460d      	mov	r5, r1
 8002c40:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fc29 	bl	800049c <__aeabi_ui2d>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	ec43 2b11 	vmov	d1, r2, r3
 8002c52:	ed9f 0b25 	vldr	d0, [pc, #148]	@ 8002ce8 <ExtractAlphaParameters+0x6f0>
 8002c56:	f003 fec7 	bl	80069e8 <pow>
 8002c5a:	ec53 2b10 	vmov	r2, r3, d0
 8002c5e:	4620      	mov	r0, r4
 8002c60:	4629      	mov	r1, r5
 8002c62:	f7fd fc95 	bl	8000590 <__aeabi_dmul>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f7fd ff87 	bl	8000b80 <__aeabi_d2f>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 8002c78:	6013      	str	r3, [r2, #0]
        mlx90640->alpha[i] = (temp + 0.5);        
 8002c7a:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	f7fd fc2e 	bl	80004e0 <__aeabi_f2d>
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <ExtractAlphaParameters+0x70c>)
 8002c8a:	f7fd facb 	bl	8000224 <__adddf3>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7fd ff53 	bl	8000b40 <__aeabi_d2uiz>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002ca2:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002cac:	3324      	adds	r3, #36	@ 0x24
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8002cb6:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
 8002cc0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cc8:	dbac      	blt.n	8002c24 <ExtractAlphaParameters+0x62c>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 8002cca:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002cce:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	@ 0xd1f
 8002cd8:	f883 264a 	strb.w	r2, [r3, #1610]	@ 0x64a
   
}
 8002cdc:	bf00      	nop
 8002cde:	f507 6752 	add.w	r7, r7, #3360	@ 0xd20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	40000000 	.word	0x40000000
 8002cf0:	a0b5ed8d 	.word	0xa0b5ed8d
 8002cf4:	3eb0c6f7 	.word	0x3eb0c6f7
 8002cf8:	9999999a 	.word	0x9999999a
 8002cfc:	40dfffd9 	.word	0x40dfffd9
 8002d00:	42800000 	.word	0x42800000
 8002d04:	3fe00000 	.word	0x3fe00000

08002d08 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b0c5      	sub	sp, #276	@ 0x114
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d16:	6018      	str	r0, [r3, #0]
 8002d18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d20:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = MLX90640_NIBBLE1(eeData[16]);
 8002d28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3320      	adds	r3, #32
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
 8002d40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	111b      	asrs	r3, r3, #4
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
 8002d5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3320      	adds	r3, #32
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	121b      	asrs	r3, r3, #8
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1
    offsetRef = (int16_t)eeData[17];
 8002d74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3322      	adds	r3, #34	@ 0x22
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
        
    for(int i = 0; i < 6; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d8c:	e062      	b.n	8002e54 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8002d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
 8002d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d9c:	3312      	adds	r3, #18
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002da4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	f003 020f 	and.w	r2, r3, #15
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002dbc:	443b      	add	r3, r7
 8002dbe:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
 8002dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dc6:	3312      	adds	r3, #18
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002dce:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	111a      	asrs	r2, r3, #4
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dde:	3301      	adds	r3, #1
 8002de0:	f002 020f 	and.w	r2, r2, #15
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002dea:	443b      	add	r3, r7
 8002dec:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
 8002df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002df4:	3312      	adds	r3, #18
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002dfc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	121a      	asrs	r2, r3, #8
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f002 020f 	and.w	r2, r2, #15
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002e18:	443b      	add	r3, r7
 8002e1a:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
 8002e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e22:	3312      	adds	r3, #18
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002e2a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	0b1b      	lsrs	r3, r3, #12
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	3303      	adds	r3, #3
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002e44:	443b      	add	r3, r7
 8002e46:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8002e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	dd98      	ble.n	8002d8e <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002e62:	e020      	b.n	8002ea6 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8002e64:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002e6e:	443b      	add	r3, r7
 8002e70:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002e74:	2b07      	cmp	r3, #7
 8002e76:	dd11      	ble.n	8002e9c <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8002e78:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002e82:	443b      	add	r3, r7
 8002e84:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002e88:	f1a3 0210 	sub.w	r2, r3, #16
 8002e8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002e96:	443b      	add	r3, r7
 8002e98:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002e9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002ea6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002eaa:	2b17      	cmp	r3, #23
 8002eac:	ddda      	ble.n	8002e64 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002eb4:	e062      	b.n	8002f7c <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8002eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
 8002ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ec4:	3318      	adds	r3, #24
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002ecc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	f003 010f 	and.w	r1, r3, #15
 8002eda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ee2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
 8002eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eee:	3318      	adds	r3, #24
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002ef6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	111b      	asrs	r3, r3, #4
 8002f02:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002f06:	3201      	adds	r2, #1
 8002f08:	f003 010f 	and.w	r1, r3, #15
 8002f0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
 8002f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002f24:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	121b      	asrs	r3, r3, #8
 8002f30:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002f34:	3202      	adds	r2, #2
 8002f36:	f003 010f 	and.w	r1, r3, #15
 8002f3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
 8002f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002f52:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	0b1b      	lsrs	r3, r3, #12
 8002f5e:	b299      	uxth	r1, r3
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f64:	1cda      	adds	r2, r3, #3
 8002f66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8002f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f76:	3301      	adds	r3, #1
 8002f78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f80:	2b07      	cmp	r3, #7
 8002f82:	dd98      	ble.n	8002eb6 <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002f8a:	e020      	b.n	8002fce <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8002f8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f94:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9c:	2b07      	cmp	r3, #7
 8002f9e:	dd11      	ble.n	8002fc4 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8002fa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fa8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb0:	f1a3 0110 	sub.w	r1, r3, #16
 8002fb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fbc:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8002fc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002fce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002fd2:	2b1f      	cmp	r3, #31
 8002fd4:	ddda      	ble.n	8002f8c <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002fdc:	e0c0      	b.n	8003160 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002fe4:	e0b2      	b.n	800314c <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fea:	015b      	lsls	r3, r3, #5
 8002fec:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffa:	3340      	adds	r3, #64	@ 0x40
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003002:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	0a9b      	lsrs	r3, r3, #10
 800300e:	b29b      	uxth	r3, r3
 8003010:	b219      	sxth	r1, r3
 8003012:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003016:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	460a      	mov	r2, r1
 800302a:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 800302c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003030:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303a:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003046:	2b1f      	cmp	r3, #31
 8003048:	dd1d      	ble.n	8003086 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 800304a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800304e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b40      	subs	r3, #64	@ 0x40
 8003068:	b29b      	uxth	r3, r3
 800306a:	b219      	sxth	r1, r3
 800306c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003070:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307a:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	460a      	mov	r2, r1
 8003084:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8003086:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800308a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003094:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	b219      	sxth	r1, r3
 80030ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ba:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	460a      	mov	r2, r1
 80030c4:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 80030c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80030d0:	443b      	add	r3, r7
 80030d2:	f853 2c84 	ldr.w	r2, [r3, #-132]
 80030d6:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	b29a      	uxth	r2, r3
 80030e0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80030e4:	4413      	add	r3, r2
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030f0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 80030f4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80030f8:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	b29b      	uxth	r3, r3
 8003102:	4413      	add	r3, r2
 8003104:	b29a      	uxth	r2, r3
 8003106:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800310a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	440b      	add	r3, r1
 800311c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003120:	b29b      	uxth	r3, r3
 8003122:	4413      	add	r3, r2
 8003124:	b29b      	uxth	r3, r3
 8003126:	b219      	sxth	r1, r3
 8003128:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800312c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003136:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	460a      	mov	r2, r1
 8003140:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003146:	3301      	adds	r3, #1
 8003148:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800314c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003150:	2b1f      	cmp	r3, #31
 8003152:	f77f af48 	ble.w	8002fe6 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800315a:	3301      	adds	r3, #1
 800315c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003164:	2b17      	cmp	r3, #23
 8003166:	f77f af3a 	ble.w	8002fde <ExtractOffsetParameters+0x2d6>
        }
    }
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	0000      	movs	r0, r0
 800317c:	0000      	movs	r0, r0
	...

08003180 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003180:	b5b0      	push	{r4, r5, r7, lr}
 8003182:	f5ad 6d43 	sub.w	sp, sp, #3120	@ 0xc30
 8003186:	af00      	add	r7, sp, #0
 8003188:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800318c:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003190:	6018      	str	r0, [r3, #0]
 8003192:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003196:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800319a:	6019      	str	r1, [r3, #0]
    int p = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
 80031a2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80031a6:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	336c      	adds	r3, #108	@ 0x6c
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	f887 3c0c 	strb.w	r3, [r7, #3084]	@ 0xc0c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
 80031ba:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80031be:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	336c      	adds	r3, #108	@ 0x6c
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	f887 3c0e 	strb.w	r3, [r7, #3086]	@ 0xc0e
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
 80031ce:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80031d2:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	336e      	adds	r3, #110	@ 0x6e
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	b29b      	uxth	r3, r3
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f887 3c0d 	strb.w	r3, [r7, #3085]	@ 0xc0d
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
 80031e6:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80031ea:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	336e      	adds	r3, #110	@ 0x6e
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b25b      	sxtb	r3, r3
 80031f6:	f887 3c0f 	strb.w	r3, [r7, #3087]	@ 0xc0f
      
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 80031fa:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80031fe:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3370      	adds	r3, #112	@ 0x70
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	111b      	asrs	r3, r3, #4
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	b2db      	uxtb	r3, r3
 8003212:	3308      	adds	r3, #8
 8003214:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    ktaScale2 = MLX90640_NIBBLE1(eeData[56]);
 8003218:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800321c:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3370      	adds	r3, #112	@ 0x70
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	f887 3c13 	strb.w	r3, [r7, #3091]	@ 0xc13

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 3c24 	str.w	r3, [r7, #3108]	@ 0xc24
 8003236:	e0ed      	b.n	8003414 <ExtractKtaPixelParameters+0x294>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 800323e:	e0df      	b.n	8003400 <ExtractKtaPixelParameters+0x280>
        {
            p = 32 * i +j;
 8003240:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8003244:	015b      	lsls	r3, r3, #5
 8003246:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	@ 0xc20
 800324a:	4413      	add	r3, r2
 800324c:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003250:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003254:	2b00      	cmp	r3, #0
 8003256:	da00      	bge.n	800325a <ExtractKtaPixelParameters+0xda>
 8003258:	331f      	adds	r3, #31
 800325a:	115b      	asrs	r3, r3, #5
 800325c:	461a      	mov	r2, r3
 800325e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003262:	2b00      	cmp	r3, #0
 8003264:	da00      	bge.n	8003268 <ExtractKtaPixelParameters+0xe8>
 8003266:	333f      	adds	r3, #63	@ 0x3f
 8003268:	119b      	asrs	r3, r3, #6
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	b2da      	uxtb	r2, r3
 8003274:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003278:	2b00      	cmp	r3, #0
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	bfb8      	it	lt
 8003280:	425b      	neglt	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4413      	add	r3, r2
 8003286:	f887 3c12 	strb.w	r3, [r7, #3090]	@ 0xc12
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 800328a:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800328e:	3340      	adds	r3, #64	@ 0x40
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	f507 6243 	add.w	r2, r7, #3120	@ 0xc30
 8003296:	f6a2 422c 	subw	r2, r2, #3116	@ 0xc2c
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	105b      	asrs	r3, r3, #1
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ae:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032b2:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80032b6:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 80032c2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032c6:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80032ca:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80032da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	dd17      	ble.n	8003314 <ExtractKtaPixelParameters+0x194>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 80032e4:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032e8:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80032ec:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80032fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003300:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003304:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003308:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8003314:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003318:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 800331c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	ed93 7a00 	vldr	s14, [r3]
 8003328:	f897 3c13 	ldrb.w	r3, [r7, #3091]	@ 0xc13
 800332c:	2201      	movs	r2, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003342:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003346:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8003352:	f897 3c12 	ldrb.w	r3, [r7, #3090]	@ 0xc12
 8003356:	f503 6343 	add.w	r3, r3, #3120	@ 0xc30
 800335a:	443b      	add	r3, r7
 800335c:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003368:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800336c:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003370:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	edd3 7a00 	vldr	s15, [r3]
 800337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003380:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003384:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003388:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
 8003394:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003398:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 800339c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f89a 	bl	80004e0 <__aeabi_f2d>
 80033ac:	4604      	mov	r4, r0
 80033ae:	460d      	mov	r5, r1
 80033b0:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fd f871 	bl	800049c <__aeabi_ui2d>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	ec43 2b11 	vmov	d1, r2, r3
 80033c2:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80035f8 <ExtractKtaPixelParameters+0x478>
 80033c6:	f003 fb0f 	bl	80069e8 <pow>
 80033ca:	ec53 2b10 	vmov	r2, r3, d0
 80033ce:	4620      	mov	r0, r4
 80033d0:	4629      	mov	r1, r5
 80033d2:	f7fd fa07 	bl	80007e4 <__aeabi_ddiv>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	f7fd fbcf 	bl	8000b80 <__aeabi_d2f>
 80033e2:	4601      	mov	r1, r0
 80033e4:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80033e8:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80033ec:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80033f6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80033fa:	3301      	adds	r3, #1
 80033fc:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8003400:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8003404:	2b1f      	cmp	r3, #31
 8003406:	f77f af1b 	ble.w	8003240 <ExtractKtaPixelParameters+0xc0>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800340a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 800340e:	3301      	adds	r3, #1
 8003410:	f8c7 3c24 	str.w	r3, [r7, #3108]	@ 0xc24
 8003414:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8003418:	2b17      	cmp	r3, #23
 800341a:	f77f af0d 	ble.w	8003238 <ExtractKtaPixelParameters+0xb8>
            
        }
    }
    
    temp = fabs(ktaTemp[0]);
 800341e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003422:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	eef0 7ae7 	vabs.f32	s15, s15
 800342e:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003432:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003436:	2301      	movs	r3, #1
 8003438:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 800343c:	e029      	b.n	8003492 <ExtractKtaPixelParameters+0x312>
    {
        if (fabs(ktaTemp[i]) > temp)
 800343e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003442:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003446:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	eef0 7ae7 	vabs.f32	s15, s15
 8003456:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800345a:	ed93 7a00 	vldr	s14, [r3]
 800345e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	d50f      	bpl.n	8003488 <ExtractKtaPixelParameters+0x308>
        {
            temp = fabs(ktaTemp[i]);
 8003468:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800346c:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003470:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	eef0 7ae7 	vabs.f32	s15, s15
 8003480:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003484:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003488:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 800348c:	3301      	adds	r3, #1
 800348e:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 8003492:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800349a:	dbd0      	blt.n	800343e <ExtractKtaPixelParameters+0x2be>
        }
    }
    
    ktaScale1 = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    while(temp < 63.4)
 80034a2:	e00e      	b.n	80034c2 <ExtractKtaPixelParameters+0x342>
    {
        temp = temp*2;
 80034a4:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034b0:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 80034b4:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 80034b8:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 80034bc:	3301      	adds	r3, #1
 80034be:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    while(temp < 63.4)
 80034c2:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	f7fd f80a 	bl	80004e0 <__aeabi_f2d>
 80034cc:	a34d      	add	r3, pc, #308	@ (adr r3, 8003604 <ExtractKtaPixelParameters+0x484>)
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f7fd facf 	bl	8000a74 <__aeabi_dcmplt>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e3      	bne.n	80034a4 <ExtractKtaPixelParameters+0x324>
    }    
     
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 80034e2:	e075      	b.n	80035d0 <ExtractKtaPixelParameters+0x450>
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
 80034e4:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80034e8:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80034ec:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fc fff2 	bl	80004e0 <__aeabi_f2d>
 80034fc:	4604      	mov	r4, r0
 80034fe:	460d      	mov	r5, r1
 8003500:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8003504:	4618      	mov	r0, r3
 8003506:	f7fc ffc9 	bl	800049c <__aeabi_ui2d>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	ec43 2b11 	vmov	d1, r2, r3
 8003512:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 80035f8 <ExtractKtaPixelParameters+0x478>
 8003516:	f003 fa67 	bl	80069e8 <pow>
 800351a:	ec53 2b10 	vmov	r2, r3, d0
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f7fd f835 	bl	8000590 <__aeabi_dmul>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f7fd fb27 	bl	8000b80 <__aeabi_d2f>
 8003532:	4603      	mov	r3, r0
 8003534:	f607 4228 	addw	r2, r7, #3112	@ 0xc28
 8003538:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 800353a:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800353e:	edd3 7a00 	vldr	s15, [r3]
 8003542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354a:	d51e      	bpl.n	800358a <ExtractKtaPixelParameters+0x40a>
        {
            mlx90640->kta[i] = (temp - 0.5);
 800354c:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	f7fc ffc5 	bl	80004e0 <__aeabi_f2d>
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	4b29      	ldr	r3, [pc, #164]	@ (8003600 <ExtractKtaPixelParameters+0x480>)
 800355c:	f7fc fe60 	bl	8000220 <__aeabi_dsub>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fac2 	bl	8000af0 <__aeabi_d2iz>
 800356c:	4603      	mov	r3, r0
 800356e:	b259      	sxtb	r1, r3
 8003570:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003574:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 800357e:	4413      	add	r3, r2
 8003580:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 8003584:	460a      	mov	r2, r1
 8003586:	701a      	strb	r2, [r3, #0]
 8003588:	e01d      	b.n	80035c6 <ExtractKtaPixelParameters+0x446>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
 800358a:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	f7fc ffa6 	bl	80004e0 <__aeabi_f2d>
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	4b19      	ldr	r3, [pc, #100]	@ (8003600 <ExtractKtaPixelParameters+0x480>)
 800359a:	f7fc fe43 	bl	8000224 <__adddf3>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f7fd faa3 	bl	8000af0 <__aeabi_d2iz>
 80035aa:	4603      	mov	r3, r0
 80035ac:	b259      	sxtb	r1, r3
 80035ae:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80035b2:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80035bc:	4413      	add	r3, r2
 80035be:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 80035c2:	460a      	mov	r2, r1
 80035c4:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80035c6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80035ca:	3301      	adds	r3, #1
 80035cc:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 80035d0:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80035d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035d8:	db84      	blt.n	80034e4 <ExtractKtaPixelParameters+0x364>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 80035da:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80035de:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f897 2c2f 	ldrb.w	r2, [r7, #3119]	@ 0xc2f
 80035e8:	f883 2f4c 	strb.w	r2, [r3, #3916]	@ 0xf4c
}
 80035ec:	bf00      	nop
 80035ee:	f507 6743 	add.w	r7, r7, #3120	@ 0xc30
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bdb0      	pop	{r4, r5, r7, pc}
 80035f6:	bf00      	nop
 80035f8:	00000000 	.word	0x00000000
 80035fc:	40000000 	.word	0x40000000
 8003600:	3fe00000 	.word	0x3fe00000
 8003604:	33333333 	.word	0x33333333
 8003608:	404fb333 	.word	0x404fb333
 800360c:	00000000 	.word	0x00000000

08003610 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	f5ad 6d43 	sub.w	sp, sp, #3120	@ 0xc30
 8003616:	af00      	add	r7, sp, #0
 8003618:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800361c:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003620:	6018      	str	r0, [r3, #0]
 8003622:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003626:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800362a:	6019      	str	r1, [r3, #0]
    int p = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
 8003632:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003636:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3368      	adds	r3, #104	@ 0x68
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	0b1b      	lsrs	r3, r3, #12
 8003642:	b29b      	uxth	r3, r3
 8003644:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    if (KvRoCo > 7)
 8003648:	f997 3c2f 	ldrsb.w	r3, [r7, #3119]	@ 0xc2f
 800364c:	2b07      	cmp	r3, #7
 800364e:	dd05      	ble.n	800365c <ExtractKvPixelParameters+0x4c>
    {
        KvRoCo = KvRoCo - 16;
 8003650:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8003654:	3b10      	subs	r3, #16
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    }
    KvT[0] = KvRoCo;
 800365c:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8003660:	f887 3c08 	strb.w	r3, [r7, #3080]	@ 0xc08
    
    KvReCo = MLX90640_NIBBLE3(eeData[52]);
 8003664:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003668:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3368      	adds	r3, #104	@ 0x68
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	121b      	asrs	r3, r3, #8
 8003674:	b25b      	sxtb	r3, r3
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	f887 3c2d 	strb.w	r3, [r7, #3117]	@ 0xc2d
    if (KvReCo > 7)
 800367e:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	@ 0xc2d
 8003682:	2b07      	cmp	r3, #7
 8003684:	dd05      	ble.n	8003692 <ExtractKvPixelParameters+0x82>
    {
        KvReCo = KvReCo - 16;
 8003686:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	@ 0xc2d
 800368a:	3b10      	subs	r3, #16
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f887 3c2d 	strb.w	r3, [r7, #3117]	@ 0xc2d
    }
    KvT[2] = KvReCo;
 8003692:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	@ 0xc2d
 8003696:	f887 3c0a 	strb.w	r3, [r7, #3082]	@ 0xc0a
      
    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
 800369a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800369e:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3368      	adds	r3, #104	@ 0x68
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	111b      	asrs	r3, r3, #4
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	f887 3c2e 	strb.w	r3, [r7, #3118]	@ 0xc2e
    if (KvRoCe > 7)
 80036b4:	f997 3c2e 	ldrsb.w	r3, [r7, #3118]	@ 0xc2e
 80036b8:	2b07      	cmp	r3, #7
 80036ba:	dd05      	ble.n	80036c8 <ExtractKvPixelParameters+0xb8>
    {
        KvRoCe = KvRoCe - 16;
 80036bc:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	@ 0xc2e
 80036c0:	3b10      	subs	r3, #16
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f887 3c2e 	strb.w	r3, [r7, #3118]	@ 0xc2e
    }
    KvT[1] = KvRoCe;
 80036c8:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	@ 0xc2e
 80036cc:	f887 3c09 	strb.w	r3, [r7, #3081]	@ 0xc09
      
    KvReCe = MLX90640_NIBBLE1(eeData[52]);
 80036d0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80036d4:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3368      	adds	r3, #104	@ 0x68
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	b25b      	sxtb	r3, r3
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	f887 3c2c 	strb.w	r3, [r7, #3116]	@ 0xc2c
    if (KvReCe > 7)
 80036e8:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	@ 0xc2c
 80036ec:	2b07      	cmp	r3, #7
 80036ee:	dd05      	ble.n	80036fc <ExtractKvPixelParameters+0xec>
    {
        KvReCe = KvReCe - 16;
 80036f0:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	@ 0xc2c
 80036f4:	3b10      	subs	r3, #16
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f887 3c2c 	strb.w	r3, [r7, #3116]	@ 0xc2c
    }
    KvT[3] = KvReCe;
 80036fc:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	@ 0xc2c
 8003700:	f887 3c0b 	strb.w	r3, [r7, #3083]	@ 0xc0b
  
    kvScale = MLX90640_NIBBLE3(eeData[56]);
 8003704:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003708:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3370      	adds	r3, #112	@ 0x70
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	121b      	asrs	r3, r3, #8
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b


    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8003724:	e07c      	b.n	8003820 <ExtractKvPixelParameters+0x210>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 800372c:	e06f      	b.n	800380e <ExtractKvPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 800372e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8003732:	015b      	lsls	r3, r3, #5
 8003734:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	@ 0xc1c
 8003738:	4413      	add	r3, r2
 800373a:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
            split = 2*(p/32 - (p/64)*2) + p%2;
 800373e:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003742:	2b00      	cmp	r3, #0
 8003744:	da00      	bge.n	8003748 <ExtractKvPixelParameters+0x138>
 8003746:	331f      	adds	r3, #31
 8003748:	115b      	asrs	r3, r3, #5
 800374a:	461a      	mov	r2, r3
 800374c:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003750:	2b00      	cmp	r3, #0
 8003752:	da00      	bge.n	8003756 <ExtractKvPixelParameters+0x146>
 8003754:	333f      	adds	r3, #63	@ 0x3f
 8003756:	119b      	asrs	r3, r3, #6
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	b2da      	uxtb	r2, r3
 8003762:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003766:	2b00      	cmp	r3, #0
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	bfb8      	it	lt
 800376e:	425b      	neglt	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	4413      	add	r3, r2
 8003774:	f887 3c0f 	strb.w	r3, [r7, #3087]	@ 0xc0f
            kvTemp[p] = KvT[split];
 8003778:	f897 3c0f 	ldrb.w	r3, [r7, #3087]	@ 0xc0f
 800377c:	f503 6343 	add.w	r3, r3, #3120	@ 0xc30
 8003780:	443b      	add	r3, r7
 8003782:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003792:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003796:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
 80037a2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80037a6:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80037aa:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fe93 	bl	80004e0 <__aeabi_f2d>
 80037ba:	4604      	mov	r4, r0
 80037bc:	460d      	mov	r5, r1
 80037be:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fc fe6a 	bl	800049c <__aeabi_ui2d>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	ec43 2b11 	vmov	d1, r2, r3
 80037d0:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8003a08 <ExtractKvPixelParameters+0x3f8>
 80037d4:	f003 f908 	bl	80069e8 <pow>
 80037d8:	ec53 2b10 	vmov	r2, r3, d0
 80037dc:	4620      	mov	r0, r4
 80037de:	4629      	mov	r1, r5
 80037e0:	f7fd f800 	bl	80007e4 <__aeabi_ddiv>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd f9c8 	bl	8000b80 <__aeabi_d2f>
 80037f0:	4601      	mov	r1, r0
 80037f2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80037f6:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80037fa:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003804:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003808:	3301      	adds	r3, #1
 800380a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 800380e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003812:	2b1f      	cmp	r3, #31
 8003814:	dd8b      	ble.n	800372e <ExtractKvPixelParameters+0x11e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003816:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 800381a:	3301      	adds	r3, #1
 800381c:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8003820:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8003824:	2b17      	cmp	r3, #23
 8003826:	f77f af7e 	ble.w	8003726 <ExtractKvPixelParameters+0x116>
        }
    }
    
    temp = fabs(kvTemp[0]);
 800382a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800382e:	f6a3 4328 	subw	r3, r3, #3112	@ 0xc28
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	eef0 7ae7 	vabs.f32	s15, s15
 800383a:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800383e:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003842:	2301      	movs	r3, #1
 8003844:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 8003848:	e029      	b.n	800389e <ExtractKvPixelParameters+0x28e>
    {
        if (fabs(kvTemp[i]) > temp)
 800384a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800384e:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003852:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	eef0 7ae7 	vabs.f32	s15, s15
 8003862:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003866:	ed93 7a00 	vldr	s14, [r3]
 800386a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800386e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003872:	d50f      	bpl.n	8003894 <ExtractKvPixelParameters+0x284>
        {
            temp = fabs(kvTemp[i]);
 8003874:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003878:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 800387c:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	edd3 7a00 	vldr	s15, [r3]
 8003888:	eef0 7ae7 	vabs.f32	s15, s15
 800388c:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003890:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003894:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003898:	3301      	adds	r3, #1
 800389a:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 800389e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80038a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a6:	dbd0      	blt.n	800384a <ExtractKvPixelParameters+0x23a>
        }
    }
    
    kvScale = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b
    while(temp < 63.4)
 80038ae:	e00e      	b.n	80038ce <ExtractKvPixelParameters+0x2be>
    {
        temp = temp*2;
 80038b0:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038bc:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80038c0:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 80038c4:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 80038c8:	3301      	adds	r3, #1
 80038ca:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b
    while(temp < 63.4)
 80038ce:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	f7fc fe04 	bl	80004e0 <__aeabi_f2d>
 80038d8:	a34e      	add	r3, pc, #312	@ (adr r3, 8003a14 <ExtractKvPixelParameters+0x404>)
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f7fd f8c9 	bl	8000a74 <__aeabi_dcmplt>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e3      	bne.n	80038b0 <ExtractKvPixelParameters+0x2a0>
    }    
     
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 80038ee:	e075      	b.n	80039dc <ExtractKvPixelParameters+0x3cc>
    {
        temp = kvTemp[i] * POW2(kvScale);
 80038f0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80038f4:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80038f8:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fdec 	bl	80004e0 <__aeabi_f2d>
 8003908:	4604      	mov	r4, r0
 800390a:	460d      	mov	r5, r1
 800390c:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fdc3 	bl	800049c <__aeabi_ui2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	ec43 2b11 	vmov	d1, r2, r3
 800391e:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 8003a08 <ExtractKvPixelParameters+0x3f8>
 8003922:	f003 f861 	bl	80069e8 <pow>
 8003926:	ec53 2b10 	vmov	r2, r3, d0
 800392a:	4620      	mov	r0, r4
 800392c:	4629      	mov	r1, r5
 800392e:	f7fc fe2f 	bl	8000590 <__aeabi_dmul>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	f7fd f921 	bl	8000b80 <__aeabi_d2f>
 800393e:	4603      	mov	r3, r0
 8003940:	f607 4224 	addw	r2, r7, #3108	@ 0xc24
 8003944:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8003946:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	d51e      	bpl.n	8003996 <ExtractKvPixelParameters+0x386>
        {
            mlx90640->kv[i] = (temp - 0.5);
 8003958:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	f7fc fdbf 	bl	80004e0 <__aeabi_f2d>
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	4b2a      	ldr	r3, [pc, #168]	@ (8003a10 <ExtractKvPixelParameters+0x400>)
 8003968:	f7fc fc5a 	bl	8000220 <__aeabi_dsub>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	f7fd f8bc 	bl	8000af0 <__aeabi_d2iz>
 8003978:	4603      	mov	r3, r0
 800397a:	b259      	sxtb	r1, r3
 800397c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003980:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800398a:	4413      	add	r3, r2
 800398c:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8003990:	460a      	mov	r2, r1
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e01d      	b.n	80039d2 <ExtractKvPixelParameters+0x3c2>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
 8003996:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	f7fc fda0 	bl	80004e0 <__aeabi_f2d>
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <ExtractKvPixelParameters+0x400>)
 80039a6:	f7fc fc3d 	bl	8000224 <__adddf3>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fd f89d 	bl	8000af0 <__aeabi_d2iz>
 80039b6:	4603      	mov	r3, r0
 80039b8:	b259      	sxtb	r1, r3
 80039ba:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80039be:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80039c8:	4413      	add	r3, r2
 80039ca:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 80039ce:	460a      	mov	r2, r1
 80039d0:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80039d2:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80039d6:	3301      	adds	r3, #1
 80039d8:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 80039dc:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80039e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039e4:	db84      	blt.n	80038f0 <ExtractKvPixelParameters+0x2e0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 80039e6:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80039ea:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f4:	461a      	mov	r2, r3
 80039f6:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 80039fa:	f882 324d 	strb.w	r3, [r2, #589]	@ 0x24d
}
 80039fe:	bf00      	nop
 8003a00:	f507 6743 	add.w	r7, r7, #3120	@ 0xc30
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bdb0      	pop	{r4, r5, r7, pc}
 8003a08:	00000000 	.word	0x00000000
 8003a0c:	40000000 	.word	0x40000000
 8003a10:	3fe00000 	.word	0x3fe00000
 8003a14:	33333333 	.word	0x33333333
 8003a18:	404fb333 	.word	0x404fb333
 8003a1c:	00000000 	.word	0x00000000

08003a20 <ExtractCPParameters>:

//------------------------------------------------------------------------------

static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b08a      	sub	sp, #40	@ 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3340      	adds	r3, #64	@ 0x40
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	0b1b      	lsrs	r3, r3, #12
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	331b      	adds	r3, #27
 8003a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    
    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3374      	adds	r3, #116	@ 0x74
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a48:	b21b      	sxth	r3, r3
 8003a4a:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8003a4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a54:	db07      	blt.n	8003a66 <ExtractCPParameters+0x46>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8003a56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b21b      	sxth	r3, r3
 8003a64:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3374      	adds	r3, #116	@ 0x74
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	0a9b      	lsrs	r3, r3, #10
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	b21b      	sxth	r3, r3
 8003a72:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8003a74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a78:	2b1f      	cmp	r3, #31
 8003a7a:	dd06      	ble.n	8003a8a <ExtractCPParameters+0x6a>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8003a7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b40      	subs	r3, #64	@ 0x40
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8003a8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3372      	adds	r3, #114	@ 0x72
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 8003ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ab8:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003c88 <ExtractCPParameters+0x268>
 8003abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac4:	dd07      	ble.n	8003ad6 <ExtractCPParameters+0xb6>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8003ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aca:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8003c8c <ExtractCPParameters+0x26c>
 8003ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ad2:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fd01 	bl	80004e0 <__aeabi_f2d>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	460d      	mov	r5, r1
 8003ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fc fcd8 	bl	800049c <__aeabi_ui2d>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	ec43 2b11 	vmov	d1, r2, r3
 8003af4:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 8003c80 <ExtractCPParameters+0x260>
 8003af8:	f002 ff76 	bl	80069e8 <pow>
 8003afc:	ec53 2b10 	vmov	r2, r3, d0
 8003b00:	4620      	mov	r0, r4
 8003b02:	4629      	mov	r1, r5
 8003b04:	f7fc fe6e 	bl	80007e4 <__aeabi_ddiv>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f7fd f836 	bl	8000b80 <__aeabi_d2f>
 8003b14:	4603      	mov	r3, r0
 8003b16:	60fb      	str	r3, [r7, #12]
    
    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3372      	adds	r3, #114	@ 0x72
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	0a9b      	lsrs	r3, r3, #10
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 8003b2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b32:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8003b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3e:	dd07      	ble.n	8003b50 <ExtractCPParameters+0x130>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8003b40:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b44:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003c90 <ExtractCPParameters+0x270>
 8003b48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b4c:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8003b50:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b54:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c94 <ExtractCPParameters+0x274>
 8003b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6c:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3376      	adds	r3, #118	@ 0x76
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b80:	edc7 7a08 	vstr	s15, [r7, #32]
    
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;    
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3370      	adds	r3, #112	@ 0x70
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	111b      	asrs	r3, r3, #4
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3308      	adds	r3, #8
 8003b96:	77fb      	strb	r3, [r7, #31]
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
 8003b98:	6a38      	ldr	r0, [r7, #32]
 8003b9a:	f7fc fca1 	bl	80004e0 <__aeabi_f2d>
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	460d      	mov	r5, r1
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc fc79 	bl	800049c <__aeabi_ui2d>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	ec43 2b11 	vmov	d1, r2, r3
 8003bb2:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8003c80 <ExtractCPParameters+0x260>
 8003bb6:	f002 ff17 	bl	80069e8 <pow>
 8003bba:	ec53 2b10 	vmov	r2, r3, d0
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	f7fc fe0f 	bl	80007e4 <__aeabi_ddiv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f7fc ffd7 	bl	8000b80 <__aeabi_d2f>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	621a      	str	r2, [r3, #32]
    
    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3376      	adds	r3, #118	@ 0x76
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bec:	edc7 7a06 	vstr	s15, [r7, #24]
    
    kvScale = MLX90640_NIBBLE3(eeData[56]);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3370      	adds	r3, #112	@ 0x70
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	121b      	asrs	r3, r3, #8
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	75fb      	strb	r3, [r7, #23]
    mlx90640->cpKv = cpKv / POW2(kvScale);
 8003c00:	69b8      	ldr	r0, [r7, #24]
 8003c02:	f7fc fc6d 	bl	80004e0 <__aeabi_f2d>
 8003c06:	4604      	mov	r4, r0
 8003c08:	460d      	mov	r5, r1
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fc45 	bl	800049c <__aeabi_ui2d>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	ec43 2b11 	vmov	d1, r2, r3
 8003c1a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8003c80 <ExtractCPParameters+0x260>
 8003c1e:	f002 fee3 	bl	80069e8 <pow>
 8003c22:	ec53 2b10 	vmov	r2, r3, d0
 8003c26:	4620      	mov	r0, r4
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f7fc fddb 	bl	80007e4 <__aeabi_ddiv>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7fc ffa3 	bl	8000b80 <__aeabi_d2f>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	61da      	str	r2, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c48:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c54:	f8c2 3254 	str.w	r3, [r2, #596]	@ 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8003c58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c62:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 8003c66:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c70:	f8a3 225a 	strh.w	r2, [r3, #602]	@ 0x25a
}
 8003c74:	bf00      	nop
 8003c76:	3728      	adds	r7, #40	@ 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c7c:	f3af 8000 	nop.w
 8003c80:	00000000 	.word	0x00000000
 8003c84:	40000000 	.word	0x40000000
 8003c88:	43ff8000 	.word	0x43ff8000
 8003c8c:	44800000 	.word	0x44800000
 8003c90:	42800000 	.word	0x42800000
 8003c94:	43000000 	.word	0x43000000

08003c98 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	111b      	asrs	r3, r3, #4
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003cb0:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
 8003cb4:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	336a      	adds	r3, #106	@ 0x6a
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cce:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8003cd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cd6:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8003cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	dd07      	ble.n	8003cf4 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8003ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ce8:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003dd0 <ExtractCILCParameters+0x138>
 8003cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cf0:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8003cf4:	ed97 7a02 	vldr	s14, [r7, #8]
 8003cf8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d00:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	336a      	adds	r3, #106	@ 0x6a
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	119b      	asrs	r3, r3, #6
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d18:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8003d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d20:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	dd07      	ble.n	8003d3e <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8003d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d32:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003dd4 <ExtractCILCParameters+0x13c>
 8003d36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d3a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8003d3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d42:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d4a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	336a      	adds	r3, #106	@ 0x6a
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	0adb      	lsrs	r3, r3, #11
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	ee07 3a90 	vmov	s15, r3
 8003d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d60:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8003d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d68:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d74:	dd07      	ble.n	8003d86 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8003d76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d7a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003dd4 <ExtractCILCParameters+0x13c>
 8003d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d82:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 8003d86:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d8a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8003d8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d92:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	7dfa      	ldrb	r2, [r7, #23]
 8003d9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003da6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003db2:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dbe:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	42800000 	.word	0x42800000
 8003dd4:	42000000 	.word	0x42000000

08003dd8 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	82fb      	strh	r3, [r7, #22]
 8003df6:	e013      	b.n	8003e20 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8003df8:	8afa      	ldrh	r2, [r7, #22]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003e00:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003e04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8003e08:	8afb      	ldrh	r3, [r7, #22]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e18:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	82fb      	strh	r3, [r7, #22]
 8003e20:	8afb      	ldrh	r3, [r7, #22]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d9e8      	bls.n	8003df8 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 8003e26:	2300      	movs	r3, #0
 8003e28:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003e2a:	e02a      	b.n	8003e82 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8003e2c:	8afb      	ldrh	r3, [r7, #22]
 8003e2e:	3340      	adds	r3, #64	@ 0x40
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8003e3c:	8aba      	ldrh	r2, [r7, #20]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003e44:	8af9      	ldrh	r1, [r7, #22]
 8003e46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8003e4a:	8abb      	ldrh	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	82bb      	strh	r3, [r7, #20]
 8003e50:	e014      	b.n	8003e7c <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8003e52:	8afb      	ldrh	r3, [r7, #22]
 8003e54:	3340      	adds	r3, #64	@ 0x40
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8003e66:	8a7b      	ldrh	r3, [r7, #18]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	8afa      	ldrh	r2, [r7, #22]
 8003e74:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8003e76:	8a7b      	ldrh	r3, [r7, #18]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 8003e7c:	8afb      	ldrh	r3, [r7, #22]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003e82:	8afb      	ldrh	r3, [r7, #22]
 8003e84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e88:	d205      	bcs.n	8003e96 <ExtractDeviatingPixels+0xbe>
 8003e8a:	8abb      	ldrh	r3, [r7, #20]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d802      	bhi.n	8003e96 <ExtractDeviatingPixels+0xbe>
 8003e90:	8a7b      	ldrh	r3, [r7, #18]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d9ca      	bls.n	8003e2c <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 8003e96:	8abb      	ldrh	r3, [r7, #20]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d903      	bls.n	8003ea4 <ExtractDeviatingPixels+0xcc>
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
 8003e9c:	f06f 0302 	mvn.w	r3, #2
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e08f      	b.n	8003fc4 <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 8003ea4:	8a7b      	ldrh	r3, [r7, #18]
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d903      	bls.n	8003eb2 <ExtractDeviatingPixels+0xda>
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
 8003eaa:	f06f 0303 	mvn.w	r3, #3
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e088      	b.n	8003fc4 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 8003eb2:	8aba      	ldrh	r2, [r7, #20]
 8003eb4:	8a7b      	ldrh	r3, [r7, #18]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	dd03      	ble.n	8003ec4 <ExtractDeviatingPixels+0xec>
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
 8003ebc:	f06f 0304 	mvn.w	r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e07f      	b.n	8003fc4 <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	82fb      	strh	r3, [r7, #22]
 8003ec8:	e022      	b.n	8003f10 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003eca:	8afb      	ldrh	r3, [r7, #22]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	e017      	b.n	8003f02 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8003ed2:	8afa      	ldrh	r2, [r7, #22]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003eda:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003ee6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003eea:	4619      	mov	r1, r3
 8003eec:	f000 f86f 	bl	8003fce <CheckAdjacentPixels>
 8003ef0:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	e064      	b.n	8003fc6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	8abb      	ldrh	r3, [r7, #20]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	dbe3      	blt.n	8003ed2 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003f0a:	8afb      	ldrh	r3, [r7, #22]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	82fb      	strh	r3, [r7, #22]
 8003f10:	8afa      	ldrh	r2, [r7, #22]
 8003f12:	8abb      	ldrh	r3, [r7, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d3d8      	bcc.n	8003eca <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	82fb      	strh	r3, [r7, #22]
 8003f1c:	e024      	b.n	8003f68 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003f1e:	8afb      	ldrh	r3, [r7, #22]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	e019      	b.n	8003f5a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003f26:	8afb      	ldrh	r3, [r7, #22]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	8858      	ldrh	r0, [r3, #2]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	885b      	ldrh	r3, [r3, #2]
 8003f42:	4619      	mov	r1, r3
 8003f44:	f000 f843 	bl	8003fce <CheckAdjacentPixels>
 8003f48:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	e038      	b.n	8003fc6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	3301      	adds	r3, #1
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	8a7b      	ldrh	r3, [r7, #18]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	dbe1      	blt.n	8003f26 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003f62:	8afb      	ldrh	r3, [r7, #22]
 8003f64:	3301      	adds	r3, #1
 8003f66:	82fb      	strh	r3, [r7, #22]
 8003f68:	8afa      	ldrh	r2, [r7, #22]
 8003f6a:	8a7b      	ldrh	r3, [r7, #18]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d3d6      	bcc.n	8003f1e <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	82fb      	strh	r3, [r7, #22]
 8003f74:	e022      	b.n	8003fbc <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	e018      	b.n	8003fae <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003f7c:	8afa      	ldrh	r2, [r7, #22]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003f84:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4413      	add	r3, r2
 8003f94:	885b      	ldrh	r3, [r3, #2]
 8003f96:	4619      	mov	r1, r3
 8003f98:	f000 f819 	bl	8003fce <CheckAdjacentPixels>
 8003f9c:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	e00e      	b.n	8003fc6 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	3301      	adds	r3, #1
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	8a7b      	ldrh	r3, [r7, #18]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	dbe2      	blt.n	8003f7c <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003fb6:	8afb      	ldrh	r3, [r7, #22]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	82fb      	strh	r3, [r7, #22]
 8003fbc:	8afa      	ldrh	r2, [r7, #22]
 8003fbe:	8abb      	ldrh	r3, [r7, #20]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d3d8      	bcc.n	8003f76 <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
       
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	460a      	mov	r2, r1
 8003fd8:	80fb      	strh	r3, [r7, #6]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80bb      	strh	r3, [r7, #4]
     
     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	82fb      	strh	r3, [r7, #22]
     uint16_t lp2 = pix2 >> 5;
 8003fe4:	88bb      	ldrh	r3, [r7, #4]
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	82bb      	strh	r3, [r7, #20]
     uint16_t cp1 = pix1 - (lp1 << 5);
 8003fea:	8afb      	ldrh	r3, [r7, #22]
 8003fec:	015b      	lsls	r3, r3, #5
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	827b      	strh	r3, [r7, #18]
     uint16_t cp2 = pix2 - (lp2 << 5);
 8003ff6:	8abb      	ldrh	r3, [r7, #20]
 8003ff8:	015b      	lsls	r3, r3, #5
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	88ba      	ldrh	r2, [r7, #4]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	823b      	strh	r3, [r7, #16]
     
     pixPosDif = lp1 - lp2;
 8004002:	8afa      	ldrh	r2, [r7, #22]
 8004004:	8abb      	ldrh	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -2 && pixPosDif < 2)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	db10      	blt.n	8004034 <CheckAdjacentPixels+0x66>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b01      	cmp	r3, #1
 8004016:	dc0d      	bgt.n	8004034 <CheckAdjacentPixels+0x66>
     {
        pixPosDif = cp1 - cp2;
 8004018:	8a7a      	ldrh	r2, [r7, #18]
 800401a:	8a3b      	ldrh	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	60fb      	str	r3, [r7, #12]
        if(pixPosDif > -2 && pixPosDif < 2)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	db05      	blt.n	8004034 <CheckAdjacentPixels+0x66>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	dc02      	bgt.n	8004034 <CheckAdjacentPixels+0x66>
        {
            return -6;
 800402e:	f06f 0305 	mvn.w	r3, #5
 8004032:	e000      	b.n	8004036 <CheckAdjacentPixels+0x68>
        }

     } 
      
     return 0;    
 8004034:	2300      	movs	r3, #0
 }
 8004036:	4618      	mov	r0, r3
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <MLX90640_I2CRead>:
#include "mlx90640_i2c_driver.h"

int MLX90640_I2CRead(uint8_t slaveAddr,uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data) {
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b08b      	sub	sp, #44	@ 0x2c
 8004048:	af04      	add	r7, sp, #16
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	460b      	mov	r3, r1
 8004052:	81bb      	strh	r3, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	817b      	strh	r3, [r7, #10]
  //   uint8_t * pData,
  //   uint16_t Size,
  //   uint32_t Timeout
  // )

  if (HAL_I2C_Mem_Read(mlx_handle,
 8004058:	4b19      	ldr	r3, [pc, #100]	@ (80040c0 <MLX90640_I2CRead+0x7c>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	b29b      	uxth	r3, r3
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	b299      	uxth	r1, r3
 8004064:	897b      	ldrh	r3, [r7, #10]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	b29b      	uxth	r3, r3
 800406a:	89ba      	ldrh	r2, [r7, #12]
 800406c:	f04f 34ff 	mov.w	r4, #4294967295
 8004070:	9402      	str	r4, [sp, #8]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2302      	movs	r3, #2
 800407a:	f000 ff6b 	bl	8004f54 <HAL_I2C_Mem_Read>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <MLX90640_I2CRead+0x46>
                       startAddress,
                       I2C_MEMADD_SIZE_16BIT,
                       (uint8_t *) data,
                       nMemAddressRead * 2,
                       HAL_MAX_DELAY) != HAL_OK) {
    return -1;
 8004084:	f04f 33ff 	mov.w	r3, #4294967295
 8004088:	e016      	b.n	80040b8 <MLX90640_I2CRead+0x74>
  }

  for (uint16_t i = 0; i < nMemAddressRead; i++) {
 800408a:	2300      	movs	r3, #0
 800408c:	82fb      	strh	r3, [r7, #22]
 800408e:	e00e      	b.n	80040ae <MLX90640_I2CRead+0x6a>
    data[i] = __builtin_bswap16(data[i]);
 8004090:	8afb      	ldrh	r3, [r7, #22]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	881a      	ldrh	r2, [r3, #0]
 800409a:	8afb      	ldrh	r3, [r7, #22]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	440b      	add	r3, r1
 80040a2:	ba52      	rev16	r2, r2
 80040a4:	b292      	uxth	r2, r2
 80040a6:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < nMemAddressRead; i++) {
 80040a8:	8afb      	ldrh	r3, [r7, #22]
 80040aa:	3301      	adds	r3, #1
 80040ac:	82fb      	strh	r3, [r7, #22]
 80040ae:	8afa      	ldrh	r2, [r7, #22]
 80040b0:	897b      	ldrh	r3, [r7, #10]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d3ec      	bcc.n	8004090 <MLX90640_I2CRead+0x4c>
  }

  return 0;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd90      	pop	{r4, r7, pc}
 80040c0:	20000134 	.word	0x20000134

080040c4 <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr,uint16_t writeAddress, uint16_t data) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af04      	add	r7, sp, #16
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
 80040ce:	460b      	mov	r3, r1
 80040d0:	80bb      	strh	r3, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	807b      	strh	r3, [r7, #2]
  uint8_t cmd[2];
  cmd[0] = data >> 8;
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	0a1b      	lsrs	r3, r3, #8
 80040da:	b29b      	uxth	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	733b      	strb	r3, [r7, #12]
  cmd[1] = data & 0xFF;
 80040e0:	887b      	ldrh	r3, [r7, #2]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	737b      	strb	r3, [r7, #13]
  //   uint8_t * pData,
  //   uint16_t Size,
  //   uint32_t Timeout
  // )

  if (HAL_I2C_Mem_Write(mlx_handle,
 80040e6:	4b19      	ldr	r3, [pc, #100]	@ (800414c <MLX90640_I2CWrite+0x88>)
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	b299      	uxth	r1, r3
 80040f2:	88ba      	ldrh	r2, [r7, #4]
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	9302      	str	r3, [sp, #8]
 80040fa:	2302      	movs	r3, #2
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	f107 030c 	add.w	r3, r7, #12
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2302      	movs	r3, #2
 8004106:	f000 fe11 	bl	8004d2c <HAL_I2C_Mem_Write>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <MLX90640_I2CWrite+0x52>
                        writeAddress,
                        I2C_MEMADD_SIZE_16BIT,
                        cmd,
                        2,
                        HAL_MAX_DELAY) != HAL_OK) {
    return -1;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	e016      	b.n	8004144 <MLX90640_I2CWrite+0x80>
  }

  uint16_t dataCheck = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	817b      	strh	r3, [r7, #10]
  if (MLX90640_I2CRead(slaveAddr, writeAddress, 1, &dataCheck) != HAL_OK)
 800411a:	f107 030a 	add.w	r3, r7, #10
 800411e:	88b9      	ldrh	r1, [r7, #4]
 8004120:	79f8      	ldrb	r0, [r7, #7]
 8004122:	2201      	movs	r2, #1
 8004124:	f7ff ff8e 	bl	8004044 <MLX90640_I2CRead>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <MLX90640_I2CWrite+0x70>
    return -2;
 800412e:	f06f 0301 	mvn.w	r3, #1
 8004132:	e007      	b.n	8004144 <MLX90640_I2CWrite+0x80>

  if (dataCheck != data)
 8004134:	897b      	ldrh	r3, [r7, #10]
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	429a      	cmp	r2, r3
 800413a:	d002      	beq.n	8004142 <MLX90640_I2CWrite+0x7e>
    return -3;
 800413c:	f06f 0302 	mvn.w	r3, #2
 8004140:	e000      	b.n	8004144 <MLX90640_I2CWrite+0x80>

  return 0;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000134 	.word	0x20000134

08004150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	4b0f      	ldr	r3, [pc, #60]	@ (8004194 <HAL_MspInit+0x44>)
 8004158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415a:	4a0e      	ldr	r2, [pc, #56]	@ (8004194 <HAL_MspInit+0x44>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	6613      	str	r3, [r2, #96]	@ 0x60
 8004162:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <HAL_MspInit+0x44>)
 8004164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800416e:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <HAL_MspInit+0x44>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	4a08      	ldr	r2, [pc, #32]	@ (8004194 <HAL_MspInit+0x44>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004178:	6593      	str	r3, [r2, #88]	@ 0x58
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_MspInit+0x44>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004186:	f001 fbfd 	bl	8005984 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000

08004198 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b09e      	sub	sp, #120	@ 0x78
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	2254      	movs	r2, #84	@ 0x54
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f002 fbe2 	bl	8006982 <memset>
  if(hi2c->Instance==I2C2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004240 <HAL_I2C_MspInit+0xa8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d137      	bne.n	8004238 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80041cc:	2300      	movs	r3, #0
 80041ce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041d0:	f107 0310 	add.w	r3, r7, #16
 80041d4:	4618      	mov	r0, r3
 80041d6:	f002 f8db 	bl	8006390 <HAL_RCCEx_PeriphCLKConfig>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80041e0:	f7fc ff80 	bl	80010e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e4:	4b17      	ldr	r3, [pc, #92]	@ (8004244 <HAL_I2C_MspInit+0xac>)
 80041e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e8:	4a16      	ldr	r2, [pc, #88]	@ (8004244 <HAL_I2C_MspInit+0xac>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041f0:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <HAL_I2C_MspInit+0xac>)
 80041f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004200:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004202:	2312      	movs	r3, #18
 8004204:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800420e:	2304      	movs	r3, #4
 8004210:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004212:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004216:	4619      	mov	r1, r3
 8004218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800421c:	f000 fa38 	bl	8004690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004220:	4b08      	ldr	r3, [pc, #32]	@ (8004244 <HAL_I2C_MspInit+0xac>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	4a07      	ldr	r2, [pc, #28]	@ (8004244 <HAL_I2C_MspInit+0xac>)
 8004226:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800422a:	6593      	str	r3, [r2, #88]	@ 0x58
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <HAL_I2C_MspInit+0xac>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8004238:	bf00      	nop
 800423a:	3778      	adds	r7, #120	@ 0x78
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40005800 	.word	0x40005800
 8004244:	40021000 	.word	0x40021000

08004248 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	@ 0x28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a17      	ldr	r2, [pc, #92]	@ (80042c4 <HAL_SPI_MspInit+0x7c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d128      	bne.n	80042bc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800426a:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <HAL_SPI_MspInit+0x80>)
 800426c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426e:	4a16      	ldr	r2, [pc, #88]	@ (80042c8 <HAL_SPI_MspInit+0x80>)
 8004270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004274:	6613      	str	r3, [r2, #96]	@ 0x60
 8004276:	4b14      	ldr	r3, [pc, #80]	@ (80042c8 <HAL_SPI_MspInit+0x80>)
 8004278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <HAL_SPI_MspInit+0x80>)
 8004284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004286:	4a10      	ldr	r2, [pc, #64]	@ (80042c8 <HAL_SPI_MspInit+0x80>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800428e:	4b0e      	ldr	r3, [pc, #56]	@ (80042c8 <HAL_SPI_MspInit+0x80>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800429a:	23e0      	movs	r3, #224	@ 0xe0
 800429c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429e:	2302      	movs	r3, #2
 80042a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a6:	2300      	movs	r3, #0
 80042a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042aa:	2305      	movs	r3, #5
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ae:	f107 0314 	add.w	r3, r7, #20
 80042b2:	4619      	mov	r1, r3
 80042b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042b8:	f000 f9ea 	bl	8004690 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80042bc:	bf00      	nop
 80042be:	3728      	adds	r7, #40	@ 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40013000 	.word	0x40013000
 80042c8:	40021000 	.word	0x40021000

080042cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <NMI_Handler+0x4>

080042d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042d8:	bf00      	nop
 80042da:	e7fd      	b.n	80042d8 <HardFault_Handler+0x4>

080042dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <MemManage_Handler+0x4>

080042e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <BusFault_Handler+0x4>

080042ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <UsageFault_Handler+0x4>

080042f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004322:	f000 f891 	bl	8004448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004330:	4b06      	ldr	r3, [pc, #24]	@ (800434c <SystemInit+0x20>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004336:	4a05      	ldr	r2, [pc, #20]	@ (800434c <SystemInit+0x20>)
 8004338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800433c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004350:	480d      	ldr	r0, [pc, #52]	@ (8004388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004352:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004354:	f7ff ffea 	bl	800432c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004358:	480c      	ldr	r0, [pc, #48]	@ (800438c <LoopForever+0x6>)
  ldr r1, =_edata
 800435a:	490d      	ldr	r1, [pc, #52]	@ (8004390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800435c:	4a0d      	ldr	r2, [pc, #52]	@ (8004394 <LoopForever+0xe>)
  movs r3, #0
 800435e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004360:	e002      	b.n	8004368 <LoopCopyDataInit>

08004362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004366:	3304      	adds	r3, #4

08004368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800436a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800436c:	d3f9      	bcc.n	8004362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800436e:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004370:	4c0a      	ldr	r4, [pc, #40]	@ (800439c <LoopForever+0x16>)
  movs r3, #0
 8004372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004374:	e001      	b.n	800437a <LoopFillZerobss>

08004376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004378:	3204      	adds	r2, #4

0800437a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800437a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800437c:	d3fb      	bcc.n	8004376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800437e:	f002 fb0f 	bl	80069a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004382:	f7fc fcb1 	bl	8000ce8 <main>

08004386 <LoopForever>:

LoopForever:
    b LoopForever
 8004386:	e7fe      	b.n	8004386 <LoopForever>
  ldr   r0, =_estack
 8004388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800438c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004390:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004394:	08007970 	.word	0x08007970
  ldr r2, =_sbss
 8004398:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800439c:	20001b78 	.word	0x20001b78

080043a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80043a0:	e7fe      	b.n	80043a0 <ADC1_2_IRQHandler>

080043a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043ac:	2003      	movs	r0, #3
 80043ae:	f000 f93d 	bl	800462c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043b2:	200f      	movs	r0, #15
 80043b4:	f000 f80e 	bl	80043d4 <HAL_InitTick>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	71fb      	strb	r3, [r7, #7]
 80043c2:	e001      	b.n	80043c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043c4:	f7ff fec4 	bl	8004150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043c8:	79fb      	ldrb	r3, [r7, #7]

}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80043e0:	4b16      	ldr	r3, [pc, #88]	@ (800443c <HAL_InitTick+0x68>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d022      	beq.n	800442e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80043e8:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <HAL_InitTick+0x6c>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b13      	ldr	r3, [pc, #76]	@ (800443c <HAL_InitTick+0x68>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80043f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f93a 	bl	8004676 <HAL_SYSTICK_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b0f      	cmp	r3, #15
 800440c:	d809      	bhi.n	8004422 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800440e:	2200      	movs	r2, #0
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	f04f 30ff 	mov.w	r0, #4294967295
 8004416:	f000 f914 	bl	8004642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800441a:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <HAL_InitTick+0x70>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	e007      	b.n	8004432 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
 8004426:	e004      	b.n	8004432 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e001      	b.n	8004432 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004432:	7bfb      	ldrb	r3, [r7, #15]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000008 	.word	0x20000008
 8004440:	20000000 	.word	0x20000000
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800444c:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <HAL_IncTick+0x1c>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <HAL_IncTick+0x20>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4413      	add	r3, r2
 8004456:	4a03      	ldr	r2, [pc, #12]	@ (8004464 <HAL_IncTick+0x1c>)
 8004458:	6013      	str	r3, [r2, #0]
}
 800445a:	bf00      	nop
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	20001a3c 	.word	0x20001a3c
 8004468:	20000008 	.word	0x20000008

0800446c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return uwTick;
 8004470:	4b03      	ldr	r3, [pc, #12]	@ (8004480 <HAL_GetTick+0x14>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20001a3c 	.word	0x20001a3c

08004484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800448c:	f7ff ffee 	bl	800446c <HAL_GetTick>
 8004490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d004      	beq.n	80044a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800449e:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_Delay+0x40>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044a8:	bf00      	nop
 80044aa:	f7ff ffdf 	bl	800446c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d8f7      	bhi.n	80044aa <HAL_Delay+0x26>
  {
  }
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000008 	.word	0x20000008

080044c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d8:	4b0c      	ldr	r3, [pc, #48]	@ (800450c <__NVIC_SetPriorityGrouping+0x44>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044e4:	4013      	ands	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044fa:	4a04      	ldr	r2, [pc, #16]	@ (800450c <__NVIC_SetPriorityGrouping+0x44>)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	60d3      	str	r3, [r2, #12]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004514:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <__NVIC_GetPriorityGrouping+0x18>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 0307 	and.w	r3, r3, #7
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	@ (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	@ (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	@ 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	@ 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045f8:	d301      	bcc.n	80045fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00f      	b.n	800461e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004628 <SysTick_Config+0x40>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004606:	210f      	movs	r1, #15
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f7ff ff8e 	bl	800452c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <SysTick_Config+0x40>)
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004616:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <SysTick_Config+0x40>)
 8004618:	2207      	movs	r2, #7
 800461a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	e000e010 	.word	0xe000e010

0800462c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff47 	bl	80044c8 <__NVIC_SetPriorityGrouping>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004650:	f7ff ff5e 	bl	8004510 <__NVIC_GetPriorityGrouping>
 8004654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7ff ff90 	bl	8004580 <NVIC_EncodePriority>
 8004660:	4602      	mov	r2, r0
 8004662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff5f 	bl	800452c <__NVIC_SetPriority>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ffb2 	bl	80045e8 <SysTick_Config>
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800469e:	e15a      	b.n	8004956 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 814c 	beq.w	8004950 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d005      	beq.n	80046d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d130      	bne.n	8004732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004706:	2201      	movs	r2, #1
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 0201 	and.w	r2, r3, #1
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b03      	cmp	r3, #3
 800473c:	d017      	beq.n	800476e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d123      	bne.n	80047c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	6939      	ldr	r1, [r7, #16]
 80047be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2203      	movs	r2, #3
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0203 	and.w	r2, r3, #3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80a6 	beq.w	8004950 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004804:	4b5b      	ldr	r3, [pc, #364]	@ (8004974 <HAL_GPIO_Init+0x2e4>)
 8004806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004808:	4a5a      	ldr	r2, [pc, #360]	@ (8004974 <HAL_GPIO_Init+0x2e4>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004810:	4b58      	ldr	r3, [pc, #352]	@ (8004974 <HAL_GPIO_Init+0x2e4>)
 8004812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800481c:	4a56      	ldr	r2, [pc, #344]	@ (8004978 <HAL_GPIO_Init+0x2e8>)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	3302      	adds	r3, #2
 8004824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	220f      	movs	r2, #15
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004846:	d01f      	beq.n	8004888 <HAL_GPIO_Init+0x1f8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a4c      	ldr	r2, [pc, #304]	@ (800497c <HAL_GPIO_Init+0x2ec>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d019      	beq.n	8004884 <HAL_GPIO_Init+0x1f4>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a4b      	ldr	r2, [pc, #300]	@ (8004980 <HAL_GPIO_Init+0x2f0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_GPIO_Init+0x1f0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a4a      	ldr	r2, [pc, #296]	@ (8004984 <HAL_GPIO_Init+0x2f4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00d      	beq.n	800487c <HAL_GPIO_Init+0x1ec>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a49      	ldr	r2, [pc, #292]	@ (8004988 <HAL_GPIO_Init+0x2f8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <HAL_GPIO_Init+0x1e8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a48      	ldr	r2, [pc, #288]	@ (800498c <HAL_GPIO_Init+0x2fc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_GPIO_Init+0x1e4>
 8004870:	2305      	movs	r3, #5
 8004872:	e00a      	b.n	800488a <HAL_GPIO_Init+0x1fa>
 8004874:	2306      	movs	r3, #6
 8004876:	e008      	b.n	800488a <HAL_GPIO_Init+0x1fa>
 8004878:	2304      	movs	r3, #4
 800487a:	e006      	b.n	800488a <HAL_GPIO_Init+0x1fa>
 800487c:	2303      	movs	r3, #3
 800487e:	e004      	b.n	800488a <HAL_GPIO_Init+0x1fa>
 8004880:	2302      	movs	r3, #2
 8004882:	e002      	b.n	800488a <HAL_GPIO_Init+0x1fa>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_GPIO_Init+0x1fa>
 8004888:	2300      	movs	r3, #0
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	f002 0203 	and.w	r2, r2, #3
 8004890:	0092      	lsls	r2, r2, #2
 8004892:	4093      	lsls	r3, r2
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800489a:	4937      	ldr	r1, [pc, #220]	@ (8004978 <HAL_GPIO_Init+0x2e8>)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048a8:	4b39      	ldr	r3, [pc, #228]	@ (8004990 <HAL_GPIO_Init+0x300>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048cc:	4a30      	ldr	r2, [pc, #192]	@ (8004990 <HAL_GPIO_Init+0x300>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004990 <HAL_GPIO_Init+0x300>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	43db      	mvns	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048f6:	4a26      	ldr	r2, [pc, #152]	@ (8004990 <HAL_GPIO_Init+0x300>)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80048fc:	4b24      	ldr	r3, [pc, #144]	@ (8004990 <HAL_GPIO_Init+0x300>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	43db      	mvns	r3, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004920:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <HAL_GPIO_Init+0x300>)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004926:	4b1a      	ldr	r3, [pc, #104]	@ (8004990 <HAL_GPIO_Init+0x300>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800494a:	4a11      	ldr	r2, [pc, #68]	@ (8004990 <HAL_GPIO_Init+0x300>)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	3301      	adds	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47f ae9d 	bne.w	80046a0 <HAL_GPIO_Init+0x10>
  }
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40021000 	.word	0x40021000
 8004978:	40010000 	.word	0x40010000
 800497c:	48000400 	.word	0x48000400
 8004980:	48000800 	.word	0x48000800
 8004984:	48000c00 	.word	0x48000c00
 8004988:	48001000 	.word	0x48001000
 800498c:	48001400 	.word	0x48001400
 8004990:	40010400 	.word	0x40010400

08004994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
 80049a0:	4613      	mov	r3, r2
 80049a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049a4:	787b      	ldrb	r3, [r7, #1]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049aa:	887a      	ldrh	r2, [r7, #2]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049b0:	e002      	b.n	80049b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e08d      	b.n	8004af2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fbd4 	bl	8004198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2224      	movs	r2, #36	@ 0x24
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	e006      	b.n	8004a4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d108      	bne.n	8004a66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	e007      	b.n	8004a76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69d9      	ldr	r1, [r3, #28]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1a      	ldr	r2, [r3, #32]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	461a      	mov	r2, r3
 8004b08:	460b      	mov	r3, r1
 8004b0a:	817b      	strh	r3, [r7, #10]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	f040 80fd 	bne.w	8004d18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_I2C_Master_Transmit+0x30>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0f6      	b.n	8004d1a <HAL_I2C_Master_Transmit+0x21e>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b34:	f7ff fc9a 	bl	800446c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	2319      	movs	r3, #25
 8004b40:	2201      	movs	r2, #1
 8004b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fbea 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0e1      	b.n	8004d1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2221      	movs	r2, #33	@ 0x21
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2210      	movs	r2, #16
 8004b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	893a      	ldrh	r2, [r7, #8]
 8004b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2bff      	cmp	r3, #255	@ 0xff
 8004b86:	d906      	bls.n	8004b96 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	22ff      	movs	r2, #255	@ 0xff
 8004b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e007      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004ba0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ba4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d024      	beq.n	8004bf8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	8979      	ldrh	r1, [r7, #10]
 8004bea:	4b4e      	ldr	r3, [pc, #312]	@ (8004d24 <HAL_I2C_Master_Transmit+0x228>)
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fd59 	bl	80056a8 <I2C_TransferConfig>
 8004bf6:	e066      	b.n	8004cc6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	8979      	ldrh	r1, [r7, #10]
 8004c00:	4b48      	ldr	r3, [pc, #288]	@ (8004d24 <HAL_I2C_Master_Transmit+0x228>)
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fd4e 	bl	80056a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c0c:	e05b      	b.n	8004cc6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	6a39      	ldr	r1, [r7, #32]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fbdd 	bl	80053d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e07b      	b.n	8004d1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	781a      	ldrb	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d034      	beq.n	8004cc6 <HAL_I2C_Master_Transmit+0x1ca>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d130      	bne.n	8004cc6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2180      	movs	r1, #128	@ 0x80
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fb56 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e04d      	b.n	8004d1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2bff      	cmp	r3, #255	@ 0xff
 8004c86:	d90e      	bls.n	8004ca6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	22ff      	movs	r2, #255	@ 0xff
 8004c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	8979      	ldrh	r1, [r7, #10]
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fd02 	bl	80056a8 <I2C_TransferConfig>
 8004ca4:	e00f      	b.n	8004cc6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	8979      	ldrh	r1, [r7, #10]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fcf1 	bl	80056a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d19e      	bne.n	8004c0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	6a39      	ldr	r1, [r7, #32]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fbc3 	bl	8005460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e01a      	b.n	8004d1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d28 <HAL_I2C_Master_Transmit+0x22c>)
 8004cf8:	400b      	ands	r3, r1
 8004cfa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	80002000 	.word	0x80002000
 8004d28:	fe00e800 	.word	0xfe00e800

08004d2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	817b      	strh	r3, [r7, #10]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	813b      	strh	r3, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	f040 80f9 	bne.w	8004f46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_I2C_Mem_Write+0x34>
 8004d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0ed      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_I2C_Mem_Write+0x4e>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e0e6      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d82:	f7ff fb73 	bl	800446c <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2319      	movs	r3, #25
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fac3 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0d1      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2221      	movs	r2, #33	@ 0x21
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2240      	movs	r2, #64	@ 0x40
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dcc:	88f8      	ldrh	r0, [r7, #6]
 8004dce:	893a      	ldrh	r2, [r7, #8]
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	4603      	mov	r3, r0
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f9d3 	bl	8005188 <I2C_RequestMemoryWrite>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0a9      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2bff      	cmp	r3, #255	@ 0xff
 8004dfc:	d90e      	bls.n	8004e1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	22ff      	movs	r2, #255	@ 0xff
 8004e02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	8979      	ldrh	r1, [r7, #10]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fc47 	bl	80056a8 <I2C_TransferConfig>
 8004e1a:	e00f      	b.n	8004e3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	8979      	ldrh	r1, [r7, #10]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fc36 	bl	80056a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fac6 	bl	80053d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e07b      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d034      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x1c8>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d130      	bne.n	8004ef4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2180      	movs	r1, #128	@ 0x80
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fa3f 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e04d      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2bff      	cmp	r3, #255	@ 0xff
 8004eb4:	d90e      	bls.n	8004ed4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	22ff      	movs	r2, #255	@ 0xff
 8004eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	8979      	ldrh	r1, [r7, #10]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fbeb 	bl	80056a8 <I2C_TransferConfig>
 8004ed2:	e00f      	b.n	8004ef4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	8979      	ldrh	r1, [r7, #10]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fbda 	bl	80056a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d19e      	bne.n	8004e3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 faac 	bl	8005460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e01a      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2220      	movs	r2, #32
 8004f18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b0a      	ldr	r3, [pc, #40]	@ (8004f50 <HAL_I2C_Mem_Write+0x224>)
 8004f26:	400b      	ands	r3, r1
 8004f28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e000      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	fe00e800 	.word	0xfe00e800

08004f54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	817b      	strh	r3, [r7, #10]
 8004f66:	460b      	mov	r3, r1
 8004f68:	813b      	strh	r3, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	f040 80fd 	bne.w	8005176 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x34>
 8004f82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0f1      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_I2C_Mem_Read+0x4e>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e0ea      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004faa:	f7ff fa5f 	bl	800446c <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2319      	movs	r3, #25
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f9af 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0d5      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2222      	movs	r2, #34	@ 0x22
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2240      	movs	r2, #64	@ 0x40
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ff4:	88f8      	ldrh	r0, [r7, #6]
 8004ff6:	893a      	ldrh	r2, [r7, #8]
 8004ff8:	8979      	ldrh	r1, [r7, #10]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	4603      	mov	r3, r0
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f913 	bl	8005230 <I2C_RequestMemoryRead>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0ad      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2bff      	cmp	r3, #255	@ 0xff
 8005024:	d90e      	bls.n	8005044 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	22ff      	movs	r2, #255	@ 0xff
 800502a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005030:	b2da      	uxtb	r2, r3
 8005032:	8979      	ldrh	r1, [r7, #10]
 8005034:	4b52      	ldr	r3, [pc, #328]	@ (8005180 <HAL_I2C_Mem_Read+0x22c>)
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fb33 	bl	80056a8 <I2C_TransferConfig>
 8005042:	e00f      	b.n	8005064 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005052:	b2da      	uxtb	r2, r3
 8005054:	8979      	ldrh	r1, [r7, #10]
 8005056:	4b4a      	ldr	r3, [pc, #296]	@ (8005180 <HAL_I2C_Mem_Read+0x22c>)
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fb22 	bl	80056a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	2200      	movs	r2, #0
 800506c:	2104      	movs	r1, #4
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f956 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e07c      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d034      	beq.n	8005124 <HAL_I2C_Mem_Read+0x1d0>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d130      	bne.n	8005124 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	@ 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f927 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e04d      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2bff      	cmp	r3, #255	@ 0xff
 80050e4:	d90e      	bls.n	8005104 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	@ 0xff
 80050ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	8979      	ldrh	r1, [r7, #10]
 80050f4:	2300      	movs	r3, #0
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fad3 	bl	80056a8 <I2C_TransferConfig>
 8005102:	e00f      	b.n	8005124 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005112:	b2da      	uxtb	r2, r3
 8005114:	8979      	ldrh	r1, [r7, #10]
 8005116:	2300      	movs	r3, #0
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fac2 	bl	80056a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d19a      	bne.n	8005064 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f994 	bl	8005460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e01a      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2220      	movs	r2, #32
 8005148:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <HAL_I2C_Mem_Read+0x230>)
 8005156:	400b      	ands	r3, r1
 8005158:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	80002400 	.word	0x80002400
 8005184:	fe00e800 	.word	0xfe00e800

08005188 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	4608      	mov	r0, r1
 8005192:	4611      	mov	r1, r2
 8005194:	461a      	mov	r2, r3
 8005196:	4603      	mov	r3, r0
 8005198:	817b      	strh	r3, [r7, #10]
 800519a:	460b      	mov	r3, r1
 800519c:	813b      	strh	r3, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	8979      	ldrh	r1, [r7, #10]
 80051a8:	4b20      	ldr	r3, [pc, #128]	@ (800522c <I2C_RequestMemoryWrite+0xa4>)
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fa79 	bl	80056a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f909 	bl	80053d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e02c      	b.n	8005224 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051d0:	893b      	ldrh	r3, [r7, #8]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80051da:	e015      	b.n	8005208 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051dc:	893b      	ldrh	r3, [r7, #8]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f8ef 	bl	80053d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e012      	b.n	8005224 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051fe:	893b      	ldrh	r3, [r7, #8]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2200      	movs	r2, #0
 8005210:	2180      	movs	r1, #128	@ 0x80
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f884 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	80002000 	.word	0x80002000

08005230 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	461a      	mov	r2, r3
 800523e:	4603      	mov	r3, r0
 8005240:	817b      	strh	r3, [r7, #10]
 8005242:	460b      	mov	r3, r1
 8005244:	813b      	strh	r3, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	8979      	ldrh	r1, [r7, #10]
 8005250:	4b20      	ldr	r3, [pc, #128]	@ (80052d4 <I2C_RequestMemoryRead+0xa4>)
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa26 	bl	80056a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	69b9      	ldr	r1, [r7, #24]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f8b6 	bl	80053d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e02c      	b.n	80052ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005280:	e015      	b.n	80052ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005282:	893b      	ldrh	r3, [r7, #8]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	b29b      	uxth	r3, r3
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	69b9      	ldr	r1, [r7, #24]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f89c 	bl	80053d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e012      	b.n	80052ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052a4:	893b      	ldrh	r3, [r7, #8]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2140      	movs	r1, #64	@ 0x40
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f831 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	80002000 	.word	0x80002000

080052d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d103      	bne.n	80052f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d007      	beq.n	8005314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	619a      	str	r2, [r3, #24]
  }
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005330:	e03b      	b.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f8d6 	bl	80054e8 <I2C_IsErrorOccurred>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e041      	b.n	80053ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d02d      	beq.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7ff f88d 	bl	800446c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <I2C_WaitOnFlagUntilTimeout+0x44>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d122      	bne.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	429a      	cmp	r2, r3
 8005380:	d113      	bne.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e00f      	b.n	80053ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d0b4      	beq.n	8005332 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053de:	e033      	b.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f87f 	bl	80054e8 <I2C_IsErrorOccurred>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e031      	b.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d025      	beq.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fc:	f7ff f836 	bl	800446c <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11a      	bne.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d013      	beq.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e007      	b.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d1c4      	bne.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800546c:	e02f      	b.n	80054ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f838 	bl	80054e8 <I2C_IsErrorOccurred>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e02d      	b.n	80054de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fe fff3 	bl	800446c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11a      	bne.n	80054ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d013      	beq.n	80054ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e007      	b.n	80054de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d1c8      	bne.n	800546e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	@ 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	d068      	beq.n	80055e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2210      	movs	r2, #16
 800551a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800551c:	e049      	b.n	80055b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d045      	beq.n	80055b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fe ffa1 	bl	800446c <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <I2C_IsErrorOccurred+0x54>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d13a      	bne.n	80055b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005546:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800554e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800555e:	d121      	bne.n	80055a4 <I2C_IsErrorOccurred+0xbc>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005566:	d01d      	beq.n	80055a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	2b20      	cmp	r3, #32
 800556c:	d01a      	beq.n	80055a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800557c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800557e:	f7fe ff75 	bl	800446c <HAL_GetTick>
 8005582:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005584:	e00e      	b.n	80055a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005586:	f7fe ff71 	bl	800446c <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b19      	cmp	r3, #25
 8005592:	d907      	bls.n	80055a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	f043 0320 	orr.w	r3, r3, #32
 800559a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80055a2:	e006      	b.n	80055b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d1e9      	bne.n	8005586 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d003      	beq.n	80055c8 <I2C_IsErrorOccurred+0xe0>
 80055c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0aa      	beq.n	800551e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2220      	movs	r2, #32
 80055d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	f043 0304 	orr.w	r3, r3, #4
 80055de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f043 0308 	orr.w	r3, r3, #8
 8005620:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800562a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	f043 0302 	orr.w	r3, r3, #2
 8005642:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800564c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01c      	beq.n	8005696 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff fe3b 	bl	80052d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <I2C_IsErrorOccurred+0x1bc>)
 800566e:	400b      	ands	r3, r1
 8005670:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	431a      	orrs	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800569a:	4618      	mov	r0, r3
 800569c:	3728      	adds	r7, #40	@ 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	fe00e800 	.word	0xfe00e800

080056a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	607b      	str	r3, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	817b      	strh	r3, [r7, #10]
 80056b6:	4613      	mov	r3, r2
 80056b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ba:	897b      	ldrh	r3, [r7, #10]
 80056bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056c0:	7a7b      	ldrb	r3, [r7, #9]
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	0d5b      	lsrs	r3, r3, #21
 80056e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80056e6:	4b08      	ldr	r3, [pc, #32]	@ (8005708 <I2C_TransferConfig+0x60>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	43db      	mvns	r3, r3
 80056ec:	ea02 0103 	and.w	r1, r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	03ff63ff 	.word	0x03ff63ff

0800570c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b20      	cmp	r3, #32
 8005720:	d138      	bne.n	8005794 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800572c:	2302      	movs	r3, #2
 800572e:	e032      	b.n	8005796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2224      	movs	r2, #36	@ 0x24
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800575e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	e000      	b.n	8005796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005794:	2302      	movs	r3, #2
  }
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d139      	bne.n	800582c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e033      	b.n	800582e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2224      	movs	r2, #36	@ 0x24
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80057f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	e000      	b.n	800582e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800582c:	2302      	movs	r3, #2
  }
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d141      	bne.n	80058ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800584a:	4b4b      	ldr	r3, [pc, #300]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005856:	d131      	bne.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005858:	4b47      	ldr	r3, [pc, #284]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800585e:	4a46      	ldr	r2, [pc, #280]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005868:	4b43      	ldr	r3, [pc, #268]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005870:	4a41      	ldr	r2, [pc, #260]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005876:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005878:	4b40      	ldr	r3, [pc, #256]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2232      	movs	r2, #50	@ 0x32
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	4a3f      	ldr	r2, [pc, #252]	@ (8005980 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	0c9b      	lsrs	r3, r3, #18
 800588a:	3301      	adds	r3, #1
 800588c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800588e:	e002      	b.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3b01      	subs	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005896:	4b38      	ldr	r3, [pc, #224]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a2:	d102      	bne.n	80058aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f2      	bne.n	8005890 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058aa:	4b33      	ldr	r3, [pc, #204]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b6:	d158      	bne.n	800596a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e057      	b.n	800596c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058cc:	e04d      	b.n	800596a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d4:	d141      	bne.n	800595a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058d6:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e2:	d131      	bne.n	8005948 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058e4:	4b24      	ldr	r3, [pc, #144]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ea:	4a23      	ldr	r2, [pc, #140]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058f4:	4b20      	ldr	r3, [pc, #128]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005902:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005904:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2232      	movs	r2, #50	@ 0x32
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	4a1c      	ldr	r2, [pc, #112]	@ (8005980 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	0c9b      	lsrs	r3, r3, #18
 8005916:	3301      	adds	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800591a:	e002      	b.n	8005922 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3b01      	subs	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005922:	4b15      	ldr	r3, [pc, #84]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800592a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800592e:	d102      	bne.n	8005936 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f2      	bne.n	800591c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005936:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800593e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005942:	d112      	bne.n	800596a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e011      	b.n	800596c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005948:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800594a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594e:	4a0a      	ldr	r2, [pc, #40]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005954:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005958:	e007      	b.n	800596a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800595a:	4b07      	ldr	r3, [pc, #28]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005962:	4a05      	ldr	r2, [pc, #20]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005964:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005968:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40007000 	.word	0x40007000
 800597c:	20000000 	.word	0x20000000
 8005980:	431bde83 	.word	0x431bde83

08005984 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005988:	4b05      	ldr	r3, [pc, #20]	@ (80059a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4a04      	ldr	r2, [pc, #16]	@ (80059a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800598e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005992:	6093      	str	r3, [r2, #8]
}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40007000 	.word	0x40007000

080059a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e2fe      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d075      	beq.n	8005aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059c2:	4b97      	ldr	r3, [pc, #604]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059cc:	4b94      	ldr	r3, [pc, #592]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b0c      	cmp	r3, #12
 80059da:	d102      	bne.n	80059e2 <HAL_RCC_OscConfig+0x3e>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d002      	beq.n	80059e8 <HAL_RCC_OscConfig+0x44>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d10b      	bne.n	8005a00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e8:	4b8d      	ldr	r3, [pc, #564]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d05b      	beq.n	8005aac <HAL_RCC_OscConfig+0x108>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d157      	bne.n	8005aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e2d9      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a08:	d106      	bne.n	8005a18 <HAL_RCC_OscConfig+0x74>
 8005a0a:	4b85      	ldr	r3, [pc, #532]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a84      	ldr	r2, [pc, #528]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e01d      	b.n	8005a54 <HAL_RCC_OscConfig+0xb0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a20:	d10c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x98>
 8005a22:	4b7f      	ldr	r3, [pc, #508]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a7e      	ldr	r2, [pc, #504]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a7b      	ldr	r2, [pc, #492]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e00b      	b.n	8005a54 <HAL_RCC_OscConfig+0xb0>
 8005a3c:	4b78      	ldr	r3, [pc, #480]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a77      	ldr	r2, [pc, #476]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4b75      	ldr	r3, [pc, #468]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a74      	ldr	r2, [pc, #464]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d013      	beq.n	8005a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7fe fd06 	bl	800446c <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a64:	f7fe fd02 	bl	800446c <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b64      	cmp	r3, #100	@ 0x64
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e29e      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a76:	4b6a      	ldr	r3, [pc, #424]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f0      	beq.n	8005a64 <HAL_RCC_OscConfig+0xc0>
 8005a82:	e014      	b.n	8005aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fe fcf2 	bl	800446c <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a8c:	f7fe fcee 	bl	800446c <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	@ 0x64
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e28a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a9e:	4b60      	ldr	r3, [pc, #384]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0xe8>
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d075      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aba:	4b59      	ldr	r3, [pc, #356]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
 8005ac2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac4:	4b56      	ldr	r3, [pc, #344]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	d102      	bne.n	8005ada <HAL_RCC_OscConfig+0x136>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d002      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x13c>
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d11f      	bne.n	8005b20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_OscConfig+0x154>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e25d      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af8:	4b49      	ldr	r3, [pc, #292]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	061b      	lsls	r3, r3, #24
 8005b06:	4946      	ldr	r1, [pc, #280]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b0c:	4b45      	ldr	r3, [pc, #276]	@ (8005c24 <HAL_RCC_OscConfig+0x280>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe fc5f 	bl	80043d4 <HAL_InitTick>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d043      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e249      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d023      	beq.n	8005b70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b28:	4b3d      	ldr	r3, [pc, #244]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fe fc9a 	bl	800446c <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b3c:	f7fe fc96 	bl	800446c <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e232      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b4e:	4b34      	ldr	r3, [pc, #208]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b5a:	4b31      	ldr	r3, [pc, #196]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	061b      	lsls	r3, r3, #24
 8005b68:	492d      	ldr	r1, [pc, #180]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	604b      	str	r3, [r1, #4]
 8005b6e:	e01a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b70:	4b2b      	ldr	r3, [pc, #172]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2a      	ldr	r2, [pc, #168]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7c:	f7fe fc76 	bl	800446c <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b84:	f7fe fc72 	bl	800446c <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e20e      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b96:	4b22      	ldr	r3, [pc, #136]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f0      	bne.n	8005b84 <HAL_RCC_OscConfig+0x1e0>
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d041      	beq.n	8005c36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01c      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bba:	4b19      	ldr	r3, [pc, #100]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc0:	4a17      	ldr	r2, [pc, #92]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bca:	f7fe fc4f 	bl	800446c <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd2:	f7fe fc4b 	bl	800446c <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e1e7      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005be4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0ef      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x22e>
 8005bf2:	e020      	b.n	8005c36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bfa:	4a09      	ldr	r2, [pc, #36]	@ (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c04:	f7fe fc32 	bl	800446c <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c0a:	e00d      	b.n	8005c28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0c:	f7fe fc2e 	bl	800446c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d906      	bls.n	8005c28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e1ca      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
 8005c1e:	bf00      	nop
 8005c20:	40021000 	.word	0x40021000
 8005c24:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c28:	4b8c      	ldr	r3, [pc, #560]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1ea      	bne.n	8005c0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80a6 	beq.w	8005d90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c44:	2300      	movs	r3, #0
 8005c46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c48:	4b84      	ldr	r3, [pc, #528]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_OscConfig+0x2b4>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_RCC_OscConfig+0x2b6>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c62:	4a7e      	ldr	r2, [pc, #504]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c6a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c76:	2301      	movs	r3, #1
 8005c78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c7a:	4b79      	ldr	r3, [pc, #484]	@ (8005e60 <HAL_RCC_OscConfig+0x4bc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d118      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c86:	4b76      	ldr	r3, [pc, #472]	@ (8005e60 <HAL_RCC_OscConfig+0x4bc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a75      	ldr	r2, [pc, #468]	@ (8005e60 <HAL_RCC_OscConfig+0x4bc>)
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c92:	f7fe fbeb 	bl	800446c <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9a:	f7fe fbe7 	bl	800446c <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e183      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cac:	4b6c      	ldr	r3, [pc, #432]	@ (8005e60 <HAL_RCC_OscConfig+0x4bc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d108      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x32e>
 8005cc0:	4b66      	ldr	r3, [pc, #408]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc6:	4a65      	ldr	r2, [pc, #404]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cd0:	e024      	b.n	8005d1c <HAL_RCC_OscConfig+0x378>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d110      	bne.n	8005cfc <HAL_RCC_OscConfig+0x358>
 8005cda:	4b60      	ldr	r3, [pc, #384]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce0:	4a5e      	ldr	r2, [pc, #376]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005ce2:	f043 0304 	orr.w	r3, r3, #4
 8005ce6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cea:	4b5c      	ldr	r3, [pc, #368]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf0:	4a5a      	ldr	r2, [pc, #360]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cfa:	e00f      	b.n	8005d1c <HAL_RCC_OscConfig+0x378>
 8005cfc:	4b57      	ldr	r3, [pc, #348]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d02:	4a56      	ldr	r2, [pc, #344]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d0c:	4b53      	ldr	r3, [pc, #332]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d12:	4a52      	ldr	r2, [pc, #328]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005d14:	f023 0304 	bic.w	r3, r3, #4
 8005d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d016      	beq.n	8005d52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fe fba2 	bl	800446c <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2c:	f7fe fb9e 	bl	800446c <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e138      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d42:	4b46      	ldr	r3, [pc, #280]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ed      	beq.n	8005d2c <HAL_RCC_OscConfig+0x388>
 8005d50:	e015      	b.n	8005d7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d52:	f7fe fb8b 	bl	800446c <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d58:	e00a      	b.n	8005d70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d5a:	f7fe fb87 	bl	800446c <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e121      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d70:	4b3a      	ldr	r3, [pc, #232]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1ed      	bne.n	8005d5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d7e:	7ffb      	ldrb	r3, [r7, #31]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d105      	bne.n	8005d90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d84:	4b35      	ldr	r3, [pc, #212]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d88:	4a34      	ldr	r2, [pc, #208]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d03c      	beq.n	8005e16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01c      	beq.n	8005dde <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005da4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005daa:	4a2c      	ldr	r2, [pc, #176]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fe fb5a 	bl	800446c <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dbc:	f7fe fb56 	bl	800446c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e0f2      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dce:	4b23      	ldr	r3, [pc, #140]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0ef      	beq.n	8005dbc <HAL_RCC_OscConfig+0x418>
 8005ddc:	e01b      	b.n	8005e16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dde:	4b1f      	ldr	r3, [pc, #124]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005de4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dee:	f7fe fb3d 	bl	800446c <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005df6:	f7fe fb39 	bl	800446c <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e0d5      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e08:	4b14      	ldr	r3, [pc, #80]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1ef      	bne.n	8005df6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80c9 	beq.w	8005fb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e20:	4b0e      	ldr	r3, [pc, #56]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 030c 	and.w	r3, r3, #12
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	f000 8083 	beq.w	8005f34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d15e      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e36:	4b09      	ldr	r3, [pc, #36]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a08      	ldr	r2, [pc, #32]	@ (8005e5c <HAL_RCC_OscConfig+0x4b8>)
 8005e3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fe fb13 	bl	800446c <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e48:	e00c      	b.n	8005e64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4a:	f7fe fb0f 	bl	800446c <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d905      	bls.n	8005e64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e0ab      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e64:	4b55      	ldr	r3, [pc, #340]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1ec      	bne.n	8005e4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e70:	4b52      	ldr	r3, [pc, #328]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	4b52      	ldr	r3, [pc, #328]	@ (8005fc0 <HAL_RCC_OscConfig+0x61c>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6a11      	ldr	r1, [r2, #32]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e80:	3a01      	subs	r2, #1
 8005e82:	0112      	lsls	r2, r2, #4
 8005e84:	4311      	orrs	r1, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e8a:	0212      	lsls	r2, r2, #8
 8005e8c:	4311      	orrs	r1, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e92:	0852      	lsrs	r2, r2, #1
 8005e94:	3a01      	subs	r2, #1
 8005e96:	0552      	lsls	r2, r2, #21
 8005e98:	4311      	orrs	r1, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e9e:	0852      	lsrs	r2, r2, #1
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	0652      	lsls	r2, r2, #25
 8005ea4:	4311      	orrs	r1, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005eaa:	06d2      	lsls	r2, r2, #27
 8005eac:	430a      	orrs	r2, r1
 8005eae:	4943      	ldr	r1, [pc, #268]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb4:	4b41      	ldr	r3, [pc, #260]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a40      	ldr	r2, [pc, #256]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005eba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ebe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a3d      	ldr	r2, [pc, #244]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ecc:	f7fe face 	bl	800446c <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed4:	f7fe faca 	bl	800446c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e066      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee6:	4b35      	ldr	r3, [pc, #212]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x530>
 8005ef2:	e05e      	b.n	8005fb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef4:	4b31      	ldr	r3, [pc, #196]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a30      	ldr	r2, [pc, #192]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005efa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fe fab4 	bl	800446c <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f08:	f7fe fab0 	bl	800446c <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e04c      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f1a:	4b28      	ldr	r3, [pc, #160]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f0      	bne.n	8005f08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005f26:	4b25      	ldr	r3, [pc, #148]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	4924      	ldr	r1, [pc, #144]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005f2c:	4b25      	ldr	r3, [pc, #148]	@ (8005fc4 <HAL_RCC_OscConfig+0x620>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	60cb      	str	r3, [r1, #12]
 8005f32:	e03e      	b.n	8005fb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e039      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f40:	4b1e      	ldr	r3, [pc, #120]	@ (8005fbc <HAL_RCC_OscConfig+0x618>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 0203 	and.w	r2, r3, #3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d12c      	bne.n	8005fae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d123      	bne.n	8005fae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d11b      	bne.n	8005fae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d113      	bne.n	8005fae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	3b01      	subs	r3, #1
 8005f94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d109      	bne.n	8005fae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d001      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	019f800c 	.word	0x019f800c
 8005fc4:	feeefffc 	.word	0xfeeefffc

08005fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e11e      	b.n	800621e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe0:	4b91      	ldr	r3, [pc, #580]	@ (8006228 <HAL_RCC_ClockConfig+0x260>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d910      	bls.n	8006010 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fee:	4b8e      	ldr	r3, [pc, #568]	@ (8006228 <HAL_RCC_ClockConfig+0x260>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f023 020f 	bic.w	r2, r3, #15
 8005ff6:	498c      	ldr	r1, [pc, #560]	@ (8006228 <HAL_RCC_ClockConfig+0x260>)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	4b8a      	ldr	r3, [pc, #552]	@ (8006228 <HAL_RCC_ClockConfig+0x260>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e106      	b.n	800621e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d073      	beq.n	8006104 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d129      	bne.n	8006078 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006024:	4b81      	ldr	r3, [pc, #516]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0f4      	b.n	800621e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006034:	f000 f966 	bl	8006304 <RCC_GetSysClockFreqFromPLLSource>
 8006038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4a7c      	ldr	r2, [pc, #496]	@ (8006230 <HAL_RCC_ClockConfig+0x268>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d93f      	bls.n	80060c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006042:	4b7a      	ldr	r3, [pc, #488]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006056:	2b00      	cmp	r3, #0
 8006058:	d033      	beq.n	80060c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800605e:	2b00      	cmp	r3, #0
 8006060:	d12f      	bne.n	80060c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006062:	4b72      	ldr	r3, [pc, #456]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800606a:	4a70      	ldr	r2, [pc, #448]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 800606c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006070:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006072:	2380      	movs	r3, #128	@ 0x80
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e024      	b.n	80060c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d107      	bne.n	8006090 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006080:	4b6a      	ldr	r3, [pc, #424]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d109      	bne.n	80060a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0c6      	b.n	800621e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006090:	4b66      	ldr	r3, [pc, #408]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0be      	b.n	800621e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80060a0:	f000 f8ce 	bl	8006240 <HAL_RCC_GetSysClockFreq>
 80060a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4a61      	ldr	r2, [pc, #388]	@ (8006230 <HAL_RCC_ClockConfig+0x268>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d909      	bls.n	80060c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060ae:	4b5f      	ldr	r3, [pc, #380]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b6:	4a5d      	ldr	r2, [pc, #372]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80060b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80060be:	2380      	movs	r3, #128	@ 0x80
 80060c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060c2:	4b5a      	ldr	r3, [pc, #360]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f023 0203 	bic.w	r2, r3, #3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	4957      	ldr	r1, [pc, #348]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d4:	f7fe f9ca 	bl	800446c <HAL_GetTick>
 80060d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060da:	e00a      	b.n	80060f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060dc:	f7fe f9c6 	bl	800446c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e095      	b.n	800621e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f2:	4b4e      	ldr	r3, [pc, #312]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 020c 	and.w	r2, r3, #12
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	429a      	cmp	r2, r3
 8006102:	d1eb      	bne.n	80060dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d023      	beq.n	8006158 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800611c:	4b43      	ldr	r3, [pc, #268]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4a42      	ldr	r2, [pc, #264]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006126:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006134:	4b3d      	ldr	r3, [pc, #244]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800613c:	4a3b      	ldr	r2, [pc, #236]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 800613e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006144:	4b39      	ldr	r3, [pc, #228]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	4936      	ldr	r1, [pc, #216]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006152:	4313      	orrs	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
 8006156:	e008      	b.n	800616a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b80      	cmp	r3, #128	@ 0x80
 800615c:	d105      	bne.n	800616a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800615e:	4b33      	ldr	r3, [pc, #204]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	4a32      	ldr	r2, [pc, #200]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 8006164:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006168:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800616a:	4b2f      	ldr	r3, [pc, #188]	@ (8006228 <HAL_RCC_ClockConfig+0x260>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d21d      	bcs.n	80061b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006178:	4b2b      	ldr	r3, [pc, #172]	@ (8006228 <HAL_RCC_ClockConfig+0x260>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f023 020f 	bic.w	r2, r3, #15
 8006180:	4929      	ldr	r1, [pc, #164]	@ (8006228 <HAL_RCC_ClockConfig+0x260>)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	4313      	orrs	r3, r2
 8006186:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006188:	f7fe f970 	bl	800446c <HAL_GetTick>
 800618c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800618e:	e00a      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006190:	f7fe f96c 	bl	800446c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e03b      	b.n	800621e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a6:	4b20      	ldr	r3, [pc, #128]	@ (8006228 <HAL_RCC_ClockConfig+0x260>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d1ed      	bne.n	8006190 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061c0:	4b1a      	ldr	r3, [pc, #104]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4917      	ldr	r1, [pc, #92]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061de:	4b13      	ldr	r3, [pc, #76]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	490f      	ldr	r1, [pc, #60]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061f2:	f000 f825 	bl	8006240 <HAL_RCC_GetSysClockFreq>
 80061f6:	4602      	mov	r2, r0
 80061f8:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <HAL_RCC_ClockConfig+0x264>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	490c      	ldr	r1, [pc, #48]	@ (8006234 <HAL_RCC_ClockConfig+0x26c>)
 8006204:	5ccb      	ldrb	r3, [r1, r3]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	fa22 f303 	lsr.w	r3, r2, r3
 800620e:	4a0a      	ldr	r2, [pc, #40]	@ (8006238 <HAL_RCC_ClockConfig+0x270>)
 8006210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006212:	4b0a      	ldr	r3, [pc, #40]	@ (800623c <HAL_RCC_ClockConfig+0x274>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe f8dc 	bl	80043d4 <HAL_InitTick>
 800621c:	4603      	mov	r3, r0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40022000 	.word	0x40022000
 800622c:	40021000 	.word	0x40021000
 8006230:	04c4b400 	.word	0x04c4b400
 8006234:	08007918 	.word	0x08007918
 8006238:	20000000 	.word	0x20000000
 800623c:	20000004 	.word	0x20000004

08006240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006246:	4b2c      	ldr	r3, [pc, #176]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 030c 	and.w	r3, r3, #12
 800624e:	2b04      	cmp	r3, #4
 8006250:	d102      	bne.n	8006258 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006252:	4b2a      	ldr	r3, [pc, #168]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	e047      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006258:	4b27      	ldr	r3, [pc, #156]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	2b08      	cmp	r3, #8
 8006262:	d102      	bne.n	800626a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006264:	4b26      	ldr	r3, [pc, #152]	@ (8006300 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	e03e      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800626a:	4b23      	ldr	r3, [pc, #140]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 030c 	and.w	r3, r3, #12
 8006272:	2b0c      	cmp	r3, #12
 8006274:	d136      	bne.n	80062e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006276:	4b20      	ldr	r3, [pc, #128]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006280:	4b1d      	ldr	r3, [pc, #116]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	3301      	adds	r3, #1
 800628c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b03      	cmp	r3, #3
 8006292:	d10c      	bne.n	80062ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006294:	4a1a      	ldr	r2, [pc, #104]	@ (8006300 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	fbb2 f3f3 	udiv	r3, r2, r3
 800629c:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800629e:	68d2      	ldr	r2, [r2, #12]
 80062a0:	0a12      	lsrs	r2, r2, #8
 80062a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062a6:	fb02 f303 	mul.w	r3, r2, r3
 80062aa:	617b      	str	r3, [r7, #20]
      break;
 80062ac:	e00c      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062ae:	4a13      	ldr	r2, [pc, #76]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b6:	4a10      	ldr	r2, [pc, #64]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062b8:	68d2      	ldr	r2, [r2, #12]
 80062ba:	0a12      	lsrs	r2, r2, #8
 80062bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062c0:	fb02 f303 	mul.w	r3, r2, r3
 80062c4:	617b      	str	r3, [r7, #20]
      break;
 80062c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062c8:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	0e5b      	lsrs	r3, r3, #25
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	3301      	adds	r3, #1
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	e001      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062e8:	693b      	ldr	r3, [r7, #16]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40021000 	.word	0x40021000
 80062fc:	00f42400 	.word	0x00f42400
 8006300:	007a1200 	.word	0x007a1200

08006304 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800630a:	4b1e      	ldr	r3, [pc, #120]	@ (8006384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006314:	4b1b      	ldr	r3, [pc, #108]	@ (8006384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	3301      	adds	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d10c      	bne.n	8006342 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006328:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	4a14      	ldr	r2, [pc, #80]	@ (8006384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006332:	68d2      	ldr	r2, [r2, #12]
 8006334:	0a12      	lsrs	r2, r2, #8
 8006336:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800633a:	fb02 f303 	mul.w	r3, r2, r3
 800633e:	617b      	str	r3, [r7, #20]
    break;
 8006340:	e00c      	b.n	800635c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006342:	4a12      	ldr	r2, [pc, #72]	@ (800638c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	fbb2 f3f3 	udiv	r3, r2, r3
 800634a:	4a0e      	ldr	r2, [pc, #56]	@ (8006384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800634c:	68d2      	ldr	r2, [r2, #12]
 800634e:	0a12      	lsrs	r2, r2, #8
 8006350:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006354:	fb02 f303 	mul.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
    break;
 800635a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800635c:	4b09      	ldr	r3, [pc, #36]	@ (8006384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	0e5b      	lsrs	r3, r3, #25
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	3301      	adds	r3, #1
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006376:	687b      	ldr	r3, [r7, #4]
}
 8006378:	4618      	mov	r0, r3
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40021000 	.word	0x40021000
 8006388:	007a1200 	.word	0x007a1200
 800638c:	00f42400 	.word	0x00f42400

08006390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006398:	2300      	movs	r3, #0
 800639a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800639c:	2300      	movs	r3, #0
 800639e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8098 	beq.w	80064de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ae:	2300      	movs	r3, #0
 80063b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063b2:	4b43      	ldr	r3, [pc, #268]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10d      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063be:	4b40      	ldr	r3, [pc, #256]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c2:	4a3f      	ldr	r2, [pc, #252]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ca:	4b3d      	ldr	r3, [pc, #244]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063d6:	2301      	movs	r3, #1
 80063d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063da:	4b3a      	ldr	r3, [pc, #232]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a39      	ldr	r2, [pc, #228]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063e6:	f7fe f841 	bl	800446c <HAL_GetTick>
 80063ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ec:	e009      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ee:	f7fe f83d 	bl	800446c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d902      	bls.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	74fb      	strb	r3, [r7, #19]
        break;
 8006400:	e005      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006402:	4b30      	ldr	r3, [pc, #192]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0ef      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800640e:	7cfb      	ldrb	r3, [r7, #19]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d159      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006414:	4b2a      	ldr	r3, [pc, #168]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800641e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01e      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	429a      	cmp	r2, r3
 800642e:	d019      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006430:	4b23      	ldr	r3, [pc, #140]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800643c:	4b20      	ldr	r3, [pc, #128]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006442:	4a1f      	ldr	r2, [pc, #124]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800644c:	4b1c      	ldr	r3, [pc, #112]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006452:	4a1b      	ldr	r2, [pc, #108]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800645c:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d016      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646e:	f7fd fffd 	bl	800446c <HAL_GetTick>
 8006472:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006474:	e00b      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006476:	f7fd fff9 	bl	800446c <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006484:	4293      	cmp	r3, r2
 8006486:	d902      	bls.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	74fb      	strb	r3, [r7, #19]
            break;
 800648c:	e006      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800648e:	4b0c      	ldr	r3, [pc, #48]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0ec      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064a2:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b0:	4903      	ldr	r1, [pc, #12]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80064b8:	e008      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064ba:	7cfb      	ldrb	r3, [r7, #19]
 80064bc:	74bb      	strb	r3, [r7, #18]
 80064be:	e005      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064c0:	40021000 	.word	0x40021000
 80064c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	7cfb      	ldrb	r3, [r7, #19]
 80064ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064cc:	7c7b      	ldrb	r3, [r7, #17]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d105      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064d2:	4ba7      	ldr	r3, [pc, #668]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d6:	4aa6      	ldr	r2, [pc, #664]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064ea:	4ba1      	ldr	r3, [pc, #644]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f023 0203 	bic.w	r2, r3, #3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	499d      	ldr	r1, [pc, #628]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800650c:	4b98      	ldr	r3, [pc, #608]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006512:	f023 020c 	bic.w	r2, r3, #12
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	4995      	ldr	r1, [pc, #596]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800652e:	4b90      	ldr	r3, [pc, #576]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006534:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	498c      	ldr	r1, [pc, #560]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006550:	4b87      	ldr	r3, [pc, #540]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006556:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	4984      	ldr	r1, [pc, #528]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0310 	and.w	r3, r3, #16
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006572:	4b7f      	ldr	r3, [pc, #508]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	497b      	ldr	r1, [pc, #492]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006594:	4b76      	ldr	r3, [pc, #472]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	4973      	ldr	r1, [pc, #460]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065b6:	4b6e      	ldr	r3, [pc, #440]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	496a      	ldr	r1, [pc, #424]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065d8:	4b65      	ldr	r3, [pc, #404]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4962      	ldr	r1, [pc, #392]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006600:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006608:	4959      	ldr	r1, [pc, #356]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800661c:	4b54      	ldr	r3, [pc, #336]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006622:	f023 0203 	bic.w	r2, r3, #3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662a:	4951      	ldr	r1, [pc, #324]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800663e:	4b4c      	ldr	r3, [pc, #304]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006644:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	4948      	ldr	r1, [pc, #288]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006660:	4b43      	ldr	r3, [pc, #268]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006666:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666e:	4940      	ldr	r1, [pc, #256]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800667e:	d105      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006680:	4b3b      	ldr	r3, [pc, #236]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4a3a      	ldr	r2, [pc, #232]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800668a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006698:	4b35      	ldr	r3, [pc, #212]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a6:	4932      	ldr	r1, [pc, #200]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066b6:	d105      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066c2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066d0:	4b27      	ldr	r3, [pc, #156]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066de:	4924      	ldr	r1, [pc, #144]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066ee:	d105      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006708:	4b19      	ldr	r3, [pc, #100]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006716:	4916      	ldr	r1, [pc, #88]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006726:	d105      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006728:	4b11      	ldr	r3, [pc, #68]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4a10      	ldr	r2, [pc, #64]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006732:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d019      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006740:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006746:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674e:	4908      	ldr	r1, [pc, #32]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800675e:	d109      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006760:	4b03      	ldr	r3, [pc, #12]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4a02      	ldr	r2, [pc, #8]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800676a:	60d3      	str	r3, [r2, #12]
 800676c:	e002      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800676e:	bf00      	nop
 8006770:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d015      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006780:	4b29      	ldr	r3, [pc, #164]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006786:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678e:	4926      	ldr	r1, [pc, #152]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800679e:	d105      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067a0:	4b21      	ldr	r3, [pc, #132]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a20      	ldr	r2, [pc, #128]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d015      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80067b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067be:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c6:	4918      	ldr	r1, [pc, #96]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d6:	d105      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067d8:	4b13      	ldr	r3, [pc, #76]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a12      	ldr	r2, [pc, #72]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d015      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067fe:	490a      	ldr	r1, [pc, #40]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800680a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800680e:	d105      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006810:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	4a04      	ldr	r2, [pc, #16]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800681a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800681c:	7cbb      	ldrb	r3, [r7, #18]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40021000 	.word	0x40021000

0800682c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e09d      	b.n	800697a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800684e:	d009      	beq.n	8006864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	61da      	str	r2, [r3, #28]
 8006856:	e005      	b.n	8006864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fd fce2 	bl	8004248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800689a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068a4:	d902      	bls.n	80068ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e002      	b.n	80068b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80068ba:	d007      	beq.n	80068cc <HAL_SPI_Init+0xa0>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068c4:	d002      	beq.n	80068cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690e:	ea42 0103 	orr.w	r1, r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	f003 0204 	and.w	r2, r3, #4
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006948:	ea42 0103 	orr.w	r1, r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <memset>:
 8006982:	4402      	add	r2, r0
 8006984:	4603      	mov	r3, r0
 8006986:	4293      	cmp	r3, r2
 8006988:	d100      	bne.n	800698c <memset+0xa>
 800698a:	4770      	bx	lr
 800698c:	f803 1b01 	strb.w	r1, [r3], #1
 8006990:	e7f9      	b.n	8006986 <memset+0x4>
	...

08006994 <__errno>:
 8006994:	4b01      	ldr	r3, [pc, #4]	@ (800699c <__errno+0x8>)
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	2000000c 	.word	0x2000000c

080069a0 <__libc_init_array>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	4d0d      	ldr	r5, [pc, #52]	@ (80069d8 <__libc_init_array+0x38>)
 80069a4:	4c0d      	ldr	r4, [pc, #52]	@ (80069dc <__libc_init_array+0x3c>)
 80069a6:	1b64      	subs	r4, r4, r5
 80069a8:	10a4      	asrs	r4, r4, #2
 80069aa:	2600      	movs	r6, #0
 80069ac:	42a6      	cmp	r6, r4
 80069ae:	d109      	bne.n	80069c4 <__libc_init_array+0x24>
 80069b0:	4d0b      	ldr	r5, [pc, #44]	@ (80069e0 <__libc_init_array+0x40>)
 80069b2:	4c0c      	ldr	r4, [pc, #48]	@ (80069e4 <__libc_init_array+0x44>)
 80069b4:	f000 ffa4 	bl	8007900 <_init>
 80069b8:	1b64      	subs	r4, r4, r5
 80069ba:	10a4      	asrs	r4, r4, #2
 80069bc:	2600      	movs	r6, #0
 80069be:	42a6      	cmp	r6, r4
 80069c0:	d105      	bne.n	80069ce <__libc_init_array+0x2e>
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c8:	4798      	blx	r3
 80069ca:	3601      	adds	r6, #1
 80069cc:	e7ee      	b.n	80069ac <__libc_init_array+0xc>
 80069ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d2:	4798      	blx	r3
 80069d4:	3601      	adds	r6, #1
 80069d6:	e7f2      	b.n	80069be <__libc_init_array+0x1e>
 80069d8:	08007968 	.word	0x08007968
 80069dc:	08007968 	.word	0x08007968
 80069e0:	08007968 	.word	0x08007968
 80069e4:	0800796c 	.word	0x0800796c

080069e8 <pow>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	ed2d 8b02 	vpush	{d8}
 80069ee:	eeb0 8a40 	vmov.f32	s16, s0
 80069f2:	eef0 8a60 	vmov.f32	s17, s1
 80069f6:	ec55 4b11 	vmov	r4, r5, d1
 80069fa:	f000 f975 	bl	8006ce8 <__ieee754_pow>
 80069fe:	4622      	mov	r2, r4
 8006a00:	462b      	mov	r3, r5
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	ec57 6b10 	vmov	r6, r7, d0
 8006a0a:	f7fa f85b 	bl	8000ac4 <__aeabi_dcmpun>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d13b      	bne.n	8006a8a <pow+0xa2>
 8006a12:	ec51 0b18 	vmov	r0, r1, d8
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f7fa f821 	bl	8000a60 <__aeabi_dcmpeq>
 8006a1e:	b1b8      	cbz	r0, 8006a50 <pow+0x68>
 8006a20:	2200      	movs	r2, #0
 8006a22:	2300      	movs	r3, #0
 8006a24:	4620      	mov	r0, r4
 8006a26:	4629      	mov	r1, r5
 8006a28:	f7fa f81a 	bl	8000a60 <__aeabi_dcmpeq>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d146      	bne.n	8006abe <pow+0xd6>
 8006a30:	ec45 4b10 	vmov	d0, r4, r5
 8006a34:	f000 f874 	bl	8006b20 <finite>
 8006a38:	b338      	cbz	r0, 8006a8a <pow+0xa2>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	4629      	mov	r1, r5
 8006a42:	f7fa f817 	bl	8000a74 <__aeabi_dcmplt>
 8006a46:	b300      	cbz	r0, 8006a8a <pow+0xa2>
 8006a48:	f7ff ffa4 	bl	8006994 <__errno>
 8006a4c:	2322      	movs	r3, #34	@ 0x22
 8006a4e:	e01b      	b.n	8006a88 <pow+0xa0>
 8006a50:	ec47 6b10 	vmov	d0, r6, r7
 8006a54:	f000 f864 	bl	8006b20 <finite>
 8006a58:	b9e0      	cbnz	r0, 8006a94 <pow+0xac>
 8006a5a:	eeb0 0a48 	vmov.f32	s0, s16
 8006a5e:	eef0 0a68 	vmov.f32	s1, s17
 8006a62:	f000 f85d 	bl	8006b20 <finite>
 8006a66:	b1a8      	cbz	r0, 8006a94 <pow+0xac>
 8006a68:	ec45 4b10 	vmov	d0, r4, r5
 8006a6c:	f000 f858 	bl	8006b20 <finite>
 8006a70:	b180      	cbz	r0, 8006a94 <pow+0xac>
 8006a72:	4632      	mov	r2, r6
 8006a74:	463b      	mov	r3, r7
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7fa f823 	bl	8000ac4 <__aeabi_dcmpun>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d0e2      	beq.n	8006a48 <pow+0x60>
 8006a82:	f7ff ff87 	bl	8006994 <__errno>
 8006a86:	2321      	movs	r3, #33	@ 0x21
 8006a88:	6003      	str	r3, [r0, #0]
 8006a8a:	ecbd 8b02 	vpop	{d8}
 8006a8e:	ec47 6b10 	vmov	d0, r6, r7
 8006a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a94:	2200      	movs	r2, #0
 8006a96:	2300      	movs	r3, #0
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7f9 ffe0 	bl	8000a60 <__aeabi_dcmpeq>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d0f2      	beq.n	8006a8a <pow+0xa2>
 8006aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8006aa8:	eef0 0a68 	vmov.f32	s1, s17
 8006aac:	f000 f838 	bl	8006b20 <finite>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d0ea      	beq.n	8006a8a <pow+0xa2>
 8006ab4:	ec45 4b10 	vmov	d0, r4, r5
 8006ab8:	f000 f832 	bl	8006b20 <finite>
 8006abc:	e7c3      	b.n	8006a46 <pow+0x5e>
 8006abe:	4f01      	ldr	r7, [pc, #4]	@ (8006ac4 <pow+0xdc>)
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	e7e2      	b.n	8006a8a <pow+0xa2>
 8006ac4:	3ff00000 	.word	0x3ff00000

08006ac8 <sqrt>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	ed2d 8b02 	vpush	{d8}
 8006ace:	ec55 4b10 	vmov	r4, r5, d0
 8006ad2:	f000 f831 	bl	8006b38 <__ieee754_sqrt>
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	462b      	mov	r3, r5
 8006ada:	4620      	mov	r0, r4
 8006adc:	4629      	mov	r1, r5
 8006ade:	eeb0 8a40 	vmov.f32	s16, s0
 8006ae2:	eef0 8a60 	vmov.f32	s17, s1
 8006ae6:	f7f9 ffed 	bl	8000ac4 <__aeabi_dcmpun>
 8006aea:	b990      	cbnz	r0, 8006b12 <sqrt+0x4a>
 8006aec:	2200      	movs	r2, #0
 8006aee:	2300      	movs	r3, #0
 8006af0:	4620      	mov	r0, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7f9 ffbe 	bl	8000a74 <__aeabi_dcmplt>
 8006af8:	b158      	cbz	r0, 8006b12 <sqrt+0x4a>
 8006afa:	f7ff ff4b 	bl	8006994 <__errno>
 8006afe:	2321      	movs	r3, #33	@ 0x21
 8006b00:	6003      	str	r3, [r0, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	2300      	movs	r3, #0
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f7f9 fe6b 	bl	80007e4 <__aeabi_ddiv>
 8006b0e:	ec41 0b18 	vmov	d8, r0, r1
 8006b12:	eeb0 0a48 	vmov.f32	s0, s16
 8006b16:	eef0 0a68 	vmov.f32	s1, s17
 8006b1a:	ecbd 8b02 	vpop	{d8}
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}

08006b20 <finite>:
 8006b20:	b082      	sub	sp, #8
 8006b22:	ed8d 0b00 	vstr	d0, [sp]
 8006b26:	9801      	ldr	r0, [sp, #4]
 8006b28:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006b2c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006b30:	0fc0      	lsrs	r0, r0, #31
 8006b32:	b002      	add	sp, #8
 8006b34:	4770      	bx	lr
	...

08006b38 <__ieee754_sqrt>:
 8006b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	4a66      	ldr	r2, [pc, #408]	@ (8006cd8 <__ieee754_sqrt+0x1a0>)
 8006b3e:	ec55 4b10 	vmov	r4, r5, d0
 8006b42:	43aa      	bics	r2, r5
 8006b44:	462b      	mov	r3, r5
 8006b46:	4621      	mov	r1, r4
 8006b48:	d110      	bne.n	8006b6c <__ieee754_sqrt+0x34>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	4629      	mov	r1, r5
 8006b50:	f7f9 fd1e 	bl	8000590 <__aeabi_dmul>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4620      	mov	r0, r4
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	f7f9 fb62 	bl	8000224 <__adddf3>
 8006b60:	4604      	mov	r4, r0
 8006b62:	460d      	mov	r5, r1
 8006b64:	ec45 4b10 	vmov	d0, r4, r5
 8006b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	dc0e      	bgt.n	8006b8e <__ieee754_sqrt+0x56>
 8006b70:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006b74:	4322      	orrs	r2, r4
 8006b76:	d0f5      	beq.n	8006b64 <__ieee754_sqrt+0x2c>
 8006b78:	b19d      	cbz	r5, 8006ba2 <__ieee754_sqrt+0x6a>
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f7f9 fb4e 	bl	8000220 <__aeabi_dsub>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	f7f9 fe2c 	bl	80007e4 <__aeabi_ddiv>
 8006b8c:	e7e8      	b.n	8006b60 <__ieee754_sqrt+0x28>
 8006b8e:	152a      	asrs	r2, r5, #20
 8006b90:	d115      	bne.n	8006bbe <__ieee754_sqrt+0x86>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e009      	b.n	8006baa <__ieee754_sqrt+0x72>
 8006b96:	0acb      	lsrs	r3, r1, #11
 8006b98:	3a15      	subs	r2, #21
 8006b9a:	0549      	lsls	r1, r1, #21
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0fa      	beq.n	8006b96 <__ieee754_sqrt+0x5e>
 8006ba0:	e7f7      	b.n	8006b92 <__ieee754_sqrt+0x5a>
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	e7fa      	b.n	8006b9c <__ieee754_sqrt+0x64>
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	3001      	adds	r0, #1
 8006baa:	02dc      	lsls	r4, r3, #11
 8006bac:	d5fb      	bpl.n	8006ba6 <__ieee754_sqrt+0x6e>
 8006bae:	1e44      	subs	r4, r0, #1
 8006bb0:	1b12      	subs	r2, r2, r4
 8006bb2:	f1c0 0420 	rsb	r4, r0, #32
 8006bb6:	fa21 f404 	lsr.w	r4, r1, r4
 8006bba:	4323      	orrs	r3, r4
 8006bbc:	4081      	lsls	r1, r0
 8006bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bc2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bca:	07d2      	lsls	r2, r2, #31
 8006bcc:	bf5c      	itt	pl
 8006bce:	005b      	lslpl	r3, r3, #1
 8006bd0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bd8:	bf58      	it	pl
 8006bda:	0049      	lslpl	r1, r1, #1
 8006bdc:	2600      	movs	r6, #0
 8006bde:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006be2:	107f      	asrs	r7, r7, #1
 8006be4:	0049      	lsls	r1, r1, #1
 8006be6:	2016      	movs	r0, #22
 8006be8:	4632      	mov	r2, r6
 8006bea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006bee:	1915      	adds	r5, r2, r4
 8006bf0:	429d      	cmp	r5, r3
 8006bf2:	bfde      	ittt	le
 8006bf4:	192a      	addle	r2, r5, r4
 8006bf6:	1b5b      	suble	r3, r3, r5
 8006bf8:	1936      	addle	r6, r6, r4
 8006bfa:	0fcd      	lsrs	r5, r1, #31
 8006bfc:	3801      	subs	r0, #1
 8006bfe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006c02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006c0a:	d1f0      	bne.n	8006bee <__ieee754_sqrt+0xb6>
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	2420      	movs	r4, #32
 8006c10:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006c14:	4293      	cmp	r3, r2
 8006c16:	eb0c 0e00 	add.w	lr, ip, r0
 8006c1a:	dc02      	bgt.n	8006c22 <__ieee754_sqrt+0xea>
 8006c1c:	d113      	bne.n	8006c46 <__ieee754_sqrt+0x10e>
 8006c1e:	458e      	cmp	lr, r1
 8006c20:	d811      	bhi.n	8006c46 <__ieee754_sqrt+0x10e>
 8006c22:	f1be 0f00 	cmp.w	lr, #0
 8006c26:	eb0e 000c 	add.w	r0, lr, ip
 8006c2a:	da3f      	bge.n	8006cac <__ieee754_sqrt+0x174>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	db3d      	blt.n	8006cac <__ieee754_sqrt+0x174>
 8006c30:	f102 0801 	add.w	r8, r2, #1
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	458e      	cmp	lr, r1
 8006c38:	bf88      	it	hi
 8006c3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006c3e:	eba1 010e 	sub.w	r1, r1, lr
 8006c42:	4465      	add	r5, ip
 8006c44:	4642      	mov	r2, r8
 8006c46:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006c4a:	3c01      	subs	r4, #1
 8006c4c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006c50:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c54:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006c58:	d1dc      	bne.n	8006c14 <__ieee754_sqrt+0xdc>
 8006c5a:	4319      	orrs	r1, r3
 8006c5c:	d01b      	beq.n	8006c96 <__ieee754_sqrt+0x15e>
 8006c5e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006cdc <__ieee754_sqrt+0x1a4>
 8006c62:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006ce0 <__ieee754_sqrt+0x1a8>
 8006c66:	e9da 0100 	ldrd	r0, r1, [sl]
 8006c6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8006c6e:	f7f9 fad7 	bl	8000220 <__aeabi_dsub>
 8006c72:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 ff03 	bl	8000a88 <__aeabi_dcmple>
 8006c82:	b140      	cbz	r0, 8006c96 <__ieee754_sqrt+0x15e>
 8006c84:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006c88:	e9da 0100 	ldrd	r0, r1, [sl]
 8006c8c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006c90:	d10e      	bne.n	8006cb0 <__ieee754_sqrt+0x178>
 8006c92:	3601      	adds	r6, #1
 8006c94:	4625      	mov	r5, r4
 8006c96:	1073      	asrs	r3, r6, #1
 8006c98:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c9c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006ca0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006ca4:	086b      	lsrs	r3, r5, #1
 8006ca6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006caa:	e759      	b.n	8006b60 <__ieee754_sqrt+0x28>
 8006cac:	4690      	mov	r8, r2
 8006cae:	e7c1      	b.n	8006c34 <__ieee754_sqrt+0xfc>
 8006cb0:	f7f9 fab8 	bl	8000224 <__adddf3>
 8006cb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	f7f9 fed8 	bl	8000a74 <__aeabi_dcmplt>
 8006cc4:	b120      	cbz	r0, 8006cd0 <__ieee754_sqrt+0x198>
 8006cc6:	1cab      	adds	r3, r5, #2
 8006cc8:	bf08      	it	eq
 8006cca:	3601      	addeq	r6, #1
 8006ccc:	3502      	adds	r5, #2
 8006cce:	e7e2      	b.n	8006c96 <__ieee754_sqrt+0x15e>
 8006cd0:	1c6b      	adds	r3, r5, #1
 8006cd2:	f023 0501 	bic.w	r5, r3, #1
 8006cd6:	e7de      	b.n	8006c96 <__ieee754_sqrt+0x15e>
 8006cd8:	7ff00000 	.word	0x7ff00000
 8006cdc:	08007930 	.word	0x08007930
 8006ce0:	08007928 	.word	0x08007928
 8006ce4:	00000000 	.word	0x00000000

08006ce8 <__ieee754_pow>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	b091      	sub	sp, #68	@ 0x44
 8006cee:	ed8d 1b00 	vstr	d1, [sp]
 8006cf2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006cf6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006cfa:	ea5a 0001 	orrs.w	r0, sl, r1
 8006cfe:	ec57 6b10 	vmov	r6, r7, d0
 8006d02:	d113      	bne.n	8006d2c <__ieee754_pow+0x44>
 8006d04:	19b3      	adds	r3, r6, r6
 8006d06:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006d0a:	4152      	adcs	r2, r2
 8006d0c:	4298      	cmp	r0, r3
 8006d0e:	4b9a      	ldr	r3, [pc, #616]	@ (8006f78 <__ieee754_pow+0x290>)
 8006d10:	4193      	sbcs	r3, r2
 8006d12:	f080 84ee 	bcs.w	80076f2 <__ieee754_pow+0xa0a>
 8006d16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	f7f9 fa81 	bl	8000224 <__adddf3>
 8006d22:	ec41 0b10 	vmov	d0, r0, r1
 8006d26:	b011      	add	sp, #68	@ 0x44
 8006d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2c:	4a93      	ldr	r2, [pc, #588]	@ (8006f7c <__ieee754_pow+0x294>)
 8006d2e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8006d32:	4295      	cmp	r5, r2
 8006d34:	46b8      	mov	r8, r7
 8006d36:	4633      	mov	r3, r6
 8006d38:	d80a      	bhi.n	8006d50 <__ieee754_pow+0x68>
 8006d3a:	d104      	bne.n	8006d46 <__ieee754_pow+0x5e>
 8006d3c:	2e00      	cmp	r6, #0
 8006d3e:	d1ea      	bne.n	8006d16 <__ieee754_pow+0x2e>
 8006d40:	45aa      	cmp	sl, r5
 8006d42:	d8e8      	bhi.n	8006d16 <__ieee754_pow+0x2e>
 8006d44:	e001      	b.n	8006d4a <__ieee754_pow+0x62>
 8006d46:	4592      	cmp	sl, r2
 8006d48:	d802      	bhi.n	8006d50 <__ieee754_pow+0x68>
 8006d4a:	4592      	cmp	sl, r2
 8006d4c:	d10f      	bne.n	8006d6e <__ieee754_pow+0x86>
 8006d4e:	b171      	cbz	r1, 8006d6e <__ieee754_pow+0x86>
 8006d50:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006d54:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006d58:	ea58 0803 	orrs.w	r8, r8, r3
 8006d5c:	d1db      	bne.n	8006d16 <__ieee754_pow+0x2e>
 8006d5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d62:	18db      	adds	r3, r3, r3
 8006d64:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006d68:	4152      	adcs	r2, r2
 8006d6a:	4598      	cmp	r8, r3
 8006d6c:	e7cf      	b.n	8006d0e <__ieee754_pow+0x26>
 8006d6e:	f1b8 0f00 	cmp.w	r8, #0
 8006d72:	46ab      	mov	fp, r5
 8006d74:	da43      	bge.n	8006dfe <__ieee754_pow+0x116>
 8006d76:	4a82      	ldr	r2, [pc, #520]	@ (8006f80 <__ieee754_pow+0x298>)
 8006d78:	4592      	cmp	sl, r2
 8006d7a:	d856      	bhi.n	8006e2a <__ieee754_pow+0x142>
 8006d7c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006d80:	4592      	cmp	sl, r2
 8006d82:	f240 84c5 	bls.w	8007710 <__ieee754_pow+0xa28>
 8006d86:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006d8a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006d8e:	2a14      	cmp	r2, #20
 8006d90:	dd18      	ble.n	8006dc4 <__ieee754_pow+0xdc>
 8006d92:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006d96:	fa21 f402 	lsr.w	r4, r1, r2
 8006d9a:	fa04 f202 	lsl.w	r2, r4, r2
 8006d9e:	428a      	cmp	r2, r1
 8006da0:	f040 84b6 	bne.w	8007710 <__ieee754_pow+0xa28>
 8006da4:	f004 0401 	and.w	r4, r4, #1
 8006da8:	f1c4 0402 	rsb	r4, r4, #2
 8006dac:	2900      	cmp	r1, #0
 8006dae:	d159      	bne.n	8006e64 <__ieee754_pow+0x17c>
 8006db0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006db4:	d148      	bne.n	8006e48 <__ieee754_pow+0x160>
 8006db6:	4632      	mov	r2, r6
 8006db8:	463b      	mov	r3, r7
 8006dba:	4630      	mov	r0, r6
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	f7f9 fbe7 	bl	8000590 <__aeabi_dmul>
 8006dc2:	e7ae      	b.n	8006d22 <__ieee754_pow+0x3a>
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	d14c      	bne.n	8006e62 <__ieee754_pow+0x17a>
 8006dc8:	f1c2 0214 	rsb	r2, r2, #20
 8006dcc:	fa4a f402 	asr.w	r4, sl, r2
 8006dd0:	fa04 f202 	lsl.w	r2, r4, r2
 8006dd4:	4552      	cmp	r2, sl
 8006dd6:	f040 8498 	bne.w	800770a <__ieee754_pow+0xa22>
 8006dda:	f004 0401 	and.w	r4, r4, #1
 8006dde:	f1c4 0402 	rsb	r4, r4, #2
 8006de2:	4a68      	ldr	r2, [pc, #416]	@ (8006f84 <__ieee754_pow+0x29c>)
 8006de4:	4592      	cmp	sl, r2
 8006de6:	d1e3      	bne.n	8006db0 <__ieee754_pow+0xc8>
 8006de8:	f1b9 0f00 	cmp.w	r9, #0
 8006dec:	f280 8489 	bge.w	8007702 <__ieee754_pow+0xa1a>
 8006df0:	4964      	ldr	r1, [pc, #400]	@ (8006f84 <__ieee754_pow+0x29c>)
 8006df2:	4632      	mov	r2, r6
 8006df4:	463b      	mov	r3, r7
 8006df6:	2000      	movs	r0, #0
 8006df8:	f7f9 fcf4 	bl	80007e4 <__aeabi_ddiv>
 8006dfc:	e791      	b.n	8006d22 <__ieee754_pow+0x3a>
 8006dfe:	2400      	movs	r4, #0
 8006e00:	bb81      	cbnz	r1, 8006e64 <__ieee754_pow+0x17c>
 8006e02:	4a5e      	ldr	r2, [pc, #376]	@ (8006f7c <__ieee754_pow+0x294>)
 8006e04:	4592      	cmp	sl, r2
 8006e06:	d1ec      	bne.n	8006de2 <__ieee754_pow+0xfa>
 8006e08:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8006e0c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006e10:	431a      	orrs	r2, r3
 8006e12:	f000 846e 	beq.w	80076f2 <__ieee754_pow+0xa0a>
 8006e16:	4b5c      	ldr	r3, [pc, #368]	@ (8006f88 <__ieee754_pow+0x2a0>)
 8006e18:	429d      	cmp	r5, r3
 8006e1a:	d908      	bls.n	8006e2e <__ieee754_pow+0x146>
 8006e1c:	f1b9 0f00 	cmp.w	r9, #0
 8006e20:	f280 846b 	bge.w	80076fa <__ieee754_pow+0xa12>
 8006e24:	2000      	movs	r0, #0
 8006e26:	2100      	movs	r1, #0
 8006e28:	e77b      	b.n	8006d22 <__ieee754_pow+0x3a>
 8006e2a:	2402      	movs	r4, #2
 8006e2c:	e7e8      	b.n	8006e00 <__ieee754_pow+0x118>
 8006e2e:	f1b9 0f00 	cmp.w	r9, #0
 8006e32:	f04f 0000 	mov.w	r0, #0
 8006e36:	f04f 0100 	mov.w	r1, #0
 8006e3a:	f6bf af72 	bge.w	8006d22 <__ieee754_pow+0x3a>
 8006e3e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006e42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006e46:	e76c      	b.n	8006d22 <__ieee754_pow+0x3a>
 8006e48:	4a50      	ldr	r2, [pc, #320]	@ (8006f8c <__ieee754_pow+0x2a4>)
 8006e4a:	4591      	cmp	r9, r2
 8006e4c:	d10a      	bne.n	8006e64 <__ieee754_pow+0x17c>
 8006e4e:	f1b8 0f00 	cmp.w	r8, #0
 8006e52:	db07      	blt.n	8006e64 <__ieee754_pow+0x17c>
 8006e54:	ec47 6b10 	vmov	d0, r6, r7
 8006e58:	b011      	add	sp, #68	@ 0x44
 8006e5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5e:	f7ff be6b 	b.w	8006b38 <__ieee754_sqrt>
 8006e62:	2400      	movs	r4, #0
 8006e64:	ec47 6b10 	vmov	d0, r6, r7
 8006e68:	9302      	str	r3, [sp, #8]
 8006e6a:	f000 fc87 	bl	800777c <fabs>
 8006e6e:	9b02      	ldr	r3, [sp, #8]
 8006e70:	ec51 0b10 	vmov	r0, r1, d0
 8006e74:	bb43      	cbnz	r3, 8006ec8 <__ieee754_pow+0x1e0>
 8006e76:	4b43      	ldr	r3, [pc, #268]	@ (8006f84 <__ieee754_pow+0x29c>)
 8006e78:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d000      	beq.n	8006e82 <__ieee754_pow+0x19a>
 8006e80:	bb15      	cbnz	r5, 8006ec8 <__ieee754_pow+0x1e0>
 8006e82:	f1b9 0f00 	cmp.w	r9, #0
 8006e86:	da05      	bge.n	8006e94 <__ieee754_pow+0x1ac>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	493d      	ldr	r1, [pc, #244]	@ (8006f84 <__ieee754_pow+0x29c>)
 8006e90:	f7f9 fca8 	bl	80007e4 <__aeabi_ddiv>
 8006e94:	f1b8 0f00 	cmp.w	r8, #0
 8006e98:	f6bf af43 	bge.w	8006d22 <__ieee754_pow+0x3a>
 8006e9c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006ea0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006ea4:	4325      	orrs	r5, r4
 8006ea6:	d108      	bne.n	8006eba <__ieee754_pow+0x1d2>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4610      	mov	r0, r2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	f7f9 f9b6 	bl	8000220 <__aeabi_dsub>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	e79e      	b.n	8006df8 <__ieee754_pow+0x110>
 8006eba:	2c01      	cmp	r4, #1
 8006ebc:	f47f af31 	bne.w	8006d22 <__ieee754_pow+0x3a>
 8006ec0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	e72c      	b.n	8006d22 <__ieee754_pow+0x3a>
 8006ec8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	ea53 0204 	orrs.w	r2, r3, r4
 8006ed2:	d102      	bne.n	8006eda <__ieee754_pow+0x1f2>
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	e7e8      	b.n	8006eac <__ieee754_pow+0x1c4>
 8006eda:	3c01      	subs	r4, #1
 8006edc:	431c      	orrs	r4, r3
 8006ede:	d016      	beq.n	8006f0e <__ieee754_pow+0x226>
 8006ee0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006f68 <__ieee754_pow+0x280>
 8006ee4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006ee8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006eec:	f240 8110 	bls.w	8007110 <__ieee754_pow+0x428>
 8006ef0:	4b27      	ldr	r3, [pc, #156]	@ (8006f90 <__ieee754_pow+0x2a8>)
 8006ef2:	459a      	cmp	sl, r3
 8006ef4:	4b24      	ldr	r3, [pc, #144]	@ (8006f88 <__ieee754_pow+0x2a0>)
 8006ef6:	d916      	bls.n	8006f26 <__ieee754_pow+0x23e>
 8006ef8:	429d      	cmp	r5, r3
 8006efa:	d80b      	bhi.n	8006f14 <__ieee754_pow+0x22c>
 8006efc:	f1b9 0f00 	cmp.w	r9, #0
 8006f00:	da0b      	bge.n	8006f1a <__ieee754_pow+0x232>
 8006f02:	2000      	movs	r0, #0
 8006f04:	b011      	add	sp, #68	@ 0x44
 8006f06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	f000 bcf1 	b.w	80078f0 <__math_oflow>
 8006f0e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8006f70 <__ieee754_pow+0x288>
 8006f12:	e7e7      	b.n	8006ee4 <__ieee754_pow+0x1fc>
 8006f14:	f1b9 0f00 	cmp.w	r9, #0
 8006f18:	dcf3      	bgt.n	8006f02 <__ieee754_pow+0x21a>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	b011      	add	sp, #68	@ 0x44
 8006f1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f22:	f000 bcdd 	b.w	80078e0 <__math_uflow>
 8006f26:	429d      	cmp	r5, r3
 8006f28:	d20c      	bcs.n	8006f44 <__ieee754_pow+0x25c>
 8006f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	f7f9 fd9f 	bl	8000a74 <__aeabi_dcmplt>
 8006f36:	3800      	subs	r0, #0
 8006f38:	bf18      	it	ne
 8006f3a:	2001      	movne	r0, #1
 8006f3c:	f1b9 0f00 	cmp.w	r9, #0
 8006f40:	daec      	bge.n	8006f1c <__ieee754_pow+0x234>
 8006f42:	e7df      	b.n	8006f04 <__ieee754_pow+0x21c>
 8006f44:	4b0f      	ldr	r3, [pc, #60]	@ (8006f84 <__ieee754_pow+0x29c>)
 8006f46:	429d      	cmp	r5, r3
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	d922      	bls.n	8006f94 <__ieee754_pow+0x2ac>
 8006f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f52:	2300      	movs	r3, #0
 8006f54:	f7f9 fd8e 	bl	8000a74 <__aeabi_dcmplt>
 8006f58:	3800      	subs	r0, #0
 8006f5a:	bf18      	it	ne
 8006f5c:	2001      	movne	r0, #1
 8006f5e:	f1b9 0f00 	cmp.w	r9, #0
 8006f62:	dccf      	bgt.n	8006f04 <__ieee754_pow+0x21c>
 8006f64:	e7da      	b.n	8006f1c <__ieee754_pow+0x234>
 8006f66:	bf00      	nop
 8006f68:	00000000 	.word	0x00000000
 8006f6c:	3ff00000 	.word	0x3ff00000
 8006f70:	00000000 	.word	0x00000000
 8006f74:	bff00000 	.word	0xbff00000
 8006f78:	fff00000 	.word	0xfff00000
 8006f7c:	7ff00000 	.word	0x7ff00000
 8006f80:	433fffff 	.word	0x433fffff
 8006f84:	3ff00000 	.word	0x3ff00000
 8006f88:	3fefffff 	.word	0x3fefffff
 8006f8c:	3fe00000 	.word	0x3fe00000
 8006f90:	43f00000 	.word	0x43f00000
 8006f94:	4b5a      	ldr	r3, [pc, #360]	@ (8007100 <__ieee754_pow+0x418>)
 8006f96:	f7f9 f943 	bl	8000220 <__aeabi_dsub>
 8006f9a:	a351      	add	r3, pc, #324	@ (adr r3, 80070e0 <__ieee754_pow+0x3f8>)
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	f7f9 faf4 	bl	8000590 <__aeabi_dmul>
 8006fa8:	a34f      	add	r3, pc, #316	@ (adr r3, 80070e8 <__ieee754_pow+0x400>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	4606      	mov	r6, r0
 8006fb0:	460f      	mov	r7, r1
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 faeb 	bl	8000590 <__aeabi_dmul>
 8006fba:	4b52      	ldr	r3, [pc, #328]	@ (8007104 <__ieee754_pow+0x41c>)
 8006fbc:	4682      	mov	sl, r0
 8006fbe:	468b      	mov	fp, r1
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7f9 fae3 	bl	8000590 <__aeabi_dmul>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	a148      	add	r1, pc, #288	@ (adr r1, 80070f0 <__ieee754_pow+0x408>)
 8006fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd4:	f7f9 f924 	bl	8000220 <__aeabi_dsub>
 8006fd8:	4622      	mov	r2, r4
 8006fda:	462b      	mov	r3, r5
 8006fdc:	f7f9 fad8 	bl	8000590 <__aeabi_dmul>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	4948      	ldr	r1, [pc, #288]	@ (8007108 <__ieee754_pow+0x420>)
 8006fe8:	f7f9 f91a 	bl	8000220 <__aeabi_dsub>
 8006fec:	4622      	mov	r2, r4
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4689      	mov	r9, r1
 8006ff2:	462b      	mov	r3, r5
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f7f9 faca 	bl	8000590 <__aeabi_dmul>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4640      	mov	r0, r8
 8007002:	4649      	mov	r1, r9
 8007004:	f7f9 fac4 	bl	8000590 <__aeabi_dmul>
 8007008:	a33b      	add	r3, pc, #236	@ (adr r3, 80070f8 <__ieee754_pow+0x410>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 fabf 	bl	8000590 <__aeabi_dmul>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4650      	mov	r0, sl
 8007018:	4659      	mov	r1, fp
 800701a:	f7f9 f901 	bl	8000220 <__aeabi_dsub>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4680      	mov	r8, r0
 8007024:	4689      	mov	r9, r1
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 f8fb 	bl	8000224 <__adddf3>
 800702e:	2400      	movs	r4, #0
 8007030:	4632      	mov	r2, r6
 8007032:	463b      	mov	r3, r7
 8007034:	4620      	mov	r0, r4
 8007036:	460d      	mov	r5, r1
 8007038:	f7f9 f8f2 	bl	8000220 <__aeabi_dsub>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4640      	mov	r0, r8
 8007042:	4649      	mov	r1, r9
 8007044:	f7f9 f8ec 	bl	8000220 <__aeabi_dsub>
 8007048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007050:	2300      	movs	r3, #0
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	465b      	mov	r3, fp
 800705e:	4652      	mov	r2, sl
 8007060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007064:	f7f9 f8dc 	bl	8000220 <__aeabi_dsub>
 8007068:	4622      	mov	r2, r4
 800706a:	462b      	mov	r3, r5
 800706c:	f7f9 fa90 	bl	8000590 <__aeabi_dmul>
 8007070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007074:	4680      	mov	r8, r0
 8007076:	4689      	mov	r9, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fa88 	bl	8000590 <__aeabi_dmul>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 f8cc 	bl	8000224 <__adddf3>
 800708c:	465b      	mov	r3, fp
 800708e:	4606      	mov	r6, r0
 8007090:	460f      	mov	r7, r1
 8007092:	4652      	mov	r2, sl
 8007094:	4620      	mov	r0, r4
 8007096:	4629      	mov	r1, r5
 8007098:	f7f9 fa7a 	bl	8000590 <__aeabi_dmul>
 800709c:	460b      	mov	r3, r1
 800709e:	4602      	mov	r2, r0
 80070a0:	4680      	mov	r8, r0
 80070a2:	4689      	mov	r9, r1
 80070a4:	4630      	mov	r0, r6
 80070a6:	4639      	mov	r1, r7
 80070a8:	f7f9 f8bc 	bl	8000224 <__adddf3>
 80070ac:	4b17      	ldr	r3, [pc, #92]	@ (800710c <__ieee754_pow+0x424>)
 80070ae:	4299      	cmp	r1, r3
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	468b      	mov	fp, r1
 80070b6:	f340 820b 	ble.w	80074d0 <__ieee754_pow+0x7e8>
 80070ba:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80070be:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80070c2:	4303      	orrs	r3, r0
 80070c4:	f000 81ea 	beq.w	800749c <__ieee754_pow+0x7b4>
 80070c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fcd0 	bl	8000a74 <__aeabi_dcmplt>
 80070d4:	3800      	subs	r0, #0
 80070d6:	bf18      	it	ne
 80070d8:	2001      	movne	r0, #1
 80070da:	e713      	b.n	8006f04 <__ieee754_pow+0x21c>
 80070dc:	f3af 8000 	nop.w
 80070e0:	60000000 	.word	0x60000000
 80070e4:	3ff71547 	.word	0x3ff71547
 80070e8:	f85ddf44 	.word	0xf85ddf44
 80070ec:	3e54ae0b 	.word	0x3e54ae0b
 80070f0:	55555555 	.word	0x55555555
 80070f4:	3fd55555 	.word	0x3fd55555
 80070f8:	652b82fe 	.word	0x652b82fe
 80070fc:	3ff71547 	.word	0x3ff71547
 8007100:	3ff00000 	.word	0x3ff00000
 8007104:	3fd00000 	.word	0x3fd00000
 8007108:	3fe00000 	.word	0x3fe00000
 800710c:	408fffff 	.word	0x408fffff
 8007110:	4bd5      	ldr	r3, [pc, #852]	@ (8007468 <__ieee754_pow+0x780>)
 8007112:	ea08 0303 	and.w	r3, r8, r3
 8007116:	2200      	movs	r2, #0
 8007118:	b92b      	cbnz	r3, 8007126 <__ieee754_pow+0x43e>
 800711a:	4bd4      	ldr	r3, [pc, #848]	@ (800746c <__ieee754_pow+0x784>)
 800711c:	f7f9 fa38 	bl	8000590 <__aeabi_dmul>
 8007120:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007124:	468b      	mov	fp, r1
 8007126:	ea4f 532b 	mov.w	r3, fp, asr #20
 800712a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800712e:	4413      	add	r3, r2
 8007130:	930a      	str	r3, [sp, #40]	@ 0x28
 8007132:	4bcf      	ldr	r3, [pc, #828]	@ (8007470 <__ieee754_pow+0x788>)
 8007134:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007138:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800713c:	459b      	cmp	fp, r3
 800713e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007142:	dd08      	ble.n	8007156 <__ieee754_pow+0x46e>
 8007144:	4bcb      	ldr	r3, [pc, #812]	@ (8007474 <__ieee754_pow+0x78c>)
 8007146:	459b      	cmp	fp, r3
 8007148:	f340 81a5 	ble.w	8007496 <__ieee754_pow+0x7ae>
 800714c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714e:	3301      	adds	r3, #1
 8007150:	930a      	str	r3, [sp, #40]	@ 0x28
 8007152:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007156:	f04f 0a00 	mov.w	sl, #0
 800715a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800715e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007160:	4bc5      	ldr	r3, [pc, #788]	@ (8007478 <__ieee754_pow+0x790>)
 8007162:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007166:	ed93 7b00 	vldr	d7, [r3]
 800716a:	4629      	mov	r1, r5
 800716c:	ec53 2b17 	vmov	r2, r3, d7
 8007170:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007174:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007178:	f7f9 f852 	bl	8000220 <__aeabi_dsub>
 800717c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007180:	4606      	mov	r6, r0
 8007182:	460f      	mov	r7, r1
 8007184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007188:	f7f9 f84c 	bl	8000224 <__adddf3>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	2000      	movs	r0, #0
 8007192:	49ba      	ldr	r1, [pc, #744]	@ (800747c <__ieee754_pow+0x794>)
 8007194:	f7f9 fb26 	bl	80007e4 <__aeabi_ddiv>
 8007198:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 f9f4 	bl	8000590 <__aeabi_dmul>
 80071a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ac:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80071b6:	f04f 0b00 	mov.w	fp, #0
 80071ba:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80071be:	4661      	mov	r1, ip
 80071c0:	2200      	movs	r2, #0
 80071c2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80071c6:	4658      	mov	r0, fp
 80071c8:	46e1      	mov	r9, ip
 80071ca:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80071ce:	4614      	mov	r4, r2
 80071d0:	461d      	mov	r5, r3
 80071d2:	f7f9 f9dd 	bl	8000590 <__aeabi_dmul>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4630      	mov	r0, r6
 80071dc:	4639      	mov	r1, r7
 80071de:	f7f9 f81f 	bl	8000220 <__aeabi_dsub>
 80071e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	f7f9 f817 	bl	8000220 <__aeabi_dsub>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071fa:	f7f9 f811 	bl	8000220 <__aeabi_dsub>
 80071fe:	465a      	mov	r2, fp
 8007200:	464b      	mov	r3, r9
 8007202:	f7f9 f9c5 	bl	8000590 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f9 f807 	bl	8000220 <__aeabi_dsub>
 8007212:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007216:	f7f9 f9bb 	bl	8000590 <__aeabi_dmul>
 800721a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800721e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007222:	4610      	mov	r0, r2
 8007224:	4619      	mov	r1, r3
 8007226:	f7f9 f9b3 	bl	8000590 <__aeabi_dmul>
 800722a:	a37d      	add	r3, pc, #500	@ (adr r3, 8007420 <__ieee754_pow+0x738>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	f7f9 f9ac 	bl	8000590 <__aeabi_dmul>
 8007238:	a37b      	add	r3, pc, #492	@ (adr r3, 8007428 <__ieee754_pow+0x740>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f8 fff1 	bl	8000224 <__adddf3>
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	f7f9 f9a3 	bl	8000590 <__aeabi_dmul>
 800724a:	a379      	add	r3, pc, #484	@ (adr r3, 8007430 <__ieee754_pow+0x748>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f7f8 ffe8 	bl	8000224 <__adddf3>
 8007254:	4622      	mov	r2, r4
 8007256:	462b      	mov	r3, r5
 8007258:	f7f9 f99a 	bl	8000590 <__aeabi_dmul>
 800725c:	a376      	add	r3, pc, #472	@ (adr r3, 8007438 <__ieee754_pow+0x750>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f8 ffdf 	bl	8000224 <__adddf3>
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	f7f9 f991 	bl	8000590 <__aeabi_dmul>
 800726e:	a374      	add	r3, pc, #464	@ (adr r3, 8007440 <__ieee754_pow+0x758>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f8 ffd6 	bl	8000224 <__adddf3>
 8007278:	4622      	mov	r2, r4
 800727a:	462b      	mov	r3, r5
 800727c:	f7f9 f988 	bl	8000590 <__aeabi_dmul>
 8007280:	a371      	add	r3, pc, #452	@ (adr r3, 8007448 <__ieee754_pow+0x760>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f8 ffcd 	bl	8000224 <__adddf3>
 800728a:	4622      	mov	r2, r4
 800728c:	4606      	mov	r6, r0
 800728e:	460f      	mov	r7, r1
 8007290:	462b      	mov	r3, r5
 8007292:	4620      	mov	r0, r4
 8007294:	4629      	mov	r1, r5
 8007296:	f7f9 f97b 	bl	8000590 <__aeabi_dmul>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4630      	mov	r0, r6
 80072a0:	4639      	mov	r1, r7
 80072a2:	f7f9 f975 	bl	8000590 <__aeabi_dmul>
 80072a6:	465a      	mov	r2, fp
 80072a8:	4604      	mov	r4, r0
 80072aa:	460d      	mov	r5, r1
 80072ac:	464b      	mov	r3, r9
 80072ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072b2:	f7f8 ffb7 	bl	8000224 <__adddf3>
 80072b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072ba:	f7f9 f969 	bl	8000590 <__aeabi_dmul>
 80072be:	4622      	mov	r2, r4
 80072c0:	462b      	mov	r3, r5
 80072c2:	f7f8 ffaf 	bl	8000224 <__adddf3>
 80072c6:	465a      	mov	r2, fp
 80072c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072cc:	464b      	mov	r3, r9
 80072ce:	4658      	mov	r0, fp
 80072d0:	4649      	mov	r1, r9
 80072d2:	f7f9 f95d 	bl	8000590 <__aeabi_dmul>
 80072d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007480 <__ieee754_pow+0x798>)
 80072d8:	2200      	movs	r2, #0
 80072da:	4606      	mov	r6, r0
 80072dc:	460f      	mov	r7, r1
 80072de:	f7f8 ffa1 	bl	8000224 <__adddf3>
 80072e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072e6:	f7f8 ff9d 	bl	8000224 <__adddf3>
 80072ea:	46d8      	mov	r8, fp
 80072ec:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80072f0:	460d      	mov	r5, r1
 80072f2:	465a      	mov	r2, fp
 80072f4:	460b      	mov	r3, r1
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80072fe:	f7f9 f947 	bl	8000590 <__aeabi_dmul>
 8007302:	465c      	mov	r4, fp
 8007304:	4680      	mov	r8, r0
 8007306:	4689      	mov	r9, r1
 8007308:	4b5d      	ldr	r3, [pc, #372]	@ (8007480 <__ieee754_pow+0x798>)
 800730a:	2200      	movs	r2, #0
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f8 ff86 	bl	8000220 <__aeabi_dsub>
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	f7f8 ff82 	bl	8000220 <__aeabi_dsub>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007324:	f7f8 ff7c 	bl	8000220 <__aeabi_dsub>
 8007328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800732c:	f7f9 f930 	bl	8000590 <__aeabi_dmul>
 8007330:	4622      	mov	r2, r4
 8007332:	4606      	mov	r6, r0
 8007334:	460f      	mov	r7, r1
 8007336:	462b      	mov	r3, r5
 8007338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733c:	f7f9 f928 	bl	8000590 <__aeabi_dmul>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4630      	mov	r0, r6
 8007346:	4639      	mov	r1, r7
 8007348:	f7f8 ff6c 	bl	8000224 <__adddf3>
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4640      	mov	r0, r8
 8007356:	4649      	mov	r1, r9
 8007358:	f7f8 ff64 	bl	8000224 <__adddf3>
 800735c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007360:	a33b      	add	r3, pc, #236	@ (adr r3, 8007450 <__ieee754_pow+0x768>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	4658      	mov	r0, fp
 8007368:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800736c:	460d      	mov	r5, r1
 800736e:	f7f9 f90f 	bl	8000590 <__aeabi_dmul>
 8007372:	465c      	mov	r4, fp
 8007374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007378:	4642      	mov	r2, r8
 800737a:	464b      	mov	r3, r9
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f8 ff4e 	bl	8000220 <__aeabi_dsub>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	f7f8 ff48 	bl	8000220 <__aeabi_dsub>
 8007390:	a331      	add	r3, pc, #196	@ (adr r3, 8007458 <__ieee754_pow+0x770>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f9 f8fb 	bl	8000590 <__aeabi_dmul>
 800739a:	a331      	add	r3, pc, #196	@ (adr r3, 8007460 <__ieee754_pow+0x778>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	4606      	mov	r6, r0
 80073a2:	460f      	mov	r7, r1
 80073a4:	4620      	mov	r0, r4
 80073a6:	4629      	mov	r1, r5
 80073a8:	f7f9 f8f2 	bl	8000590 <__aeabi_dmul>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f8 ff36 	bl	8000224 <__adddf3>
 80073b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073ba:	4b32      	ldr	r3, [pc, #200]	@ (8007484 <__ieee754_pow+0x79c>)
 80073bc:	4413      	add	r3, r2
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f8 ff2f 	bl	8000224 <__adddf3>
 80073c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073cc:	f7f9 f876 	bl	80004bc <__aeabi_i2d>
 80073d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007488 <__ieee754_pow+0x7a0>)
 80073d4:	4413      	add	r3, r2
 80073d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073da:	4606      	mov	r6, r0
 80073dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073e0:	460f      	mov	r7, r1
 80073e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073e6:	f7f8 ff1d 	bl	8000224 <__adddf3>
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	f7f8 ff19 	bl	8000224 <__adddf3>
 80073f2:	4632      	mov	r2, r6
 80073f4:	463b      	mov	r3, r7
 80073f6:	f7f8 ff15 	bl	8000224 <__adddf3>
 80073fa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80073fe:	4632      	mov	r2, r6
 8007400:	463b      	mov	r3, r7
 8007402:	4658      	mov	r0, fp
 8007404:	460d      	mov	r5, r1
 8007406:	f7f8 ff0b 	bl	8000220 <__aeabi_dsub>
 800740a:	4642      	mov	r2, r8
 800740c:	464b      	mov	r3, r9
 800740e:	f7f8 ff07 	bl	8000220 <__aeabi_dsub>
 8007412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007416:	f7f8 ff03 	bl	8000220 <__aeabi_dsub>
 800741a:	465c      	mov	r4, fp
 800741c:	e036      	b.n	800748c <__ieee754_pow+0x7a4>
 800741e:	bf00      	nop
 8007420:	4a454eef 	.word	0x4a454eef
 8007424:	3fca7e28 	.word	0x3fca7e28
 8007428:	93c9db65 	.word	0x93c9db65
 800742c:	3fcd864a 	.word	0x3fcd864a
 8007430:	a91d4101 	.word	0xa91d4101
 8007434:	3fd17460 	.word	0x3fd17460
 8007438:	518f264d 	.word	0x518f264d
 800743c:	3fd55555 	.word	0x3fd55555
 8007440:	db6fabff 	.word	0xdb6fabff
 8007444:	3fdb6db6 	.word	0x3fdb6db6
 8007448:	33333303 	.word	0x33333303
 800744c:	3fe33333 	.word	0x3fe33333
 8007450:	e0000000 	.word	0xe0000000
 8007454:	3feec709 	.word	0x3feec709
 8007458:	dc3a03fd 	.word	0xdc3a03fd
 800745c:	3feec709 	.word	0x3feec709
 8007460:	145b01f5 	.word	0x145b01f5
 8007464:	be3e2fe0 	.word	0xbe3e2fe0
 8007468:	7ff00000 	.word	0x7ff00000
 800746c:	43400000 	.word	0x43400000
 8007470:	0003988e 	.word	0x0003988e
 8007474:	000bb679 	.word	0x000bb679
 8007478:	08007958 	.word	0x08007958
 800747c:	3ff00000 	.word	0x3ff00000
 8007480:	40080000 	.word	0x40080000
 8007484:	08007938 	.word	0x08007938
 8007488:	08007948 	.word	0x08007948
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007494:	e5d6      	b.n	8007044 <__ieee754_pow+0x35c>
 8007496:	f04f 0a01 	mov.w	sl, #1
 800749a:	e65e      	b.n	800715a <__ieee754_pow+0x472>
 800749c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8007774 <__ieee754_pow+0xa8c>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	4630      	mov	r0, r6
 80074a4:	4639      	mov	r1, r7
 80074a6:	f7f8 febd 	bl	8000224 <__adddf3>
 80074aa:	4642      	mov	r2, r8
 80074ac:	e9cd 0100 	strd	r0, r1, [sp]
 80074b0:	464b      	mov	r3, r9
 80074b2:	4620      	mov	r0, r4
 80074b4:	4629      	mov	r1, r5
 80074b6:	f7f8 feb3 	bl	8000220 <__aeabi_dsub>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c2:	f7f9 faf5 	bl	8000ab0 <__aeabi_dcmpgt>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f47f adfe 	bne.w	80070c8 <__ieee754_pow+0x3e0>
 80074cc:	4ba2      	ldr	r3, [pc, #648]	@ (8007758 <__ieee754_pow+0xa70>)
 80074ce:	e022      	b.n	8007516 <__ieee754_pow+0x82e>
 80074d0:	4ca2      	ldr	r4, [pc, #648]	@ (800775c <__ieee754_pow+0xa74>)
 80074d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	d919      	bls.n	800750e <__ieee754_pow+0x826>
 80074da:	4ba1      	ldr	r3, [pc, #644]	@ (8007760 <__ieee754_pow+0xa78>)
 80074dc:	440b      	add	r3, r1
 80074de:	4303      	orrs	r3, r0
 80074e0:	d009      	beq.n	80074f6 <__ieee754_pow+0x80e>
 80074e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	2300      	movs	r3, #0
 80074ea:	f7f9 fac3 	bl	8000a74 <__aeabi_dcmplt>
 80074ee:	3800      	subs	r0, #0
 80074f0:	bf18      	it	ne
 80074f2:	2001      	movne	r0, #1
 80074f4:	e512      	b.n	8006f1c <__ieee754_pow+0x234>
 80074f6:	4642      	mov	r2, r8
 80074f8:	464b      	mov	r3, r9
 80074fa:	f7f8 fe91 	bl	8000220 <__aeabi_dsub>
 80074fe:	4632      	mov	r2, r6
 8007500:	463b      	mov	r3, r7
 8007502:	f7f9 facb 	bl	8000a9c <__aeabi_dcmpge>
 8007506:	2800      	cmp	r0, #0
 8007508:	d1eb      	bne.n	80074e2 <__ieee754_pow+0x7fa>
 800750a:	4b96      	ldr	r3, [pc, #600]	@ (8007764 <__ieee754_pow+0xa7c>)
 800750c:	e003      	b.n	8007516 <__ieee754_pow+0x82e>
 800750e:	4a96      	ldr	r2, [pc, #600]	@ (8007768 <__ieee754_pow+0xa80>)
 8007510:	4293      	cmp	r3, r2
 8007512:	f240 80e7 	bls.w	80076e4 <__ieee754_pow+0x9fc>
 8007516:	151b      	asrs	r3, r3, #20
 8007518:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800751c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8007520:	fa4a fa03 	asr.w	sl, sl, r3
 8007524:	44da      	add	sl, fp
 8007526:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800752a:	4890      	ldr	r0, [pc, #576]	@ (800776c <__ieee754_pow+0xa84>)
 800752c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007530:	4108      	asrs	r0, r1
 8007532:	ea00 030a 	and.w	r3, r0, sl
 8007536:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800753a:	f1c1 0114 	rsb	r1, r1, #20
 800753e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007542:	fa4a fa01 	asr.w	sl, sl, r1
 8007546:	f1bb 0f00 	cmp.w	fp, #0
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	bfb8      	it	lt
 8007554:	f1ca 0a00 	rsblt	sl, sl, #0
 8007558:	f7f8 fe62 	bl	8000220 <__aeabi_dsub>
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	4632      	mov	r2, r6
 8007562:	463b      	mov	r3, r7
 8007564:	4640      	mov	r0, r8
 8007566:	4649      	mov	r1, r9
 8007568:	f7f8 fe5c 	bl	8000224 <__adddf3>
 800756c:	2400      	movs	r4, #0
 800756e:	a36a      	add	r3, pc, #424	@ (adr r3, 8007718 <__ieee754_pow+0xa30>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	4620      	mov	r0, r4
 8007576:	460d      	mov	r5, r1
 8007578:	f7f9 f80a 	bl	8000590 <__aeabi_dmul>
 800757c:	4642      	mov	r2, r8
 800757e:	e9cd 0100 	strd	r0, r1, [sp]
 8007582:	464b      	mov	r3, r9
 8007584:	4620      	mov	r0, r4
 8007586:	4629      	mov	r1, r5
 8007588:	f7f8 fe4a 	bl	8000220 <__aeabi_dsub>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f8 fe44 	bl	8000220 <__aeabi_dsub>
 8007598:	a361      	add	r3, pc, #388	@ (adr r3, 8007720 <__ieee754_pow+0xa38>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f8 fff7 	bl	8000590 <__aeabi_dmul>
 80075a2:	a361      	add	r3, pc, #388	@ (adr r3, 8007728 <__ieee754_pow+0xa40>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	4680      	mov	r8, r0
 80075aa:	4689      	mov	r9, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f8 ffee 	bl	8000590 <__aeabi_dmul>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f8 fe32 	bl	8000224 <__adddf3>
 80075c0:	4604      	mov	r4, r0
 80075c2:	460d      	mov	r5, r1
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075cc:	f7f8 fe2a 	bl	8000224 <__adddf3>
 80075d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075d4:	4680      	mov	r8, r0
 80075d6:	4689      	mov	r9, r1
 80075d8:	f7f8 fe22 	bl	8000220 <__aeabi_dsub>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4620      	mov	r0, r4
 80075e2:	4629      	mov	r1, r5
 80075e4:	f7f8 fe1c 	bl	8000220 <__aeabi_dsub>
 80075e8:	4642      	mov	r2, r8
 80075ea:	4606      	mov	r6, r0
 80075ec:	460f      	mov	r7, r1
 80075ee:	464b      	mov	r3, r9
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f8 ffcc 	bl	8000590 <__aeabi_dmul>
 80075f8:	a34d      	add	r3, pc, #308	@ (adr r3, 8007730 <__ieee754_pow+0xa48>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	4604      	mov	r4, r0
 8007600:	460d      	mov	r5, r1
 8007602:	f7f8 ffc5 	bl	8000590 <__aeabi_dmul>
 8007606:	a34c      	add	r3, pc, #304	@ (adr r3, 8007738 <__ieee754_pow+0xa50>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f7f8 fe08 	bl	8000220 <__aeabi_dsub>
 8007610:	4622      	mov	r2, r4
 8007612:	462b      	mov	r3, r5
 8007614:	f7f8 ffbc 	bl	8000590 <__aeabi_dmul>
 8007618:	a349      	add	r3, pc, #292	@ (adr r3, 8007740 <__ieee754_pow+0xa58>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 fe01 	bl	8000224 <__adddf3>
 8007622:	4622      	mov	r2, r4
 8007624:	462b      	mov	r3, r5
 8007626:	f7f8 ffb3 	bl	8000590 <__aeabi_dmul>
 800762a:	a347      	add	r3, pc, #284	@ (adr r3, 8007748 <__ieee754_pow+0xa60>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 fdf6 	bl	8000220 <__aeabi_dsub>
 8007634:	4622      	mov	r2, r4
 8007636:	462b      	mov	r3, r5
 8007638:	f7f8 ffaa 	bl	8000590 <__aeabi_dmul>
 800763c:	a344      	add	r3, pc, #272	@ (adr r3, 8007750 <__ieee754_pow+0xa68>)
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f7f8 fdef 	bl	8000224 <__adddf3>
 8007646:	4622      	mov	r2, r4
 8007648:	462b      	mov	r3, r5
 800764a:	f7f8 ffa1 	bl	8000590 <__aeabi_dmul>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	f7f8 fde3 	bl	8000220 <__aeabi_dsub>
 800765a:	4604      	mov	r4, r0
 800765c:	460d      	mov	r5, r1
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4640      	mov	r0, r8
 8007664:	4649      	mov	r1, r9
 8007666:	f7f8 ff93 	bl	8000590 <__aeabi_dmul>
 800766a:	2200      	movs	r2, #0
 800766c:	e9cd 0100 	strd	r0, r1, [sp]
 8007670:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007674:	4620      	mov	r0, r4
 8007676:	4629      	mov	r1, r5
 8007678:	f7f8 fdd2 	bl	8000220 <__aeabi_dsub>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007684:	f7f9 f8ae 	bl	80007e4 <__aeabi_ddiv>
 8007688:	4632      	mov	r2, r6
 800768a:	4604      	mov	r4, r0
 800768c:	460d      	mov	r5, r1
 800768e:	463b      	mov	r3, r7
 8007690:	4640      	mov	r0, r8
 8007692:	4649      	mov	r1, r9
 8007694:	f7f8 ff7c 	bl	8000590 <__aeabi_dmul>
 8007698:	4632      	mov	r2, r6
 800769a:	463b      	mov	r3, r7
 800769c:	f7f8 fdc2 	bl	8000224 <__adddf3>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f8 fdba 	bl	8000220 <__aeabi_dsub>
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	f7f8 fdb6 	bl	8000220 <__aeabi_dsub>
 80076b4:	460b      	mov	r3, r1
 80076b6:	4602      	mov	r2, r0
 80076b8:	492d      	ldr	r1, [pc, #180]	@ (8007770 <__ieee754_pow+0xa88>)
 80076ba:	2000      	movs	r0, #0
 80076bc:	f7f8 fdb0 	bl	8000220 <__aeabi_dsub>
 80076c0:	ec41 0b10 	vmov	d0, r0, r1
 80076c4:	ee10 3a90 	vmov	r3, s1
 80076c8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80076cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076d0:	da0b      	bge.n	80076ea <__ieee754_pow+0xa02>
 80076d2:	4650      	mov	r0, sl
 80076d4:	f000 f85c 	bl	8007790 <scalbn>
 80076d8:	ec51 0b10 	vmov	r0, r1, d0
 80076dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076e0:	f7ff bb6d 	b.w	8006dbe <__ieee754_pow+0xd6>
 80076e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80076e8:	e73a      	b.n	8007560 <__ieee754_pow+0x878>
 80076ea:	ec51 0b10 	vmov	r0, r1, d0
 80076ee:	4619      	mov	r1, r3
 80076f0:	e7f4      	b.n	80076dc <__ieee754_pow+0x9f4>
 80076f2:	491f      	ldr	r1, [pc, #124]	@ (8007770 <__ieee754_pow+0xa88>)
 80076f4:	2000      	movs	r0, #0
 80076f6:	f7ff bb14 	b.w	8006d22 <__ieee754_pow+0x3a>
 80076fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076fe:	f7ff bb10 	b.w	8006d22 <__ieee754_pow+0x3a>
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	f7ff bb0c 	b.w	8006d22 <__ieee754_pow+0x3a>
 800770a:	460c      	mov	r4, r1
 800770c:	f7ff bb69 	b.w	8006de2 <__ieee754_pow+0xfa>
 8007710:	2400      	movs	r4, #0
 8007712:	f7ff bb4b 	b.w	8006dac <__ieee754_pow+0xc4>
 8007716:	bf00      	nop
 8007718:	00000000 	.word	0x00000000
 800771c:	3fe62e43 	.word	0x3fe62e43
 8007720:	fefa39ef 	.word	0xfefa39ef
 8007724:	3fe62e42 	.word	0x3fe62e42
 8007728:	0ca86c39 	.word	0x0ca86c39
 800772c:	be205c61 	.word	0xbe205c61
 8007730:	72bea4d0 	.word	0x72bea4d0
 8007734:	3e663769 	.word	0x3e663769
 8007738:	c5d26bf1 	.word	0xc5d26bf1
 800773c:	3ebbbd41 	.word	0x3ebbbd41
 8007740:	af25de2c 	.word	0xaf25de2c
 8007744:	3f11566a 	.word	0x3f11566a
 8007748:	16bebd93 	.word	0x16bebd93
 800774c:	3f66c16c 	.word	0x3f66c16c
 8007750:	5555553e 	.word	0x5555553e
 8007754:	3fc55555 	.word	0x3fc55555
 8007758:	40900000 	.word	0x40900000
 800775c:	4090cbff 	.word	0x4090cbff
 8007760:	3f6f3400 	.word	0x3f6f3400
 8007764:	4090cc00 	.word	0x4090cc00
 8007768:	3fe00000 	.word	0x3fe00000
 800776c:	fff00000 	.word	0xfff00000
 8007770:	3ff00000 	.word	0x3ff00000
 8007774:	652b82fe 	.word	0x652b82fe
 8007778:	3c971547 	.word	0x3c971547

0800777c <fabs>:
 800777c:	ec51 0b10 	vmov	r0, r1, d0
 8007780:	4602      	mov	r2, r0
 8007782:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007786:	ec43 2b10 	vmov	d0, r2, r3
 800778a:	4770      	bx	lr
 800778c:	0000      	movs	r0, r0
	...

08007790 <scalbn>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	ec55 4b10 	vmov	r4, r5, d0
 8007796:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800779a:	4606      	mov	r6, r0
 800779c:	462b      	mov	r3, r5
 800779e:	b991      	cbnz	r1, 80077c6 <scalbn+0x36>
 80077a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80077a4:	4323      	orrs	r3, r4
 80077a6:	d03b      	beq.n	8007820 <scalbn+0x90>
 80077a8:	4b33      	ldr	r3, [pc, #204]	@ (8007878 <scalbn+0xe8>)
 80077aa:	4620      	mov	r0, r4
 80077ac:	4629      	mov	r1, r5
 80077ae:	2200      	movs	r2, #0
 80077b0:	f7f8 feee 	bl	8000590 <__aeabi_dmul>
 80077b4:	4b31      	ldr	r3, [pc, #196]	@ (800787c <scalbn+0xec>)
 80077b6:	429e      	cmp	r6, r3
 80077b8:	4604      	mov	r4, r0
 80077ba:	460d      	mov	r5, r1
 80077bc:	da0f      	bge.n	80077de <scalbn+0x4e>
 80077be:	a326      	add	r3, pc, #152	@ (adr r3, 8007858 <scalbn+0xc8>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	e01e      	b.n	8007804 <scalbn+0x74>
 80077c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80077ca:	4291      	cmp	r1, r2
 80077cc:	d10b      	bne.n	80077e6 <scalbn+0x56>
 80077ce:	4622      	mov	r2, r4
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f8 fd26 	bl	8000224 <__adddf3>
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	e020      	b.n	8007820 <scalbn+0x90>
 80077de:	460b      	mov	r3, r1
 80077e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80077e4:	3936      	subs	r1, #54	@ 0x36
 80077e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80077ea:	4296      	cmp	r6, r2
 80077ec:	dd0d      	ble.n	800780a <scalbn+0x7a>
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	a11b      	add	r1, pc, #108	@ (adr r1, 8007860 <scalbn+0xd0>)
 80077f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f6:	da02      	bge.n	80077fe <scalbn+0x6e>
 80077f8:	a11b      	add	r1, pc, #108	@ (adr r1, 8007868 <scalbn+0xd8>)
 80077fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077fe:	a318      	add	r3, pc, #96	@ (adr r3, 8007860 <scalbn+0xd0>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f7f8 fec4 	bl	8000590 <__aeabi_dmul>
 8007808:	e7e6      	b.n	80077d8 <scalbn+0x48>
 800780a:	1872      	adds	r2, r6, r1
 800780c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007810:	428a      	cmp	r2, r1
 8007812:	dcec      	bgt.n	80077ee <scalbn+0x5e>
 8007814:	2a00      	cmp	r2, #0
 8007816:	dd06      	ble.n	8007826 <scalbn+0x96>
 8007818:	f36f 531e 	bfc	r3, #20, #11
 800781c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007820:	ec45 4b10 	vmov	d0, r4, r5
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800782a:	da08      	bge.n	800783e <scalbn+0xae>
 800782c:	2d00      	cmp	r5, #0
 800782e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007858 <scalbn+0xc8>)
 8007830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007834:	dac3      	bge.n	80077be <scalbn+0x2e>
 8007836:	a10e      	add	r1, pc, #56	@ (adr r1, 8007870 <scalbn+0xe0>)
 8007838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800783c:	e7bf      	b.n	80077be <scalbn+0x2e>
 800783e:	3236      	adds	r2, #54	@ 0x36
 8007840:	f36f 531e 	bfc	r3, #20, #11
 8007844:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007848:	4620      	mov	r0, r4
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <scalbn+0xf0>)
 800784c:	4629      	mov	r1, r5
 800784e:	2200      	movs	r2, #0
 8007850:	e7d8      	b.n	8007804 <scalbn+0x74>
 8007852:	bf00      	nop
 8007854:	f3af 8000 	nop.w
 8007858:	c2f8f359 	.word	0xc2f8f359
 800785c:	01a56e1f 	.word	0x01a56e1f
 8007860:	8800759c 	.word	0x8800759c
 8007864:	7e37e43c 	.word	0x7e37e43c
 8007868:	8800759c 	.word	0x8800759c
 800786c:	fe37e43c 	.word	0xfe37e43c
 8007870:	c2f8f359 	.word	0xc2f8f359
 8007874:	81a56e1f 	.word	0x81a56e1f
 8007878:	43500000 	.word	0x43500000
 800787c:	ffff3cb0 	.word	0xffff3cb0
 8007880:	3c900000 	.word	0x3c900000

08007884 <with_errno>:
 8007884:	b510      	push	{r4, lr}
 8007886:	ed2d 8b02 	vpush	{d8}
 800788a:	eeb0 8a40 	vmov.f32	s16, s0
 800788e:	eef0 8a60 	vmov.f32	s17, s1
 8007892:	4604      	mov	r4, r0
 8007894:	f7ff f87e 	bl	8006994 <__errno>
 8007898:	eeb0 0a48 	vmov.f32	s0, s16
 800789c:	eef0 0a68 	vmov.f32	s1, s17
 80078a0:	ecbd 8b02 	vpop	{d8}
 80078a4:	6004      	str	r4, [r0, #0]
 80078a6:	bd10      	pop	{r4, pc}

080078a8 <xflow>:
 80078a8:	4603      	mov	r3, r0
 80078aa:	b507      	push	{r0, r1, r2, lr}
 80078ac:	ec51 0b10 	vmov	r0, r1, d0
 80078b0:	b183      	cbz	r3, 80078d4 <xflow+0x2c>
 80078b2:	4602      	mov	r2, r0
 80078b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078b8:	e9cd 2300 	strd	r2, r3, [sp]
 80078bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078c0:	f7f8 fe66 	bl	8000590 <__aeabi_dmul>
 80078c4:	ec41 0b10 	vmov	d0, r0, r1
 80078c8:	2022      	movs	r0, #34	@ 0x22
 80078ca:	b003      	add	sp, #12
 80078cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d0:	f7ff bfd8 	b.w	8007884 <with_errno>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	e7ee      	b.n	80078b8 <xflow+0x10>
 80078da:	0000      	movs	r0, r0
 80078dc:	0000      	movs	r0, r0
	...

080078e0 <__math_uflow>:
 80078e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80078e8 <__math_uflow+0x8>
 80078e4:	f7ff bfe0 	b.w	80078a8 <xflow>
 80078e8:	00000000 	.word	0x00000000
 80078ec:	10000000 	.word	0x10000000

080078f0 <__math_oflow>:
 80078f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80078f8 <__math_oflow+0x8>
 80078f4:	f7ff bfd8 	b.w	80078a8 <xflow>
 80078f8:	00000000 	.word	0x00000000
 80078fc:	70000000 	.word	0x70000000

08007900 <_init>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr

0800790c <_fini>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr
